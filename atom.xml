<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Muffin Man</title>
	<subtitle>Frontend &amp; creative coding</subtitle>
	<link href="https://muffinman.io/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://muffinman.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2022-12-23T00:00:00+00:00</updated>
	<id>https://muffinman.io/atom.xml</id>
	<entry xml:lang="en">
		<title>Draw SVG rope using JavaScript</title>
		<published>2022-12-23T00:00:00+00:00</published>
		<updated>2022-12-23T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/draw-svg-rope-using-javascript/" type="text/html"/>
		<id>https://muffinman.io/blog/draw-svg-rope-using-javascript/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><link rel="stylesheet" href="/posts/rope.css" />
<noscript>
<p>This is an interactive article. To fully experience it, you'll need to turn JavaScript on.</p>
</noscript>
<p>Today, I'll take you through the process I came up with in regard to transforming an SVG path into a vector rope drawing.</p>
<p>We'll learn how to turn the path on the left into the rope on the right:

  <img
    class="image image--lg   "
    src="&#x2F;img&#x2F;rope&#x2F;path-to-rope.png"
    alt="SVG path and a rope drawing created from it"
  />
  

</p>
<p>The problem popped up on a project my colleagues were working on, and it stuck with me. I thought about it and started playing with it as soon as I got some free time. I had a lot of fun. Therefore I want to share the process with you.</p>
<p>Please note that this is not a coding tutorial but a detailed overview of each step. But don't worry, the code is fully available.</p>
<p>If you feel impatient, you can jump to the <a href="https://muffinman.io/blog/draw-svg-rope-using-javascript/#demo">interactive demo</a> or check the code <a href="https://codepen.io/stanko/pen/vYaEMKX">on CodePen</a>. But I wholeheartedly recommend you read the whole thing first.</p>
<h2 id="idea">Idea<a
  class="header-anchor"
  href="#idea" aria-label="Anchor link for: idea"
  title="Anchor link for: idea"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Looking at this close-up photo of a rope, we can see it consists of multiple strands twisted around each other. Visually, they split the rope into segments. Each segment's 2D projection resembles a curved polygon.</p>
<p>Our goal will be to create these polygons using JavaScript.</p>
<p>We'll start by generating simple rectangular polygons. Then we'll fine-tune them to make them look like actual rope segments.</p>
<p><img src="/img/rope/close-up.jpg" alt="Close-up photo of a rope" /></p>
<h3 id="how-to-approach-problems-like-this">How to approach problems like this<a
  class="header-anchor"
  href="#how-to-approach-problems-like-this" aria-label="Anchor link for: how-to-approach-problems-like-this"
  title="Anchor link for: how-to-approach-problems-like-this"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>I think this is one of the problems a child can solve and draw on paper. But at the same time, breaking it down and turning it into code is hard.</p>
<p>I've seen many junior developers struggle with similar problems. Usually, it starts with them diving into coding right away. Then they entangle themselves in their code and get stuck. And that is why it is so important to
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  solve the problem first.
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>I bore my mentees to death by repeating that programming is problem-solving, while code is just a tool to implement those solutions.<span class="sidenote__bracket">)</span></span>
</p>
<p>I'm a visual thinker. For me drawing things on paper makes any problem easier to solve. I would suggest you try the same. Keep a pen and paper near your computer and reach out for them before you start typing code.</p>
<p>After doodling ropes for a while, I was satisfied with the image you can see in the bottom right on the left page:</p>

  <img
    class="image image--md   "
    src="&#x2F;img&#x2F;rope&#x2F;notebook.jpg"
    alt="My notebook with sketches I draw while solving the problem"
  />
  

<p>It is not perfect, but it is straightforward and easy to code. That's why I selected it as a starting point, and only then I started coding.</p>
<h2 id="the-process">The process<a
  class="header-anchor"
  href="#the-process" aria-label="Anchor link for: the-process"
  title="Anchor link for: the-process"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p><small>The image below will stay in the viewport and update as you scroll.</small></p>
<div class="steps-wrapper">
<div class="rope-steps image--md is-in-viewport">
  <svg class="rope-svg" viewBox="0 0 500 200"></svg>
</div>
<div class="step-section step-section--path">
<h3 id="start-with-an-svg-path">Start with an SVG path<a
  class="header-anchor"
  href="#start-with-an-svg-path" aria-label="Anchor link for: start-with-an-svg-path"
  title="Anchor link for: start-with-an-svg-path"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Our goal is to make a program that turns any SVG path into a rope. The program will have to support straight line segments (polylines) and bezier curves.</p>
<p>Let's start with a simple curved path shown above.</p>



<div class="spoiler ">
  <button
    aria-expanded="false"
    aria-controls='spoiler-1'
    class="spoiler__toggle btn btn--sm btn--empty"
  >
    <span
      class="spoiler__show"
      
    >
      
        Show path&#x27;s code
      
      <span aria-hidden="true">+</span> <!-- TODO add icon -->
    </span>
    <span
      class="spoiler__hide"
      style="display: none"
    >
      
        Hide path&#x27;s code
      
      <span aria-hidden="true">-</span> <!-- TODO add icon -->
    </span>
  </button>

  <div
    id='spoiler-1'
    class="spoiler__content"
    aria-hidden="true"
    style="display: none"
  >
    <pre data-lang="html" style="background-color:#282c34;color:#dcdfe4;" class="language-html "><code class="language-html" data-lang="html"><span>&lt;</span><span style="color:#e06c75;">path
</span><span>  </span><span style="color:#e5c07b;">d</span><span>=</span><span style="color:#98c379;">&quot;M 50 150
</span><span style="color:#98c379;">     C 150 150, 150  50, 250  50
</span><span style="color:#98c379;">     C 350  50, 350 150, 450 150&quot;
</span><span>/&gt;
</span></code></pre>

  </div>
</div>
<p><span id="path" class="step-title"></span></p>
</div>
<div class="step-section step-section--points">
<h3 id="split-the-path-into-equal-parts">Split the path into equal parts<a
  class="header-anchor"
  href="#split-the-path-into-equal-parts" aria-label="Anchor link for: split-the-path-into-equal-parts"
  title="Anchor link for: split-the-path-into-equal-parts"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>If we split the path into parts, we can use each piece for one rope segment. To chop the path up, we'll have to track along it and calculate a point on every <code>n</code> pixels.</p>
<p>To do so, we'll need a way to get the total length of the path so we know when to stop iterating, as well as the function to get the point at the specific length.</p>
<p>Luckily, browsers natively provide us with the methods we need:</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGGeometryElement/getTotalLength">getTotalLength</a> which returns the length of the path.</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGGeometryElement/getPointAtLength">getPointAtLength</a> which returns the point at a given distance along the path.</li>
</ul>
<p>The nice thing is that we don't need to render the path on the page. Both methods work with the path being in memory only.</p>
<p>Below is the function I used to calculate these points:</p>



<div class="spoiler ">
  <button
    aria-expanded="false"
    aria-controls='spoiler-2'
    class="spoiler__toggle btn btn--sm btn--empty"
  >
    <span
      class="spoiler__show"
      
    >
      
        Show code
      
      <span aria-hidden="true">+</span> <!-- TODO add icon -->
    </span>
    <span
      class="spoiler__hide"
      style="display: none"
    >
      
        Hide code
      
      <span aria-hidden="true">-</span> <!-- TODO add icon -->
    </span>
  </button>

  <div
    id='spoiler-2'
    class="spoiler__content"
    aria-hidden="true"
    style="display: none"
  >
    <pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#c678dd;">function </span><span style="color:#61afef;">getPathPoints</span><span>(</span><span style="color:#e06c75;">d</span><span>, </span><span style="color:#e06c75;">step </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">10</span><span>) {
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">path </span><span style="color:#c678dd;">= </span><span>document.</span><span style="color:#61afef;">createElementNS</span><span>(</span><span style="color:#98c379;">&quot;http://www.w3.org/2000/svg&quot;</span><span>, </span><span style="color:#98c379;">&quot;path&quot;</span><span>);
</span><span>  </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">setAttribute</span><span>(</span><span style="color:#98c379;">&quot;d&quot;</span><span>, </span><span style="color:#e06c75;">d</span><span>);
</span><span>
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">length </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">getTotalLength</span><span>();
</span><span>
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">count </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">length </span><span style="color:#c678dd;">/ </span><span style="color:#e06c75;">step</span><span>;
</span><span>
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">points </span><span style="color:#c678dd;">= </span><span>[];
</span><span>
</span><span>  </span><span style="color:#c678dd;">for </span><span>(</span><span style="color:#c678dd;">let </span><span style="color:#e06c75;">i </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">0</span><span>; </span><span style="color:#e06c75;">i </span><span style="color:#c678dd;">&lt; </span><span style="color:#e06c75;">count </span><span style="color:#c678dd;">+ </span><span style="color:#e5c07b;">1</span><span>; </span><span style="color:#e06c75;">i</span><span style="color:#c678dd;">++</span><span>) {
</span><span>    </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">n </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">i </span><span style="color:#c678dd;">* </span><span style="color:#e06c75;">step</span><span>;
</span><span>    </span><span style="color:#e06c75;">points</span><span>.</span><span style="color:#61afef;">push</span><span>(</span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">getPointAtLength</span><span>(</span><span style="color:#e06c75;">n</span><span>));
</span><span>  }
</span><span>
</span><span>  </span><span style="color:#c678dd;">return </span><span style="color:#e06c75;">lines</span><span>;
</span><span>}
</span></code></pre>

  </div>
</div>
<p>You'll notice two extra points in the image above at the start and the end. Those are not included in the code snippet above. Just ignore them for now, we'll use them later.</p>
<p><strong>Note on server-side rendering</strong></p>
<p>These methods don't work on the server. However, I checked a few server-side languages, and almost all of them have variations of these two methods. For NodeJS you could probably use <a href="https://www.npmjs.com/package/svg-path-properties">svg-path-properties</a> library.</p>
<p><span id="points" class="step-title"></span></p>
</div>
<div class="step-section step-section--normals">
<h3 id="add-some-thickness">Add some thickness<a
  class="header-anchor"
  href="#add-some-thickness" aria-label="Anchor link for: add-some-thickness"
  title="Anchor link for: add-some-thickness"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Now that the path is split, we need to give each segment some thickness. We'll do it by drawing a normal line through each point.</p>
<p>For our use case, normals don't have to be mathematically exact, approximation will do. There is an easy way to approximate a normal on a curve, and it requires three consecutive points.</p>

  <img
    class="image image--sm   "
    src="&#x2F;img&#x2F;rope&#x2F;bisector.png"
    alt="Normal line is defined by the bisector of the angle between three points"
  />
  

<p>In the figure above, you can see the normal drawn through the point <strong>P</strong>. It is defined by the bisector of the angle <strong>α</strong> between points <strong>Pp</strong>, <strong>P</strong> and <strong>Pn</strong>. Points <strong>Pp</strong> and <strong>Pn</strong> are helper points. We are going to use the previous and next points as helper points.</p>
<p>If you thought, &quot;oh, that's why he added those extra points in the previous step&quot;, you are correct! Those are added to ensure the first and the last point also have neighbors on both sides.</p>
<p>Lucky me, I already had code, as I solved the same problem for my <a href="https://muffinman.io/vertigo/">Vertigo</a> project.</p>
<p><span id="normals" class="step-title"></span></p>
</div>
<div class="step-section step-section--polygons">
<h3 id="connect-normals-into-segments">Connect normals into segments<a
  class="header-anchor"
  href="#connect-normals-into-segments" aria-label="Anchor link for: connect-normals-into-segments"
  title="Anchor link for: connect-normals-into-segments"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Not much to say about this step. We just need to connect pairs of neighboring normals, which will give us blocky segments. Let's try rounding their corners to make them more interesting.</p>
<p><span id="polygons" class="step-title"></span></p>
</div>
<div class="step-section step-section--round-polygons">
<h3 id="rounding-segment-corners">Rounding segment corners<a
  class="header-anchor"
  href="#rounding-segment-corners" aria-label="Anchor link for: rounding-segment-corners"
  title="Anchor link for: rounding-segment-corners"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>To round segments, we will use Chaikin's method, which is a recursive subdivision algorithm for curve generation. The algorithm takes each line of the polygon and finds two points at a defined ratio (0.25 usually works best) on both sides. Then it replaces the original point with two newly created ones. Finally, we repeat the whole process recursively until we are satisfied with the result.</p>
<p>It sounds more complicated than it actually is, and I think the interactive example below will help things fall into place:</p>
<div class="chaikin">
    <svg class="chaikin-svg" viewBox="0 0 200 200"></svg>
    <div class="chaikin-control">
      <label for="chaikin-iterations">Iterations</label>
      <span class="chaikin-iterations-value"></span>
      <input type="range" min="0" max="6" step="1" value="0" id="chaikin-iterations" class="chaikin-iterations" />
    </div>
    <div class="chaikin-control">
      <label for="chaikin-ratio">Ratio</label>
      <span class="chaikin-ratio-value"></span>
      <input type="range" min="0.1" max="0.3" step="0.05" value="0.25" id="chaikin-ratio" class="chaikin-ratio" />
    </div>
    <div class="chaikin-control">
      <label for="chaikin-show-points">
        Show points
      </label>
      <input id="chaikin-show-points" class="chaikin-show-points" type="checkbox" checked="checked" />
    </div>
  </div>
<p>This rounding method doesn't return bezier curves but a polyline. In many cases, that is good, as geometrical operations are easier to do with polylines than with bezier curves. With enough iterations, the human eye can't tell the difference anyway.</p>
<p><span id="round-polygons" class="step-title"></span></p>
</div>
<div class="step-section step-section--angle-polygons">
<h3 id="skew-segments">Skew segments<a
  class="header-anchor"
  href="#skew-segments" aria-label="Anchor link for: skew-segments"
  title="Anchor link for: skew-segments"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>The physical rope is created by twisting multiple threads together. To mimic the twisting, we need to skew our segments. We can easily do that by rotating the bisector for a fixed angle.</p>
<p><span id="angle-polygons" class="step-title"></span></p>
</div>
<div class="step-section step-section--angle-polygons-thin">
<h3 id="call-it-a-day">Call it a day?<a
  class="header-anchor"
  href="#call-it-a-day" aria-label="Anchor link for: call-it-a-day"
  title="Anchor link for: call-it-a-day"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>If we remove helper elements and make the whole thing thinner, it resembles a rope. Depending on your needs, you could stop right here.</p>
<p>But if we look at the photo of a rope above, we can see that our polygons are not fully resembling it. They are almost regular, while in the photo, segments overlap and go under each other.</p>
<p>So let's continue and try to make our segments look more like ones in a physical rope.</p>
<p><span id="angle-polygons-thin" class="step-title"></span></p>
</div>
<div class="step-section step-section--segments">
<h3 id="improve-segments">Improve segments<a
  class="header-anchor"
  href="#improve-segments" aria-label="Anchor link for: improve-segments"
  title="Anchor link for: improve-segments"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>We need to go back to the sketch I showed you at the start. We'll un-skew segments, for now, to make things easier to see.</p>

  <img
    class="image image--sm   "
    src="&#x2F;img&#x2F;rope&#x2F;notebook-close-up.jpg"
    alt="Sketch on my notebook"
  />
  

<p>We need to cut off two segment corners and add two tips defined by points 3 and 8 in the sketch.</p>
<p>After implementing it, segments felt
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  too blocky and mathematical
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Sorry, but I didn't keep the code for it, so I don't have an example to show you.<span class="sidenote__bracket">)</span></span>
, but I knew I was going in the right direction. Then I started fine- tuning it by moving points around. You can see the result in the image above, and I think segments now look a lot more natural and curvy.</p>
<p>Before moving on, notice that the first and the last segments are slightly different as they are not sandwiched between two other segments. That's why they have different treatment in the code than all other segments.</p>
<p><span id="segments" class="step-title"></span></p>
</div>
<div class="step-section step-section--segments-rounded">
<h3 id="round-segments-again">Round segments again<a
  class="header-anchor"
  href="#round-segments-again" aria-label="Anchor link for: round-segments-again"
  title="Anchor link for: round-segments-again"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>If we apply Chaikin's algorithm to new segments as a closed polyline, we will get this:</p>
<p><img src="/img/rope/full-chaikin.png" alt="Rounding applied to the segment polyline as a whole" /></p>
<p>It is nice and round, but it feels weird, and takes away from the illusion of twisting. It would look better if we kept two sharp corners.</p>
<p>To keep the corners, we'll split the segment line into two lines and then apply the rounding algorithm on each one separately. This will give us a better illusion of threads going behind each other.</p>
<p><span id="segments-rounded" class="step-title"></span></p>
</div>
<div class="step-section step-section--segments-rounded-fix-gaps">
<h3 id="fix-gaps-optional">Fix gaps (optional)<a
  class="header-anchor"
  href="#fix-gaps-optional" aria-label="Anchor link for: fix-gaps-optional"
  title="Anchor link for: fix-gaps-optional"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>There is a minor issue that is noticeable after the rounding step. Small gaps appear because points are removed in the process.</p>
<p><img src="/img/rope/gaps.png" alt="Small gaps that appear after using rounding polylines" /></p>
<p>I don't mind it, as it is only visible if the outlines are really thin. Thicker outlines will cover everything nicely.</p>
<p>I did fix it, but only for the challenge of it. There is a hacky technique to save a point from removing when using Chaikin's algorithm - triple that point. That way, we are creating two edges with zero width. No matter how many times we do the recursive subdivision, any ratio of zero is still zero.</p>
<p>However, this hack has a drawback. It will duplicate all three points in each iteration. So if you end up using this fix, you might want to clean up the duplicated points.</p>
<p>As I already said, I don't mind, so I disabled the fix in the following steps.</p>
<p><span id="segments-rounded-fix-gaps" class="step-title"></span></p>
</div>
<div class="step-section step-section--angle-segments">
<h3 id="skew-segments-again">Skew segments again<a
  class="header-anchor"
  href="#skew-segments-again" aria-label="Anchor link for: skew-segments-again"
  title="Anchor link for: skew-segments-again"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Let's skew everything again. Same as in the previous step, we'll just rotate the bisector by a fixed angle.</p>
<p><span id="angle-segments" class="step-title"></span></p>
</div>
<div class="step-section step-section--colors">
<h3 id="add-some-color">Add some color<a
  class="header-anchor"
  href="#add-some-color" aria-label="Anchor link for: add-some-color"
  title="Anchor link for: add-some-color"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Let's remove the helper elements and add some color. I would say that now it really looks like a rope! But we are not entirely done yet.</p>
<p><span id="colors" class="step-title"></span></p>
</div>
<div class="step-section step-section--animate">
<h3 id="animate-it">Animate it<a
  class="header-anchor"
  href="#animate-it" aria-label="Anchor link for: animate-it"
  title="Anchor link for: animate-it"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>We can even animate our rope. Animating it can come in handy for charts. But honestly, I just wanted to have some fun with it.</p>
<p>We'll keep it simple. We'll update the path in each frame, regenerate the whole rope and rerender it. To do that, we'll need an animation loop and a way to update the path. If you are unfamiliar with the animation loop, I already <a href="/blog/javascript-animation-loop/">wrote about it here</a>.</p>
<p>To move the path, I wrote a function to update the <code>y</code> coordinate for each point on the path:</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#c678dd;">function </span><span style="color:#61afef;">getStepPath</span><span>() {
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">y </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">easing</span><span>(</span><span style="color:#e06c75;">t</span><span>) </span><span style="color:#c678dd;">* </span><span style="color:#e5c07b;">100 </span><span style="color:#c678dd;">+ </span><span style="color:#e5c07b;">50</span><span>;
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">y1 </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">y</span><span>;
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">y2 </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">200 </span><span style="color:#c678dd;">- </span><span style="color:#e06c75;">y</span><span>;
</span><span>
</span><span>  </span><span style="color:#c678dd;">return </span><span style="color:#98c379;">`M  50 ${</span><span style="color:#e06c75;">y2</span><span style="color:#98c379;">}
</span><span style="color:#98c379;">          C 150 ${</span><span style="color:#e06c75;">y2</span><span style="color:#98c379;">}, 150 ${</span><span style="color:#e06c75;">y1</span><span style="color:#98c379;">}, 250 ${</span><span style="color:#e06c75;">y1</span><span style="color:#98c379;">}
</span><span style="color:#98c379;">          C 350 ${</span><span style="color:#e06c75;">y1</span><span style="color:#98c379;">}, 350 ${</span><span style="color:#e06c75;">y2</span><span style="color:#98c379;">}, 450 ${</span><span style="color:#e06c75;">y2</span><span style="color:#98c379;">}`</span><span>;
</span><span>}
</span></code></pre>
<p><code>t</code> is the value that bounces between 0 and 1 over time. Then we can apply easing to the <code>t</code> value and calculate all of the <code>y</code> values.</p>
<p>To make our rope dance, we need to plug this logic into the animation loop.</p>
<p>I won't go any deeper into the implementation here. I recommend you check the code and play with it.</p>
<p><span id="animate" class="step-title"></span></p>
</div>
<div class="step-section step-section--animate-thin">
<h3 id="call-it-a-day-1">Call it a day!<a
  class="header-anchor"
  href="#call-it-a-day-1" aria-label="Anchor link for: call-it-a-day-1"
  title="Anchor link for: call-it-a-day-1"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Finally, our rope is complete! Thank you very much for sticking with me. Grab a beverage of your choice; you earned it!</p>
<p><span id="animate-thin" class="step-title"></span></p>
</div>
</div>
<h2 id="final-thoughts">Final thoughts<a
  class="header-anchor"
  href="#final-thoughts" aria-label="Anchor link for: final-thoughts"
  title="Anchor link for: final-thoughts"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>This post took way longer to write than I expected, and I hope you enjoyed it cause I did. Making interactive examples is pretty time-consuming, but it is rewarding and fun to do.</p>
<p>Before you go, don't forget to:</p>
<ul>
<li>play with <a href="https://muffinman.io/blog/draw-svg-rope-using-javascript/#demo">the interactive demo</a> below</li>
<li>check the code <a href="https://codepen.io/stanko/pen/vYaEMKX">on CodePen</a></li>
<li>dig around interactive examples <a href="/js/posts/rope.js">used on this page</a> (the code is a little messy).</li>
</ul>
<h2 id="demo">Demo<a
  class="header-anchor"
  href="#demo" aria-label="Anchor link for: demo"
  title="Anchor link for: demo"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<div class="demo">
  <svg class="demo-svg image--lg is-in-viewport" viewBox="-40 -30 580 230"></svg>
<div class="demo-controls">
    <div class="demo-controls-column">
      <div class="demo-title">Options</div>
      <label class="demo-checkbox-label">
        <input class="demo-checkbox-animate" type="checkbox" checked="checked" />
        Animate
      </label>
      <div class="demo-control">
        <label for="demo-step">Segment width</label>
        <span class="demo-value"></span>
        <input data-key="step" type="range" min="3" max="50" step="1" value="20" id="demo-step" />
      </div>
      <div class="demo-control">
        <label for="demo-thickness">Rope thickness</label>
        <span class="demo-value"></span>
        <input data-key="thickness" type="range" min="3" max="50" step="1" value="40" id="demo-thickness" />
      </div>
      <div class="demo-control">
        <label for="demo-angle">Skew angle</label>
        <span class="demo-value"></span>
        <input data-key="angle" type="range" min="0" max="90" step="1" value="45" id="demo-angle" />
      </div>
    </div>
    <div class="demo-controls-column">
      <div class="demo-title">Render</div>
      <label class="demo-checkbox-label">
        <input data-key="path" class="demo-checkbox" type="checkbox" />Path
      </label>
      <label class="demo-checkbox-label">
        <input data-key="points" class="demo-checkbox" type="checkbox" />Points
      </label>
      <label class="demo-checkbox-label">
        <input data-key="normals" class="demo-checkbox" type="checkbox" />Normals
      </label>
      <label class="demo-checkbox-label">
        <input data-key="polygons" class="demo-checkbox" type="checkbox" />Square-ish segments
      </label>
      <label class="demo-checkbox-label">
        <input data-key="polygonsRounded" class="demo-checkbox" type="checkbox" />Rounded square-ish segments
      </label>
      <label class="demo-checkbox-label">
        <input data-key="segments" class="demo-checkbox" type="checkbox" />Segments
      </label>
      <label class="demo-checkbox-label">
        <input data-key="rope" class="demo-checkbox" type="checkbox" checked="checked" />Rounded segments
      </label>
    </div>
    <div class="demo-controls-column">
      <div class="demo-title">Colors</div>
      <label class="demo-radio-label">
        <input class="demo-radio" type="radio" name="demo-colors" value="transparent" />
        Transparent
      </label>
      <label class="demo-radio-label">
        <input class="demo-radio" type="radio" name="demo-colors" value="white" />
        White
      </label>
      <label class="demo-radio-label">
        <input class="demo-radio" type="radio" checked="checked" name="demo-colors" value="natural" />
        Natural
      </label>
      <label class="demo-radio-label">
        <input class="demo-radio" type="radio" name="demo-colors" value="rainbow" />
        Rainbow
      </label>
    </div>
  </div>
</div>
<script src="/js/posts/rope.js"></script>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Get lines of text from an HTML element</title>
		<published>2022-12-22T00:00:00+00:00</published>
		<updated>2022-12-22T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/get-lines-of-text-from-html-element/" type="text/html"/>
		<id>https://muffinman.io/blog/get-lines-of-text-from-html-element/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><link rel="stylesheet" href="/posts/text-lines.css" />
<p>I was tasked with getting lines of text from an element many times. Usually it was to
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  truncate the text
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Before <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-line-clamp">line-clamp</a> was a thing<span class="sidenote__bracket">)</span></span>

or to animate the text line by line.</p>
<p>It sounds easy, but I have encountered many edge cases in practice. After trying out multiple approaches, I finally have a solution I'm satisfied with, although it has some limitations.</p>
<p>Let's start with a demo which displays one of my favorite Frank Zappa quotes:</p>
<div class="example example--demo is-in-viewport">
  <div class="example-text">
    Information is not knowledge.
    Knowledge is not wisdom.
    Wisdom is not truth.
    Truth is not beauty.
    Beauty is not love.
    Love is not music.
    Music is THE BEST.
  </div>
  <div class="example-handle" title="Drag to resize"><span></span></div>
</div>
<p><small>To restart the animation, resize the element using a handle on the right.</small></p>
<p>The same code is also available on <a href="https://codepen.io/stanko/pen/eYMQOVP">CodePen</a> for you to play with.</p>
<h2 id="implementation">Implementation<a
  class="header-anchor"
  href="#implementation" aria-label="Anchor link for: implementation"
  title="Anchor link for: implementation"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>The idea is to go word by word and check if the word has fallen into the next line. To determine if a word has fallen, we need to compare the word's top offset with the previous word's top offset. When it changes, it means a new line has started.</p>
<p>We can't get top offset from text, but we can get it from HTML elements. Therefore, we need to wrap each word in a separate <code>&lt;span&gt;</code> element first. Then we can loop through all the spans and use <code>getBoundingClientRect</code> to get the top offset value. When the value changes compared to the previous word, it means that the current word fell into a new line.</p>
<pre data-lang="ts" style="background-color:#282c34;color:#dcdfe4;" class="language-ts "><code class="language-ts" data-lang="ts"><span style="color:#c678dd;">function </span><span style="color:#61afef;">getTextLines</span><span>(</span><span style="color:#e06c75;">element</span><span>) {
</span><span>  </span><span style="color:#5c6370;">// Get plain text from the element
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">text </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">element</span><span>.</span><span style="color:#e06c75;">innerText
</span><span>    </span><span style="color:#5c6370;">// Replace all whitespace (newlines, tabs and space) with a single space
</span><span>    .</span><span style="color:#61afef;">replace</span><span>(</span><span style="color:#98c379;">/</span><span style="color:#e5c07b;">\s</span><span style="color:#c678dd;">+</span><span style="color:#98c379;">/</span><span style="color:#c678dd;">gm</span><span>, </span><span style="color:#98c379;">&quot; &quot;</span><span>)
</span><span>    </span><span style="color:#5c6370;">// Remove leading and trailing whitespace
</span><span>    .</span><span style="color:#61afef;">trim</span><span>();
</span><span>
</span><span>  </span><span style="color:#5c6370;">// Split text into words
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">words </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">text</span><span>.</span><span style="color:#61afef;">split</span><span>(</span><span style="color:#98c379;">&quot; &quot;</span><span>);
</span><span>
</span><span>  </span><span style="color:#5c6370;">// Wrap all words in spans
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">spans </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">words</span><span>.</span><span style="color:#61afef;">map</span><span>((</span><span style="color:#e06c75;">word</span><span>) </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>    </span><span style="color:#5c6370;">// Adding inline-block to make sure single word doesn&#39;t break into multiple lines
</span><span>    </span><span style="color:#5c6370;">// For example: short-term, full-scale
</span><span>    </span><span style="color:#c678dd;">return </span><span style="color:#98c379;">`&lt;span style=&quot;display: inline-block;&quot;&gt;${</span><span style="color:#e06c75;">word</span><span style="color:#98c379;">}&lt;/span&gt;`</span><span>;
</span><span>  });
</span><span>
</span><span>  </span><span style="color:#5c6370;">// Replace initial element content with our spans.
</span><span>  </span><span style="color:#5c6370;">// It is a simple way to preserve the original styling,
</span><span>  </span><span style="color:#5c6370;">// without creating a new element.
</span><span>  </span><span style="color:#e06c75;">element</span><span>.</span><span style="color:#e06c75;">innerHTML </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">spans</span><span>.</span><span style="color:#61afef;">join</span><span>(</span><span style="color:#98c379;">&quot; &quot;</span><span>);
</span><span>
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">lines </span><span style="color:#c678dd;">= </span><span>[];
</span><span>  </span><span style="color:#5c6370;">// Curren&#39;t line top offset.
</span><span>  </span><span style="color:#5c6370;">// We still haven&#39;t started, so it is null for now.
</span><span>  </span><span style="color:#c678dd;">let </span><span style="color:#e06c75;">previousTop </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">null</span><span>;
</span><span>  </span><span style="color:#5c6370;">// Array of words
</span><span>  </span><span style="color:#c678dd;">let </span><span style="color:#e06c75;">currentLine </span><span style="color:#c678dd;">= </span><span>[];
</span><span>
</span><span>  </span><span style="color:#5c6370;">// Loop through newly created spans
</span><span>  </span><span style="color:#e06c75;">element</span><span>.</span><span style="color:#61afef;">querySelectorAll</span><span>(</span><span style="color:#98c379;">&quot;span&quot;</span><span>).</span><span style="color:#61afef;">forEach</span><span>((</span><span style="color:#e06c75;">wordSpan</span><span>, </span><span style="color:#e06c75;">index</span><span>) </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>    </span><span style="color:#5c6370;">// Get position of each span
</span><span>    </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">wordRect </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">wordSpan</span><span>.</span><span style="color:#61afef;">getBoundingClientRect</span><span>();
</span><span>
</span><span>    </span><span style="color:#5c6370;">// It span&#39;s top is different than previous top,
</span><span>    </span><span style="color:#5c6370;">// it means the current word fell in the next line.
</span><span>    </span><span style="color:#5c6370;">// Skip this check for the first line, as previousTop&#39;s
</span><span>    </span><span style="color:#5c6370;">// initial value is null.
</span><span>    </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#e06c75;">previousTop </span><span style="color:#c678dd;">!== </span><span style="color:#e06c75;">wordRect</span><span>.top </span><span style="color:#c678dd;">&amp;&amp; </span><span style="color:#e06c75;">index </span><span style="color:#c678dd;">&gt; </span><span style="color:#e5c07b;">0</span><span>) {
</span><span>      </span><span style="color:#5c6370;">// Finish the current line
</span><span>      </span><span style="color:#e06c75;">lines</span><span>.</span><span style="color:#61afef;">push</span><span>(</span><span style="color:#e06c75;">currentLine</span><span>);
</span><span>      </span><span style="color:#5c6370;">// And start a new one
</span><span>      </span><span style="color:#e06c75;">currentLine </span><span style="color:#c678dd;">= </span><span>[</span><span style="color:#e06c75;">words</span><span>[</span><span style="color:#e06c75;">index</span><span>]];
</span><span>    } </span><span style="color:#c678dd;">else </span><span>{
</span><span>      </span><span style="color:#5c6370;">// We are still in the current line, add a word to it
</span><span>      </span><span style="color:#e06c75;">currentLine</span><span>.</span><span style="color:#61afef;">push</span><span>(</span><span style="color:#e06c75;">words</span><span>[</span><span style="color:#e06c75;">index</span><span>]);
</span><span>    }
</span><span>
</span><span>    </span><span style="color:#5c6370;">// Update previousTop value
</span><span>    </span><span style="color:#e06c75;">previousTop </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">wordRect</span><span>.top;
</span><span>  });
</span><span>
</span><span>  </span><span style="color:#5c6370;">// Push whatever words are left as the last line
</span><span>  </span><span style="color:#e06c75;">lines</span><span>.</span><span style="color:#61afef;">push</span><span>(</span><span style="color:#e06c75;">currentLine</span><span>);
</span><span>
</span><span>  </span><span style="color:#c678dd;">return </span><span style="color:#e06c75;">lines</span><span>;
</span><span>}
</span></code></pre>
<p>I'm adding <code>display: inline-block</code> to each word's span element to prevent a single word from breaking into multiple lines.</p>
<h3 id="limitations">Limitations<a
  class="header-anchor"
  href="#limitations" aria-label="Anchor link for: limitations"
  title="Anchor link for: limitations"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>This approach worked very well for my use case, but it has one main limitation - it works with plain text only. HTML elements will be ignored. I played with implementing support for nested elements as well, but it got complicated quickly, so I <a href="https://codepen.io/stanko/pen/vYaYqdN">never finished it</a>.</p>
<p>Your fonts have to be loaded before running this script. Otherwise it will calculate lines against one font and when the other loads, it may not be correct.</p>
<p>And one last thing, my code does everything inline and replaces the element's text with a bunch of span elements. If you don't want that, you can clone the element, run the code and then remove the clone from DOM.</p>
<h2 id="examples">Examples<a
  class="header-anchor"
  href="#examples" aria-label="Anchor link for: examples"
  title="Anchor link for: examples"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I've put a couple of examples below, and as far as I can see, each one works well, no matter the language, alphabet or direction.</p>
<p>Please excuse me if I butchered your language, I just used Google Translate with the original English text.</p>
<h3 id="english">English<a
  class="header-anchor"
  href="#english" aria-label="Anchor link for: english"
  title="Anchor link for: english"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<div class="example example--debug">
  <div class="example-text">
    Information is not knowledge.
    Knowledge is not wisdom.
    Wisdom is not truth.
    Truth is not beauty.
    Beauty is not love.
    Love is not music.
    Music is THE BEST.
  </div>
  <div class="example-handle" title="Drag to resize"><span></span></div>
</div>
<h3 id="serbian">Serbian<a
  class="header-anchor"
  href="#serbian" aria-label="Anchor link for: serbian"
  title="Anchor link for: serbian"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<div class="example example--debug">
  <div class="example-text">
Информација није знање. Знање није мудрост. Мудрост није истина. Истина није лепота. Лепота није љубав. Љубав није музика. Музика је НАЈБОЉА.
  </div>
  <div class="example-handle" title="Drag to resize"><span></span></div>
</div>
<h3 id="arabic">Arabic<a
  class="header-anchor"
  href="#arabic" aria-label="Anchor link for: arabic"
  title="Anchor link for: arabic"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<div class="example example--debug">
  <div class="example-text" dir="rtl">
المعلومات ليست معرفة. المعرفة ليست كذلك
حكمة. الحكمة ليست حقيقة. الحقيقة ليست الجمال.
الجمال ليس حب. الحب ليس موسيقى. الموسيقى
الأفضل.
  </div>
  <div class="example-handle" title="Drag to resize"><span></span></div>
</div>
<h3 id="japanese">Japanese<a
  class="header-anchor"
  href="#japanese" aria-label="Anchor link for: japanese"
  title="Anchor link for: japanese"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<div class="example example--debug">
  <div class="example-text">
情報は知識ではありません。 知識はそうではない
知恵。 知恵は真実ではありません。 真実は美ではありません。
美しさは愛ではありません。 愛は音楽ではありません。 音楽は
最高の。
  </div>
  <div class="example-handle" title="Drag to resize"><span></span></div>
</div>
<h3 id="korean">Korean<a
  class="header-anchor"
  href="#korean" aria-label="Anchor link for: korean"
  title="Anchor link for: korean"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<div class="example example--debug">
  <div class="example-text">
정보는 지식이 아닙니다. 지식은 아니다
지혜. 지혜는 진리가 아닙니다. 진실은 아름다움이 아닙니다.
아름다움은 사랑이 아닙니다. 사랑은 음악이 아닙니다. 음악은
최고.
  </div>
  <div class="example-handle" title="Drag to resize"><span></span></div>
</div>
<h3 id="thai">Thai<a
  class="header-anchor"
  href="#thai" aria-label="Anchor link for: thai"
  title="Anchor link for: thai"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<div class="example example--debug">
  <div class="example-text">
ข้อมูลไม่ใช่ความรู้ ความรู้ไม่ได้
ภูมิปัญญา. ปัญญาไม่ใช่ความจริง ความจริงไม่ใช่ความงาม
ความงามไม่ใช่ความรัก ความรักไม่ใช่ดนตรี ดนตรีคือ
ที่สุด.
  </div>
  <div class="example-handle" title="Drag to resize"><span></span></div>
</div>
<h3 id="myanmar-burmese">Myanmar (Burmese)<a
  class="header-anchor"
  href="#myanmar-burmese" aria-label="Anchor link for: myanmar-burmese"
  title="Anchor link for: myanmar-burmese"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<div class="example example--debug">
  <div class="example-text">
သတင်းအချက်အလက်သည် အသိပညာမဟုတ်ပါ။
ပညာသည် ပညာမဟုတ်။
ပညာသည် အမှန်တရားမဟုတ်ပါ။
အမှန်တရားသည် အလှတရားမဟုတ်ပါ။
အလှသည် အချစ်မဟုတ်ပါ။
အချစ်ဆိုတာ ဂီတမဟုတ်ဘူး။
ဂီတသည် အကောင်းဆုံးဖြစ်သည်။
  </div>
  <div class="example-handle" title="Drag to resize"><span></span></div>
</div>
<script src="/js/posts/text-lines.js"></script>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>CSS blocky people making waves</title>
		<published>2022-11-10T00:00:00+00:00</published>
		<updated>2022-11-10T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/css-blocky-people-making-waves/" type="text/html"/>
		<id>https://muffinman.io/blog/css-blocky-people-making-waves/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><link rel="stylesheet" href="/posts/blocky-people.css" />
<p>It all started with <a href="/blog/weekly-code-challenge-spring-2021/">the code challenge</a> in our office. The weekly theme was <strong>waves</strong>, and I tried to think outside of the box. After dropping a few ideas, I remembered <span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  the waves people do on stadiums
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>According to <a href="https://en.wikipedia.org/wiki/Wave_(audience)">Wikipedia</a> these are known as Mexican or stadium waves<span class="sidenote__bracket">)</span></span>
.</p>
<p>So I made waves using CSS only (code is available on <a href="https://codepen.io/stanko/pen/JjZKaWX">CodePen</a>):</p>
<div class="people-wrapper is-in-viewport">
  <div class="row">
    <css-person></css-person>
    <css-person></css-person>
    <css-person></css-person>
    <css-person></css-person>
    <css-person></css-person>
    <css-person></css-person>
  </div>
</div>
<p>I started without a real idea on how to do it. Obviously, I needed to create some people and animate them. 3D people would be nice, but as this was a weekly code challenge, I had to keep it simple. Blocky people, similar to characters in Minecraft, seemed like a good idea. Making them using Three.js felt too obvious, as I wanted something a little bit more unconventional and fun.</p>
<p>CSS was definitely not made for something like this, which is why I wanted to try it out.</p>
<h2 id="box">Box<a
  class="header-anchor"
  href="#box" aria-label="Anchor link for: box"
  title="Anchor link for: box"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Blocky people are obviously made of blocks, so I needed to build some 3D boxes in CSS. There are many tutorials on creating a 3D box in CSS, so I'll try to keep this short.</p>
<p>We'll need six elements to use as sides of the box. Each side needs to be appropriately sized, rotated and translated into its place.</p>



<div class="spoiler ">
  <button
    aria-expanded="false"
    aria-controls='spoiler-1'
    class="spoiler__toggle btn btn--sm btn--empty"
  >
    <span
      class="spoiler__show"
      
    >
      
        Show HTML
      
      <span aria-hidden="true">+</span> <!-- TODO add icon -->
    </span>
    <span
      class="spoiler__hide"
      style="display: none"
    >
      
        Hide HTML
      
      <span aria-hidden="true">-</span> <!-- TODO add icon -->
    </span>
  </button>

  <div
    id='spoiler-1'
    class="spoiler__content"
    aria-hidden="true"
    style="display: none"
  >
    <pre data-lang="html" style="background-color:#282c34;color:#dcdfe4;" class="language-html "><code class="language-html" data-lang="html"><span>&lt;</span><span style="color:#e06c75;">div </span><span style="color:#e5c07b;">class</span><span>=</span><span style="color:#98c379;">&quot;box&quot;</span><span>&gt;
</span><span>  &lt;</span><span style="color:#e06c75;">div </span><span style="color:#e5c07b;">class</span><span>=</span><span style="color:#98c379;">&quot;front&quot;</span><span>&gt;&lt;/</span><span style="color:#e06c75;">div</span><span>&gt;
</span><span>  &lt;</span><span style="color:#e06c75;">div </span><span style="color:#e5c07b;">class</span><span>=</span><span style="color:#98c379;">&quot;back&quot;</span><span>&gt;&lt;/</span><span style="color:#e06c75;">div</span><span>&gt;
</span><span>  &lt;</span><span style="color:#e06c75;">div </span><span style="color:#e5c07b;">class</span><span>=</span><span style="color:#98c379;">&quot;right&quot;</span><span>&gt;&lt;/</span><span style="color:#e06c75;">div</span><span>&gt;
</span><span>  &lt;</span><span style="color:#e06c75;">div </span><span style="color:#e5c07b;">class</span><span>=</span><span style="color:#98c379;">&quot;left&quot;</span><span>&gt;&lt;/</span><span style="color:#e06c75;">div</span><span>&gt;
</span><span>  &lt;</span><span style="color:#e06c75;">div </span><span style="color:#e5c07b;">class</span><span>=</span><span style="color:#98c379;">&quot;bottom&quot;</span><span>&gt;&lt;/</span><span style="color:#e06c75;">div</span><span>&gt;
</span><span>  &lt;</span><span style="color:#e06c75;">div </span><span style="color:#e5c07b;">class</span><span>=</span><span style="color:#98c379;">&quot;top&quot;</span><span>&gt;&lt;/</span><span style="color:#e06c75;">div</span><span>&gt;
</span><span>&lt;/</span><span style="color:#e06c75;">div</span><span>&gt;
</span></code></pre>

  </div>
</div>
<p>Here you can see the three steps in creating a CSS box:</p>
<ul>
<li>Size the sides appropriately</li>
<li>Translate them into position</li>
<li>Rotate them</li>
</ul>
<div class="boxes-wrapper is-in-viewport">
  <css-box class="box no-transform"></css-box>
  <css-box class="box no-rotation"></css-box>
  <css-box class="box"></css-box>
</div>
<p>The box wrapper element is outlined in <span style="color: #e53f73">red</span> and sides are outlined in <span style="color: #356cde">blue</span>.</p>
<p>If you want to play with it, I created <a href="https://codepen.io/stanko/pen/BaWzLoE">a standalone CodePen</a>. As a bonus, here is <a href="https://codepen.io/stanko/pen/gOmWLNE">a three-sided prism</a> as well.</p>
<h2 id="webcomponents">WebComponents<a
  class="header-anchor"
  href="#webcomponents" aria-label="Anchor link for: webcomponents"
  title="Anchor link for: webcomponents"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Each box consists of seven HTML elements (a wrapper and six sides). And each person ended up being built from twelve boxes and some additional wrappers. That means that each person requires a lot of HTML to be written.</p>
<p>To simplify things, we can use <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components">WebComponents</a>. Web components are a pretty powerful tool, but in this case, we will only use their template capability.</p>
<p>To do so, we need to extend <code>HTMLElement</code> and set its <code>innerHTML</code> to include our box boilerplate code:</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#5c6370;">// Box WebComponent
</span><span style="color:#c678dd;">class </span><span style="color:#e5c07b;">Box </span><span style="color:#c678dd;">extends </span><span style="color:#e5c07b;">HTMLElement {
</span><span style="color:#e5c07b;">  </span><span style="color:#c678dd;">constructor</span><span style="color:#e5c07b;">() {
</span><span style="color:#e5c07b;">    </span><span style="color:#e06c75;">super</span><span style="color:#e5c07b;">();
</span><span style="color:#e5c07b;">
</span><span style="color:#e5c07b;">    </span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#e06c75;">innerHTML </span><span style="color:#c678dd;">=
</span><span style="color:#e5c07b;">      </span><span style="color:#98c379;">`&lt;div class=&quot;front&quot;&gt;&lt;/div&gt;
</span><span style="color:#98c379;">      &lt;div class=&quot;back&quot;&gt;&lt;/div&gt;
</span><span style="color:#98c379;">      &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;
</span><span style="color:#98c379;">      &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;
</span><span style="color:#98c379;">      &lt;div class=&quot;bottom&quot;&gt;&lt;/div&gt;
</span><span style="color:#98c379;">      &lt;div class=&quot;top&quot;&gt;&lt;/div&gt;`</span><span style="color:#e5c07b;">;
</span><span style="color:#e5c07b;">  }
</span><span style="color:#e5c07b;">}
</span><span>
</span><span style="color:#5c6370;">// Register out web component so we can use it as a &lt;css-box&gt; tag
</span><span>window.</span><span style="color:#e06c75;">customElements</span><span>.</span><span style="color:#61afef;">define</span><span>(</span><span style="color:#98c379;">&quot;css-box&quot;</span><span>, </span><span style="color:#e06c75;">Box</span><span>);
</span></code></pre>
<p>Once we create our web component, we can simply use it like this:</p>
<pre data-lang="html" style="background-color:#282c34;color:#dcdfe4;" class="language-html "><code class="language-html" data-lang="html"><span>&lt;</span><span style="color:#e06c75;">css-box </span><span style="color:#e5c07b;">class</span><span>=</span><span style="color:#98c379;">&quot;head&quot;</span><span>&gt;&lt;/</span><span style="color:#e06c75;">css-box</span><span>&gt;
</span></code></pre>
<p>Very nifty, ain't it? If you inspect it, you'll see it contains six div elements we created.</p>
<h2 id="person">Person<a
  class="header-anchor"
  href="#person" aria-label="Anchor link for: person"
  title="Anchor link for: person"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Now we can finally build our first person! I already mentioned that it would consist of twelve boxes and some wrapper elements. The boxes are:</p>
<ul>
<li>Head</li>
<li>Torso</li>
<li>Arms, two segments each x2</li>
<li>Legs, two segments each x2</li>
<li>Feet x2</li>
</ul>
<p>As with the box, we'll create <code>&lt;css-person&gt;</code> web component to reduce the HTML boilerplate.</p>



<div class="spoiler ">
  <button
    aria-expanded="false"
    aria-controls='spoiler-2'
    class="spoiler__toggle btn btn--sm btn--empty"
  >
    <span
      class="spoiler__show"
      
    >
      
        Show css-person web component
      
      <span aria-hidden="true">+</span> <!-- TODO add icon -->
    </span>
    <span
      class="spoiler__hide"
      style="display: none"
    >
      
        Hide css-person web component
      
      <span aria-hidden="true">-</span> <!-- TODO add icon -->
    </span>
  </button>

  <div
    id='spoiler-2'
    class="spoiler__content"
    aria-hidden="true"
    style="display: none"
  >
    <pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#c678dd;">class </span><span style="color:#e5c07b;">Person </span><span style="color:#c678dd;">extends </span><span style="color:#e5c07b;">HTMLElement {
</span><span style="color:#e5c07b;">  </span><span style="color:#c678dd;">constructor</span><span style="color:#e5c07b;">() {
</span><span style="color:#e5c07b;">    </span><span style="color:#e06c75;">super</span><span style="color:#e5c07b;">();
</span><span style="color:#e5c07b;">
</span><span style="color:#e5c07b;">    </span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#e06c75;">innerHTML </span><span style="color:#c678dd;">=
</span><span style="color:#e5c07b;">      </span><span style="color:#98c379;">`&lt;div class=&quot;person-top&quot;&gt;
</span><span style="color:#98c379;">        &lt;div class=&quot;head-wrapper&quot;&gt;
</span><span style="color:#98c379;">          &lt;css-box class=&quot;head&quot;&gt;&lt;/css-box&gt;
</span><span style="color:#98c379;">        &lt;/div&gt;
</span><span style="color:#98c379;">        &lt;div class=&quot;arm&quot;&gt;
</span><span style="color:#98c379;">          &lt;css-box class=&quot;arm-top&quot;&gt;&lt;/css-box&gt;
</span><span style="color:#98c379;">          &lt;css-box class=&quot;arm-bottom&quot;&gt;&lt;/css-box&gt;
</span><span style="color:#98c379;">        &lt;/div&gt;
</span><span style="color:#98c379;">        &lt;css-box class=&quot;torso&quot;&gt;&lt;/css-box&gt;
</span><span style="color:#98c379;">        &lt;div class=&quot;arm arm-right&quot;&gt;
</span><span style="color:#98c379;">          &lt;css-box class=&quot;arm-top&quot;&gt;&lt;/css-box&gt;
</span><span style="color:#98c379;">          &lt;css-box class=&quot;arm-bottom&quot;&gt;&lt;/css-box&gt;
</span><span style="color:#98c379;">        &lt;/div&gt;
</span><span style="color:#98c379;">      &lt;/div&gt;
</span><span style="color:#98c379;">      &lt;div class=&quot;legs&quot;&gt;
</span><span style="color:#98c379;">        &lt;div class=&quot;leg leg-left&quot;&gt;
</span><span style="color:#98c379;">          &lt;css-box class=&quot;leg-top&quot;&gt;&lt;/css-box&gt;
</span><span style="color:#98c379;">          &lt;css-box class=&quot;leg-bottom&quot;&gt;&lt;/css-box&gt;
</span><span style="color:#98c379;">          &lt;css-box class=&quot;leg-shoe&quot;&gt;&lt;/css-box&gt;
</span><span style="color:#98c379;">        &lt;/div&gt;
</span><span style="color:#98c379;">        &lt;div class=&quot;leg leg-right&quot;&gt;
</span><span style="color:#98c379;">          &lt;css-box class=&quot;leg-top&quot;&gt;&lt;/css-box&gt;
</span><span style="color:#98c379;">          &lt;css-box class=&quot;leg-bottom&quot;&gt;&lt;/css-box&gt;
</span><span style="color:#98c379;">          &lt;css-box class=&quot;leg-shoe&quot;&gt;&lt;/css-box&gt;
</span><span style="color:#98c379;">        &lt;/div&gt;
</span><span style="color:#98c379;">      &lt;/div&gt;`</span><span style="color:#e5c07b;">;
</span><span style="color:#e5c07b;">  }
</span><span style="color:#e5c07b;">}
</span><span>
</span><span>window.</span><span style="color:#e06c75;">customElements</span><span>.</span><span style="color:#61afef;">define</span><span>(</span><span style="color:#98c379;">&quot;css-person&quot;</span><span>, </span><span style="color:#e06c75;">Person</span><span>);
</span></code></pre>

  </div>
</div>
<p>After rotating and putting all of the boxes in place, we end up with a sitting person:</p>
<div class="people-wrapper people-wrapper-single">
  <css-person class="no-animation no-colors"></css-person>
</div>
<div class="rotation">
  <label for="r1">Rotation:</label>
  <input id="r1" value="60" min="0" max="360" type="range" class="rotation-input" />
</div>
<h2 id="colors">Colors<a
  class="header-anchor"
  href="#colors" aria-label="Anchor link for: colors"
  title="Anchor link for: colors"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I wanted to automate coloring instead of manually choosing colors for each person. For that, I reached out for SASS' <code>random</code> function. The function will return an integer between zero and the limit given.</p>
<p>We can use it to get a random index from an array like this:</p>
<pre data-lang="scss" style="background-color:#282c34;color:#dcdfe4;" class="language-scss "><code class="language-scss" data-lang="scss"><span style="color:#5c6370;">// A list of colors
</span><span style="color:#e06c75;">$colors</span><span>: red, blue, yellow, green;
</span><span>
</span><span style="color:#5c6370;">// Pick a random index between 0 and 3
</span><span style="color:#e06c75;">$random-index</span><span>: </span><span style="color:#61afef;">random</span><span>(</span><span style="color:#61afef;">length</span><span>(</span><span style="color:#e06c75;">$colors</span><span>));
</span></code></pre>
<p>But that gives us an index and not the color. To pick a color value, we'll use <code>nth</code> function, which returns the nth item from the array. Putting it all together, it looks like this:</p>
<pre data-lang="scss" style="background-color:#282c34;color:#dcdfe4;" class="language-scss "><code class="language-scss" data-lang="scss"><span style="color:#5c6370;">// A list of colors
</span><span style="color:#e06c75;">$colors</span><span>: red, blue, yellow, green;
</span><span>
</span><span style="color:#5c6370;">// Picking one random color from the list
</span><span style="color:#e06c75;">$color</span><span>: </span><span style="color:#61afef;">nth</span><span>(</span><span style="color:#e06c75;">$colors</span><span>, </span><span style="color:#61afef;">random</span><span>(</span><span style="color:#61afef;">length</span><span>(</span><span style="color:#e06c75;">$colors</span><span>)));
</span></code></pre>
<p>Actual code used looks like this:</p>



<div class="spoiler ">
  <button
    aria-expanded="false"
    aria-controls='spoiler-3'
    class="spoiler__toggle btn btn--sm btn--empty"
  >
    <span
      class="spoiler__show"
      
    >
      
        Show SCSS
      
      <span aria-hidden="true">+</span> <!-- TODO add icon -->
    </span>
    <span
      class="spoiler__hide"
      style="display: none"
    >
      
        Hide SCSS
      
      <span aria-hidden="true">-</span> <!-- TODO add icon -->
    </span>
  </button>

  <div
    id='spoiler-3'
    class="spoiler__content"
    aria-hidden="true"
    style="display: none"
  >
    <pre data-lang="scss" style="background-color:#282c34;color:#dcdfe4;" class="language-scss "><code class="language-scss" data-lang="scss"><span style="color:#e06c75;">$tshirt-colors</span><span>: </span><span style="color:#e5c07b;">#9b59b7</span><span>, </span><span style="color:#e5c07b;">#1abc9d</span><span>, </span><span style="color:#e5c07b;">#e74c3c</span><span>, </span><span style="color:#e5c07b;">#f1c40f</span><span>, </span><span style="color:#e5c07b;">#3498db</span><span>, </span><span style="color:#e5c07b;">#e67e22</span><span>, </span><span style="color:#e5c07b;">#34495e</span><span>;
</span><span style="color:#e06c75;">$shoes-colors</span><span>: </span><span style="color:#e5c07b;">#2b071f</span><span>, </span><span style="color:#e5c07b;">#ffe600</span><span>, </span><span style="color:#e5c07b;">#345</span><span>, </span><span style="color:#e5c07b;">#ecf0f1</span><span>, </span><span style="color:#e5c07b;">#0abde3</span><span>, </span><span style="color:#e5c07b;">#6c5ce7</span><span>;
</span><span style="color:#e06c75;">$pants-colors</span><span>: </span><span style="color:#e5c07b;">#1e3799</span><span>, </span><span style="color:#e5c07b;">#198066</span><span>, </span><span style="color:#e5c07b;">#510b6d</span><span>, </span><span style="color:#e5c07b;">#2c3e50</span><span>, </span><span style="color:#e5c07b;">#d35400</span><span>, </span><span style="color:#e5c07b;">#95a5a6</span><span>;
</span><span style="color:#e06c75;">$skin-colors</span><span>: </span><span style="color:#e5c07b;">#d8b997</span><span>, </span><span style="color:#e5c07b;">#bb9472</span><span>, </span><span style="color:#e5c07b;">#866946</span><span>, </span><span style="color:#e5c07b;">#473a30</span><span>;
</span><span>
</span><span style="color:#c678dd;">@for </span><span style="color:#e06c75;">$i </span><span style="color:#c678dd;">from </span><span style="color:#e5c07b;">1 </span><span style="color:#c678dd;">through </span><span style="color:#e5c07b;">10 </span><span>{
</span><span style="color:#c678dd;">  </span><span style="color:#e06c75;">css-person</span><span style="color:#e5c07b;">:</span><span style="color:#c678dd;">nth-child(#{$i}) </span><span>{
</span><span>    </span><span style="color:#5c6370;">// For each person we select a random set of colors:
</span><span>    </span><span style="color:#e06c75;">$tshirt-color</span><span>: </span><span style="color:#61afef;">nth</span><span>(</span><span style="color:#e06c75;">$tshirt-colors</span><span>, </span><span style="color:#61afef;">random</span><span>(</span><span style="color:#61afef;">length</span><span>(</span><span style="color:#e06c75;">$tshirt-colors</span><span>)));
</span><span>    </span><span style="color:#e06c75;">$shoes-color</span><span>: </span><span style="color:#61afef;">nth</span><span>(</span><span style="color:#e06c75;">$shoes-colors</span><span>, </span><span style="color:#61afef;">random</span><span>(</span><span style="color:#61afef;">length</span><span>(</span><span style="color:#e06c75;">$shoes-colors</span><span>)));
</span><span>    </span><span style="color:#e06c75;">$pants-color</span><span>: </span><span style="color:#61afef;">nth</span><span>(</span><span style="color:#e06c75;">$pants-colors</span><span>, </span><span style="color:#61afef;">random</span><span>(</span><span style="color:#61afef;">length</span><span>(</span><span style="color:#e06c75;">$pants-colors</span><span>)));
</span><span>    </span><span style="color:#e06c75;">$skin-color</span><span>: </span><span style="color:#61afef;">nth</span><span>(</span><span style="color:#e06c75;">$skin-colors</span><span>, </span><span style="color:#61afef;">random</span><span>(</span><span style="color:#61afef;">length</span><span>(</span><span style="color:#e06c75;">$skin-colors</span><span>)));
</span><span>  }
</span><span>}
</span></code></pre>

  </div>
</div>
<p>Unfortunately, SASS is not dynamic and all the randomness is executed once on the build time. When we refresh the page, the colors will stay the same. But if we compile SASS again, we will get a new set of color combinations. That's why I'm using a <code>@for</code> loop to generate a bunch of different color combinations.</p>
<p>You can see the result and loop through the generated combinations below:</p>
<div class="people-wrapper people-wrapper-single">
  <css-person class="no-animation color-person person-1"></css-person>
</div>
<div class="rotation">
  <label for="r2">Rotation:</label>
  <input id="r2" value="60" min="0" max="360" type="range" class="rotation-input" />
</div>
<button class="btn btn--sm btn--empty next-color" style="margin-top: 10rem">Next color combination</button>
<h2 id="animation">Animation<a
  class="header-anchor"
  href="#animation" aria-label="Anchor link for: animation"
  title="Anchor link for: animation"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>To figure out the moves, I looked at a video of people doing stadium waves.</p>
<p>At first glance, it might not look so, but animation code is reasonably simple. It is just a bunch of CSS transforms. To give you an idea, here is how arm segments are animated:</p>
<pre data-lang="scss" style="background-color:#282c34;color:#dcdfe4;" class="language-scss "><code class="language-scss" data-lang="scss"><span style="color:#c678dd;">@keyframes </span><span>arm-top {
</span><span>  </span><span style="color:#e5c07b;">0</span><span style="color:#c678dd;">% </span><span>{
</span><span>    transform: </span><span style="color:#61afef;">rotateX</span><span>(</span><span style="color:#e5c07b;">-40</span><span style="color:#c678dd;">deg</span><span>);
</span><span>  }
</span><span>  </span><span style="color:#e5c07b;">50</span><span style="color:#c678dd;">% </span><span>{
</span><span>    transform: </span><span style="color:#61afef;">rotateX</span><span>(</span><span style="color:#e5c07b;">0</span><span style="color:#c678dd;">deg</span><span>);
</span><span>  }
</span><span>}
</span><span>
</span><span style="color:#c678dd;">@keyframes </span><span>arm-bottom {
</span><span>  </span><span style="color:#e5c07b;">0</span><span style="color:#c678dd;">% </span><span>{
</span><span>    transform: </span><span style="color:#61afef;">rotateX</span><span>(</span><span style="color:#e5c07b;">40</span><span style="color:#c678dd;">deg</span><span>);
</span><span>  }
</span><span>  </span><span style="color:#e5c07b;">50</span><span style="color:#c678dd;">% </span><span>{
</span><span>    transform: </span><span style="color:#61afef;">rotateX</span><span>(</span><span style="color:#e5c07b;">0</span><span style="color:#c678dd;">deg</span><span>) </span><span style="color:#61afef;">translateZ</span><span>(</span><span style="color:#e5c07b;">0</span><span style="color:#c678dd;">em</span><span>);
</span><span>  }
</span><span>}
</span></code></pre>
<p>All of the animations last for the same time, and they are looping indefinitely:</p>
<div class="people-wrapper people-wrapper-single is-in-viewport">
  <css-person></css-person>
</div>
<div class="rotation">
  <label for="r3">Rotation:</label>
  <input id="r3" value="60" min="0" max="360" type="range" class="rotation-input" />
</div>
<h2 id="putting-it-all-together">Putting it all together<a
  class="header-anchor"
  href="#putting-it-all-together" aria-label="Anchor link for: putting-it-all-together"
  title="Anchor link for: putting-it-all-together"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>We created a 3D box, assembled a person from a bunch of them, colored them and animated everything. All that is left to do is add more people and create wave delay animations for each subsequent person.</p>
<p>And here they are, behold the CSS people making waves:</p>
<div class="people-wrapper is-in-viewport">
  <div class="row">
    <css-person></css-person>
    <css-person></css-person>
    <css-person></css-person>
    <css-person></css-person>
    <css-person></css-person>
    <css-person></css-person>
  </div>
</div>
<div class="rotation">
  <label for="r4">Rotation:</label>
  <input id="r4" value="60" min="0" max="360" type="range" class="rotation-input" />
</div>
<h3 id="bonus-for-the-world-cup">Bonus for the World Cup<a
  class="header-anchor"
  href="#bonus-for-the-world-cup" aria-label="Anchor link for: bonus-for-the-world-cup"
  title="Anchor link for: bonus-for-the-world-cup"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>This idea comes from a colleague of mine. When I shared it with him, he responded with this:</p>
<blockquote>
<p>Awesome!!<br/>
This is great for the upcoming world cup!!<br/>
You could integrate a live score and have two sides of fans - the one in the lead does the wave 😂</p>
</blockquote>
<p>I didn't go that far with the live score, but I did some color theming to create international fans:</p>
<div class="people-wrapper is-in-viewport">
  <div class="row">
    <css-person class="fan serbia"></css-person>
    <css-person class="fan serbia"></css-person>
    <css-person class="fan serbia"></css-person>
    <css-person class="fan serbia"></css-person>
    <css-person class="fan serbia"></css-person>
    <css-person class="fan serbia"></css-person>
  </div>
</div>
<div class="country-select">
  <div>Select a country to root for:</div>
  <label>
    <input type="radio" name="country" value="brazil" /> Brazil
  </label>
  <label>
    <input type="radio" name="country" value="denmark" /> Denmark
  </label>
  <label>
    <input type="radio" name="country" value="netherlands" /> Netherlands
  </label>
  <label>
    <input type="radio" name="country" value="serbia" checked="checked" /> Serbia
  </label>
  <label>
    <input type="radio" name="country" value="usa" /> USA
  </label>
</div>
<h2 id="final-thoughts">Final thoughts<a
  class="header-anchor"
  href="#final-thoughts" aria-label="Anchor link for: final-thoughts"
  title="Anchor link for: final-thoughts"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>One note of performance - I limited demos to six people because if more are added, animations can get very choppy on older hardware and some browsers. Safari behaves the best, and it can handle the most people. That's why on the CodePen, I check for it and add more people on Safari for a better effect. Also, in the post, animations are paused when not in the viewport.</p>
<p>I made it year and a half ago and kind of forgot about it. So I owe big thanks to my colleague Stefan who inspired me to do the World Cup version and write this blog post.</p>
<p>It was super fun to make waves and write this blog post. This is the first time I tried making a more interactive article with multiple demos and controls. I really hope you like it!</p>
<script src="/js/posts/blocky-people.js"></script>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Scrubbing videos using JavaScript</title>
		<published>2022-10-21T00:00:00+00:00</published>
		<updated>2022-10-21T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/scrubbing-videos-using-javascript/" type="text/html"/>
		<id>https://muffinman.io/blog/scrubbing-videos-using-javascript/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>JavaScript part is actually pretty easy, it is more about preparing the video file correctly. If you just want the code for converting videos using ffmpeg, jump to <a href="https://muffinman.io/blog/scrubbing-videos-using-javascript/#prepare-videos-by-adding-more-keyframes">the last section</a>.</p>
<p>Otherwise, let's start scrolling down to see these two videos scrubbing:</p>
<div
  id="sticky-videos"
  style="
  display:flex;
  justify-content: space-between;
  position: sticky;
  z-index: 1;
  top: 10rem;
  margin: 0 -10rem 20rem;
  border-radius: 8px;
  padding: 0rem 10rem 10rem;
  background: var(--bg-color);
  transition: opacity 250ms;
  "
>
  <div style="max-width: calc(50% - 10rem);">
    <div style="padding-bottom: 4rem"><small>Every 5 frames</small></div>
    <video
      style="border-radius: 4px; background: #f7f7f7;"
      id="line-video-5"
      playsinline="true"
      muted="muted"
    >
      <source src="/videos/line-5.webm#t=0.001"></source>
      <source src="/videos/line-5.mp4#t=0.001"></source>
    </video>
  </div>
<div style="max-width: calc(50% - 10rem);">
    <div style="padding-bottom: 4rem"><small>Every 100 frames</small></div>
    <video
      style="border-radius: 4px; background: #f7f7f7;"
      id="line-video-100"
      playsinline="true"
      muted="muted"
    >
      <source src="/videos/line-100.webm#t=0.001"></source>
      <source src="/videos/line-100.mp4#t=0.001"></source>
    </video>
  </div>
</div>
<script id="example-code">
  var video5 = document.querySelector('#line-video-5');
  var video100 = document.querySelector('#line-video-100');
  var stickyVideosElement = document.querySelector('#sticky-videos');
  var DURATION = 5; // videos are 5 seconds long

  function scrubVideos() {
    var time = window.scrollY * 0.005;

    video5.currentTime = time;
    video100.currentTime = time;

    // Hide video when scrolled after it ended,
    // and after it was in the viewport some more time
    if (time > DURATION * 1.25) {
      stickyVideosElement.style.opacity = 0;
      stickyVideosElement.style.pointerEvents = 'none';
    } else {
      stickyVideosElement.style.opacity = 1;
      stickyVideosElement.style.pointerEvents = 'all';
    }
  }

scrubVideos();
  window.addEventListener('scroll', scrubVideos, { passive: true });
</script>
<p>Code used looks like this, it just updates <code>currentTime</code> based on window scroll. But the left video should work smoother than the right one. Depending on your browser, it can be more or less noticeable. The answer why it happens is <strong>keyframes</strong>.</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#c678dd;">const </span><span style="color:#e06c75;">video </span><span style="color:#c678dd;">= </span><span>document.</span><span style="color:#61afef;">querySelector</span><span>(</span><span style="color:#98c379;">&#39;#video&#39;</span><span>);
</span><span>
</span><span>window.</span><span style="color:#61afef;">addEventListener</span><span>(</span><span style="color:#98c379;">&#39;scroll&#39;</span><span>, </span><span style="color:#c678dd;">function</span><span>() {
</span><span>  </span><span style="color:#e06c75;">video</span><span>.</span><span style="color:#e06c75;">currentTime </span><span style="color:#c678dd;">= </span><span>window.</span><span style="color:#e06c75;">scrollY </span><span style="color:#c678dd;">* </span><span style="color:#e5c07b;">0.01</span><span>;
</span><span>});
</span></code></pre>
<h2 id="keyframes">Keyframes<a
  class="header-anchor"
  href="#keyframes" aria-label="Anchor link for: keyframes"
  title="Anchor link for: keyframes"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>In video encoding, the keyframe is the full frame of the image in a video. Frames that are in between these keyframes (aka delta frames), contain only the difference between the previous (or the next) frame.</p>
<p>Number of keyframes will vary depending on how the video was created and encoded. Having each frame encoded as a keyframe would be very inefficient and the video file would be huge.</p>
<p>To display delta frames, video players decode the information and piece them together. Some players only do this when video is playing, but not when you are scrubbing through it. Because of that, and because it has way less keyframes, the right video feels much choppier than the left one.</p>
<p>The video on the right contains a keyframe every one hundred frames, while the one on the left has one keyframe every five frames. That is twenty times more keyframes. Naturally, it reflects on the file size. For this specific video, it is about five times more.</p>
<pre data-lang="sh" style="background-color:#282c34;color:#dcdfe4;" class="language-sh "><code class="language-sh" data-lang="sh"><span style="color:#e06c75;">line-100.mp4</span><span>    146 Kb
</span><span style="color:#e06c75;">line-5.mp4</span><span>      845 Kb </span><span style="color:#5c6370;"># ~5 times more
</span><span style="color:#e06c75;">line-100.webm</span><span>   195 Kb
</span><span style="color:#e06c75;">line-5.webm</span><span>    1038 Kb </span><span style="color:#5c6370;"># ~5 times more
</span></code></pre>
<h2 id="browser-support">Browser support<a
  class="header-anchor"
  href="#browser-support" aria-label="Anchor link for: browser-support"
  title="Anchor link for: browser-support"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Browsers behave radically differently. But if you provide them a correct video format with enough keyframes, you should be pretty well covered. You'll have to provide the video in at least two formats - <code>mp4</code> and <code>webm</code>.</p>
<p>On desktop, Safari seems to have the best support, followed by Chrome and Firefox in third place. I guess Edge will behave the same as Chrome, but I haven't tested it. Safari even works great with a low number of keyframes. It seems like it recreates all of the delta frames on the fly.</p>
<p>The left video works slightly smoother in Chrome than in Firefox, but the right one is choppy in both. For Firefox you'll have to provide <code>webm</code> because <code>mp4</code> is choppy even with an increased number of keyframes.</p>
<p>On mobile, Safari again works the best and it recreates the delta frames, although the right video is not as smooth on my iPhone mini. Chrome on Android works as expected, but please bear in mind that older devices might struggle, not because of the number of keyframes, but because of lack of CPU power.</p>
<p>Because Firefox is choppy with <code>mp4</code> and iOS Safari doesn't like <code>webm</code> we need to provide both file types.</p>
<h2 id="prepare-videos-by-adding-more-keyframes">Prepare videos by adding more keyframes<a
  class="header-anchor"
  href="#prepare-videos-by-adding-more-keyframes" aria-label="Anchor link for: prepare-videos-by-adding-more-keyframes"
  title="Anchor link for: prepare-videos-by-adding-more-keyframes"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>For anything video related I reach out to <a href="https://ffmpeg.org/">FFmpeg</a>. It is a swiss-knife for video converting, recording and streaming.</p>
<p>These are minimal commands that convert a video and set a specific number of keyframes (for both <code>mp4</code> and <code>webm</code> formats). The key is part highlighted in blue, which tells ffmpeg how often to create keyframes.</p>
<p><strong>.webm</strong></p>
<pre style="color: #dcdfe4; border-radius: 4px;">
ffmpeg -i input-video.mp4 -vcodec libvpx-vp9 <span style="color: var(--theme-color)">-g 10</span> -acodec copy output-10.webm
</pre>
<p><strong>.mp4</strong></p>
<pre style="color: #dcdfe4; border-radius: 4px;">
ffmpeg -i input-video.mp4 -vcodec libx264 <span style="color: var(--theme-color)">-x264-params keyint=10:scenecut=0</span> -acodec copy output-10.mp4
</pre>
<p>These examples create a keyframe every ten frames, but you can experiment and find the value which works the best for you, balancing smoothness and the file size.</p>
<h2 id="p-s">P.S.<a
  class="header-anchor"
  href="#p-s" aria-label="Anchor link for: p-s"
  title="Anchor link for: p-s"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Fun fact, the example video in this post was generated using JavaScript.</p>
<p>For this post, I needed a freely licensed video, haven't found one quickly and decided to generate my own. I used <a href="https://www.remotion.dev/">Remotion</a>, a library which allows you to render your React components as a video. Under the hood, it uses puppeteer and ffmpeg, while providing easy to use components and user interface.</p>
<p>My video is actually generative, and it uses simple math and simplex noise to create the movement of the line. Here are some stills for different random seeds:</p>

  <img
    class="image image--md   "
    src="&#x2F;img&#x2F;video-scrubbing&#x2F;stills.png"
    alt="Stills from unused generative videos"
  />
  


    </content>

	</entry>
	<entry xml:lang="en">
		<title>Core</title>
		<published>2022-07-13T00:00:00+00:00</published>
		<updated>2022-07-13T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/core/" type="text/html"/>
		<id>https://muffinman.io/art/core/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>I'll be honest, this one came out as an accident. I forgot to revert some old code and it just happened. To me, it resembles atmosphere or a cell. My favorite from the series so far.</p>
<p>It is plotted with pens of two different width, which gives it more depth, especially when you see it in person.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Untitled</title>
		<published>2022-07-03T00:00:00+00:00</published>
		<updated>2022-07-03T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/branches-02-untitled/" type="text/html"/>
		<id>https://muffinman.io/art/branches-02-untitled/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>The second plot from the series. Polygons instead of the circle, to get this cube like shape.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Introducing keen</title>
		<published>2022-06-20T00:00:00+00:00</published>
		<updated>2022-06-20T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/introducing-keen-npm-package-boilerplate/" type="text/html"/>
		<id>https://muffinman.io/blog/introducing-keen-npm-package-boilerplate/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>As someone who maintains a couple of npm packages, I got frustrated by all of the notifications about security issues in my dev dependencies. In 99.99% I wasn't even using the vulnerable code, and usually it would be buried deep in the dependency tree.</p>
<p>Therefore, I decided to revisit and simplify my workflow. These were the main things I wanted to have:</p>
<ul>
<li>Use TypeScript and generate type definitions</li>
<li>Generate both ESM and CJS modules</li>
<li>Reduce the number of dev dependencies</li>
<li>Have an easy way to develop and deploy a demo page</li>
</ul>
<p>Less dependencies makes maintenance easier and code is less prone to the security issues.</p>
<h2 id="keen">Keen<a
  class="header-anchor"
  href="#keen" aria-label="Anchor link for: keen"
  title="Anchor link for: keen"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>So without further ado I present you <a href="https://github.com/Stanko/keen/">keen</a>, my npm package boilerplate. It does all of the things mentioned above with only two dependencies, <code>esbuild</code> and <code>typescript</code>.</p>

  <img
    class="image   image--shadow image--caption"
    src="&#x2F;img&#x2F;keen&#x2F;dependencies.png"
    alt="Terminal windows with keen&#x27;s node_modules folder listed"
  />
  <small class="image__caption">These are all dependencies keen comes with out of the box.</small>

<p><a href="esbuild.github.io/">esbuild</a> handles local development and builds a demo page. TypeScript takes care of building ESM and CJS modules as well as type definitions.</p>
<h3 id="disclaimer">Disclaimer<a
  class="header-anchor"
  href="#disclaimer" aria-label="Anchor link for: disclaimer"
  title="Anchor link for: disclaimer"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Keen is minimal and opinionated on purpose, and it might not fit your workflow. If you want something more robust and don't mind having more dependencies, check tools like <a href="https://github.com/egoist/tsup">tsup</a> or <a href="https://github.com/unjs/unbuild">unbuild</a>.</p>
<h3 id="esm-and-cjs-modules">ESM and CJS modules<a
  class="header-anchor"
  href="#esm-and-cjs-modules" aria-label="Anchor link for: esm-and-cjs-modules"
  title="Anchor link for: esm-and-cjs-modules"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>It helps your users to have both types of modules available. The main blocker is that you can't use ESM packages in CJS.</p>
<p>That's why I have two builds which are using different TypeScript configurations. Both config files extend <a href="https://github.com/Stanko/keen/blob/dev/tsconfig-base.json">tsconfig-base.json</a> and they just define the appropriate module type and transpile target:</p>



<div class="spoiler ">
  <button
    aria-expanded="false"
    aria-controls='spoiler-1'
    class="spoiler__toggle btn btn--sm btn--empty"
  >
    <span
      class="spoiler__show"
      
    >
      
        Show tsconfig-esm.json
      
      <span aria-hidden="true">+</span> <!-- TODO add icon -->
    </span>
    <span
      class="spoiler__hide"
      style="display: none"
    >
      
        Hide tsconfig-esm.json
      
      <span aria-hidden="true">-</span> <!-- TODO add icon -->
    </span>
  </button>

  <div
    id='spoiler-1'
    class="spoiler__content"
    aria-hidden="true"
    style="display: none"
  >
    <pre data-lang="json" style="background-color:#282c34;color:#dcdfe4;" class="language-json "><code class="language-json" data-lang="json"><span>{
</span><span>  </span><span style="color:#98c379;">&quot;extends&quot;</span><span>: </span><span style="color:#98c379;">&quot;./tsconfig-base.json&quot;</span><span>,
</span><span>  </span><span style="color:#98c379;">&quot;compilerOptions&quot;</span><span>: {
</span><span>    </span><span style="color:#98c379;">&quot;module&quot;</span><span>: </span><span style="color:#98c379;">&quot;ES2020&quot;</span><span>,
</span><span>    </span><span style="color:#98c379;">&quot;outDir&quot;</span><span>: </span><span style="color:#98c379;">&quot;dist/esm&quot;</span><span>,
</span><span>    </span><span style="color:#98c379;">&quot;target&quot;</span><span>: </span><span style="color:#98c379;">&quot;ES2015&quot;
</span><span>  }
</span><span>}
</span></code></pre>

  </div>
</div>



<div class="spoiler ">
  <button
    aria-expanded="false"
    aria-controls='spoiler-2'
    class="spoiler__toggle btn btn--sm btn--empty"
  >
    <span
      class="spoiler__show"
      
    >
      
        Show tsconfig-cjs.json
      
      <span aria-hidden="true">+</span> <!-- TODO add icon -->
    </span>
    <span
      class="spoiler__hide"
      style="display: none"
    >
      
        Hide tsconfig-cjs.json
      
      <span aria-hidden="true">-</span> <!-- TODO add icon -->
    </span>
  </button>

  <div
    id='spoiler-2'
    class="spoiler__content"
    aria-hidden="true"
    style="display: none"
  >
    <pre data-lang="json" style="background-color:#282c34;color:#dcdfe4;" class="language-json "><code class="language-json" data-lang="json"><span>{
</span><span>  </span><span style="color:#98c379;">&quot;extends&quot;</span><span>: </span><span style="color:#98c379;">&quot;./tsconfig-base.json&quot;</span><span>,
</span><span>  </span><span style="color:#98c379;">&quot;compilerOptions&quot;</span><span>: {
</span><span>    </span><span style="color:#98c379;">&quot;module&quot;</span><span>: </span><span style="color:#98c379;">&quot;commonjs&quot;</span><span>,
</span><span>    </span><span style="color:#98c379;">&quot;outDir&quot;</span><span>: </span><span style="color:#98c379;">&quot;dist/cjs&quot;</span><span>,
</span><span>    </span><span style="color:#98c379;">&quot;target&quot;</span><span>: </span><span style="color:#98c379;">&quot;ES2015&quot;
</span><span>  }
</span><span>}
</span></code></pre>

  </div>
</div>
<p>I won't go into more details, but there are a couple of other things I had to setup. The code I ended up using is heavily based on these two articles. If you are interested to find out more, check them out:</p>
<ul>
<li><a href="https://www.sensedeep.com/blog/posts/2021/how-to-create-single-source-npm-module.html">How to Create a Hybrid NPM Module for ESM and CommonJS.</a></li>
<li><a href="https://antfu.me/posts/publish-esm-and-cjs">Publish ESM and CJS in a single package</a></li>
</ul>
<h3 id="local-development-and-demo-page">Local development and demo page<a
  class="header-anchor"
  href="#local-development-and-demo-page" aria-label="Anchor link for: local-development-and-demo-page"
  title="Anchor link for: local-development-and-demo-page"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>In the past I used <code>webpack</code>, then switched to <code>parcel</code> and now ended up using <code>esbuild</code>. It is a super fast JavaScript bundler and it has no dependencies.</p>
<p>It includes <a href="https://esbuild.github.io/api/#serve">serve</a> option which allows me to run a simple development server while working on the library. Just run <code>npm start</code> and you'll get <code>docs/index.html</code> page served on <a href="http://localhost:8000">localhost:8000</a>.</p>
<p>It doesn't include HMR nor live reload, but I don't mind it.</p>
<h4 id="github-pages">GitHub pages<a
  class="header-anchor"
  href="#github-pages" aria-label="Anchor link for: github-pages"
  title="Anchor link for: github-pages"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h4>
<p>Demo page was made with GitHub pages in mind. Once built, you should commit <code>docs/build</code> and push it to GitHub. Then in GitHub Pages settings select your branch and <code>/docs</code> folder.</p>
<p>Here are two examples:</p>
<ul>
<li><a href="https://muffinman.io/react-plx/">React Plx v2</a></li>
<li><a href="https://muffinman.io/react-animate-height/">React Animate Height v3</a>.</li>
</ul>
<p>Keen was actually extracted from the workflow I created for the new version of Animate Height.</p>
<h2 id="what-keen-doesn-t-include">What keen doesn't include<a
  class="header-anchor"
  href="#what-keen-doesn-t-include" aria-label="Anchor link for: what-keen-doesn-t-include"
  title="Anchor link for: what-keen-doesn-t-include"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>The main premise was to keep it as simple as possible, to make maintenance easier. So I left out some things on purpose. To name a few:</p>
<ul>
<li>Tests</li>
<li>CSS pre/post processors</li>
<li>HMR / Live reload - for the pure esbuild solution, check <a href="https://github.com/evanw/esbuild/issues/802#issuecomment-819578182">this comment</a></li>
<li>License</li>
</ul>
<p>I add these features when I need them on project basis.</p>
<p>Hopefully, you'll find keen useful and customize it to your own needs. If you do, please let me know!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Back to the basics</title>
		<published>2022-06-17T00:00:00+00:00</published>
		<updated>2022-06-17T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/back-to-the-basics/" type="text/html"/>
		<id>https://muffinman.io/blog/back-to-the-basics/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>I started this blog in 2016. More than six years now. But if you check my stats page, you'll see that <a href="https://muffinman.io/stats/#posts-per-year">the number of posts started declining</a> fairly quickly, since 2018.</p>
<p>I finally decided to stop this downward trend and to remember why I started writing in the first place.</p>
<h2 id="why-i-started-writing">Why I started writing<a
  class="header-anchor"
  href="#why-i-started-writing" aria-label="Anchor link for: why-i-started-writing"
  title="Anchor link for: why-i-started-writing"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>For the joy of small projects.</p>
<p>Basically I was just keeping a log of the things I've been working on. Also, when I encountered a problem, I would document it. Mainly to make sure I don't forget about it, and if someone finds it useful, even better.</p>
<p>I didn't worry about the number of visits, &quot;building a brand&quot; or anything along those lines. This is how this blog used to look like:</p>

  <img
    class="image image--md  image--shadow image--caption"
    src="&#x2F;img&#x2F;muffinman-2017.png"
    alt="Old screenshot of my blog"
  />
  <small class="image__caption">Screenshot of my blog from 2017.</small>

<h2 id="popularity-affected-my-joy-of-writing">&quot;Popularity&quot; affected my joy of writing<a
  class="header-anchor"
  href="#popularity-affected-my-joy-of-writing" aria-label="Anchor link for: popularity-affected-my-joy-of-writing"
  title="Anchor link for: popularity-affected-my-joy-of-writing"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>At some point I tried writing a little longer, more educative posts. <a href="/blog/setting-up-webpack-babel-and-react-from-scratch/">One of them</a> caught eye of the community and it exploded. It appeared on Hacker News, Reddit and multiple front-end oriented websites. Honestly, it felt great!</p>
<p>There was an insane spike in my analytics, and when it stabilized I had way more visits then before. Then people and companies started contacting me about putting up their ads and doing
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  sponsored posts
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>I always hated how even the term tries to disguise the real purpose - advertising.<span class="sidenote__bracket">)</span></span>
. I never intended to do this, so I turned all of these offers down.</p>
<p>Everyone around me started talking how great it is that I'm building my own &quot;brand&quot;. How I should create a newsletter and increase <em>conversion</em>. I was a little bit confused, but it still felt good.</p>
<h2 id="building-a-brand">&quot;Building a brand&quot;<a
  class="header-anchor"
  href="#building-a-brand" aria-label="Anchor link for: building-a-brand"
  title="Anchor link for: building-a-brand"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>With all this attention, I tried to maintain quality and write better, more <em>professional</em> posts. I felt like there were expectations and that there will be more people judging my writing.</p>
<p>I would write a post and feel like it wasn't good or <em>professional</em> enough and just scrape it. For that reason I never wrote about some projects that I'm super excited and proud about (for example <a href="https://muffinman.io/vertigo/">Vertigo</a> or <a href="https://github.com/stanko/retro-frame">Retro Frame</a>). Writing is <span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  hard enough as it is
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Especially in a foreign language<span class="sidenote__bracket">)</span></span>
, and this newly added pressure made it even harder.</p>
<p>It ended up feeling like a rat race and it literally took all of the joy out of writing and sharing my projects. Number of posts kept declining. In 2021 it fell down to a record low of only four posts.</p>
<p>I finally realized that I don't really care about this <em>brand</em> nonsense and that I need to do what makes me happy instead. If that content still gets me some traction, then that is the brand I'll be thrilled to keep building.</p>
<h2 id="what-s-next">What's next<a
  class="header-anchor"
  href="#what-s-next" aria-label="Anchor link for: what-s-next"
  title="Anchor link for: what-s-next"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>It is time to get back to the roots. I'll write about things I'm excited about and share my projects and passions. Writing short posts is fine as well. I'll do it when I feel like writing, instead of just trying to get any content out of the door. This blog was never about money nor brand, and I'll never put ads nor do <em>sponsored posts</em>.</p>
<p>Hopefully, with me writing about the things I love, the number of posts will organically start to grow again.</p>
<p>This blog was created for the joy of small projects, and I got sidetracked, but now I'm taking it back where it should be.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Goodbye IE</title>
		<published>2022-06-16T00:00:00+00:00</published>
		<updated>2022-06-16T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/goodbye-ie/" type="text/html"/>
		<id>https://muffinman.io/blog/goodbye-ie/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>End of an era.</p>
<p>I started my career when
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  IE6
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>First time I wrote about <a href="/blog/ie6-hacks-ten-years-after/">IE6</a> was back in 2009.<span class="sidenote__bracket">)</span></span>

was a thing.
And yesterday, <a href="https://techcommunity.microsoft.com/t5/windows-it-pro-blog/internet-explorer-11-desktop-app-retirement-faq/ba-p/2366549">Microsoft announced</a> they are retiring IE11. With that, no version of Internet Explorer is longer supported.</p>

  <img
    class="image image--sm   "
    src="&#x2F;img&#x2F;ie6.jpg"
    alt="IE6 logo"
  />
  

<p>Over the years it seemed that we are doomed to support IE forever. We even planned celebrating when we finally don't have to. But today, it feels funny, nobody is celebrating. Modern browsers came in, slowly but surely overthrown it, leaving us with a pretty evergreen landscape today.</p>
<p>So, IE, you weren't really a good browser, but it has been so long, so I bid you farewell!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>SVG non-scaling circle and rectangle</title>
		<published>2022-05-02T00:00:00+00:00</published>
		<updated>2022-05-02T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/svg-non-scaling-circle-and-rectangle/" type="text/html"/>
		<id>https://muffinman.io/blog/svg-non-scaling-circle-and-rectangle/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>While making <a href="/stats/#posts-per-year">a simple SVG chart</a>, I realized I would like to have non-scaling circles for data points. Unfortunately, SVG doesn't support it out of the box.</p>
<p>If you are eager to see the result, jump to <a href="https://muffinman.io/blog/svg-non-scaling-circle-and-rectangle/#examples">the examples below</a> or play with the code on <a href="https://codepen.io/stanko/pen/wvyvZaB?editors=1100">Codepen</a>.</p>
<h2 id="non-scaling-stroke-example">Non-scaling stroke example<a
  class="header-anchor"
  href="#non-scaling-stroke-example" aria-label="Anchor link for: non-scaling-stroke-example"
  title="Anchor link for: non-scaling-stroke-example"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>SVG does support non-scaling stroke width by setting <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/vector-effect">vector-effect</a> to <code>non-scaling-stroke</code>. When you set it, strokes will stay the same width no matter the scale of the SVG image.</p>
<p>Try <span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  resizing your window
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>On desktop, you should be able to resize each image on it's own by dragging the bottom right corner<span class="sidenote__bracket">)</span></span>
, and you'll see that the bottom line always stays 1px, while the upper one scales with the image:</p>
<div class="resize">
  <svg
    aria-label="Example of vector-effect='non-scaling-stroke'"
    viewBox="0 0 200 30"
  >
    <path d="M 0 5 200 5" fill="none" stroke="black" />
    <path d="M 0 25 200 25" fill="none" stroke="black" vector-effect="non-scaling-stroke" />
  </svg>
</div>
<h2 id="stroke-line-cap">Stroke line cap<a
  class="header-anchor"
  href="#stroke-line-cap" aria-label="Anchor link for: stroke-line-cap"
  title="Anchor link for: stroke-line-cap"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>SVG also allows you to change how your line's ends look like, by using <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Fills_and_Strokes#stroke">stroke-linecap</a> property. Available options are <code>butt</code>, <code>square</code> and <code>round</code>, and on the image below they are presented in that order.</p>
<p><svg
  aria-label="Example of different stroke-linecap values"
  style="background: white; padding: 30rem;"
  viewBox="0 0 200 100" class="image"
>
<path d="M 10 10 l 180 0" stroke="black" stroke-linecap="butt" stroke-width="20" />
<path d="M 10 10 l 180 0" stroke="#e6a03c" />
<path d="M 10 50 l 180 0" stroke="black" stroke-linecap="square" stroke-width="20" />
<path d="M 10 50 l 180 0" stroke="#e6a03c" />
<path d="M 10 90 l 180 0" stroke="black" stroke-linecap="round" stroke-width="20" />
<path d="M 10 90 l 180 0" stroke="#e6a03c" />
</svg></p>
<p>As you can see <code>square</code> and <code>round</code> line caps are sticking out of our line. You probably figured it out, but that is exactly what we are going to use to create non-scaling circles and rectangles.</p>
<h2 id="putting-it-all-together">Putting it all together<a
  class="header-anchor"
  href="#putting-it-all-together" aria-label="Anchor link for: putting-it-all-together"
  title="Anchor link for: putting-it-all-together"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Up to this point we know that we can have a non-scaling stroke and that we can change its caps to be round and square. If we use a line with no length, sticking parts will join and create a perfect circle (or rectangle). SVG doesn't support lines with length of zero pixels, so we'll set the length to something negligible.</p>
<p>The only thing left is to set a thick stroke width to create a shape.</p>
<h3 id="circle">Circle<a
  class="header-anchor"
  href="#circle" aria-label="Anchor link for: circle"
  title="Anchor link for: circle"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>The code below will create a black circle with a radius of 50 and center at <code>{ x: 50, y: 50 }</code>.</p>
<pre data-lang="html" style="background-color:#282c34;color:#dcdfe4;" class="language-html "><code class="language-html" data-lang="html"><span>&lt;</span><span style="color:#e06c75;">path
</span><span>  </span><span style="color:#e5c07b;">d</span><span>=</span><span style="color:#98c379;">&quot;M 50 50 l 0.0001 0&quot;
</span><span>  </span><span style="color:#e5c07b;">vector-effect</span><span>=</span><span style="color:#98c379;">&quot;non-scaling-stroke&quot;
</span><span>  </span><span style="color:#e5c07b;">stroke-width</span><span>=</span><span style="color:#98c379;">&quot;100&quot;
</span><span>  </span><span style="color:#e5c07b;">stroke-linecap</span><span>=</span><span style="color:#98c379;">&quot;round&quot;
</span><span>  </span><span style="color:#e5c07b;">stroke</span><span>=</span><span style="color:#98c379;">&quot;black&quot;
</span><span>/&gt;
</span></code></pre>
<p><svg
  aria-label="Black circle with a radius of 50"
  viewBox="0 0 100 100"
  width="200"
  style="background: white"
>
<path
  d="M 50 50 l 0.0001 0"
  vector-effect="non-scaling-stroke"
  stroke-width="100"
  stroke-linecap="round"
  stroke="black"
/>
</svg></p>
<p>Let me quickly break the code down:</p>
<ul>
<li><code>d=&quot;M 50 50 l 0.0001 0&quot;</code> - this creates a super short line. The first two coordinates (<code>M 50 50</code>) are the line's start and our circle's center. The rest of the code (<code>l 0.0001 0</code>) draws a horizontal
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  line 0.0001px long
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Please be aware that going with a lower value might break it in some browsers<span class="sidenote__bracket">)</span></span>
.</li>
<li><code>vector-effect=&quot;non-scaling-stroke&quot;</code> - enables non-scaling stroke.</li>
<li><code>stroke-width=&quot;100&quot;</code> - stroke width should be a diameter (<code>2 * radius</code>) of the circle.</li>
<li><code>stroke-linecap=&quot;round&quot;</code> - finally set line caps to <code>round</code> and by sticking out they will create a circle.</li>
</ul>
<h3 id="rectangle">Rectangle<a
  class="header-anchor"
  href="#rectangle" aria-label="Anchor link for: rectangle"
  title="Anchor link for: rectangle"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Code for the rectangle is almost the same, just set line caps to square.</p>
<pre data-lang="html" style="background-color:#282c34;color:#dcdfe4;" class="language-html "><code class="language-html" data-lang="html"><span>&lt;</span><span style="color:#e06c75;">path
</span><span>  </span><span style="color:#e5c07b;">d</span><span>=</span><span style="color:#98c379;">&quot;M 50 50 l 0.0001 0&quot;
</span><span>  </span><span style="color:#e5c07b;">vector-effect</span><span>=</span><span style="color:#98c379;">&quot;non-scaling-stroke&quot;
</span><span>  </span><span style="color:#e5c07b;">stroke-width</span><span>=</span><span style="color:#98c379;">&quot;100&quot;
</span><span>  </span><span style="color:#e5c07b;">stroke-linecap</span><span>=</span><span style="color:#98c379;">&quot;square&quot;
</span><span>  </span><span style="color:#e5c07b;">stroke</span><span>=</span><span style="color:#98c379;">&quot;black&quot;
</span><span>/&gt;
</span></code></pre>
<h2 id="examples">Examples<a
  class="header-anchor"
  href="#examples" aria-label="Anchor link for: examples"
  title="Anchor link for: examples"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>On the left are
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  standard scaling shapes
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span><code>&lt;circle /&gt;</code> and <code>&lt;rect /&gt;</code><span class="sidenote__bracket">)</span></span>

, while on the right are non-scaling shapes created using the method I described above. Try resizing your window and you'll see that the shapes on the right always stay the same size, no matter the image size.</p>
<div class="resize">
  <svg
    aria-label="Example of filled non-scaling circle next to the standard scaling one"
    viewBox="0 0 200 100"
  >
    <circle
      cx="50"
      cy="50"
      r="50"
      fill="#2980b9"
    />
    <path
      stroke="#2980b9"
      d="M 150 50 l 0.0001 0"
      stroke-linecap="round"
      stroke-width="100"
      vector-effect="non-scaling-stroke"
    />
  </svg>
</div>
<div class="resize">
  <svg
    aria-label="Example of filled non-scaling rectangle next to the standard scaling one"
    viewBox="0 0 200 100"
  >
    <rect
      x="10"
      y="0"
      width="100"
      height="100"
      fill="#16a085"
    />
    <path
      stroke="#16a085"
      d="M 150 50 l 0.0001 0"
      vector-effect="non-scaling-stroke"
      stroke-linecap="square"
      stroke-width="100"
    />
  </svg>
</div>
<h2 id="outlined-shapes">Outlined shapes<a
  class="header-anchor"
  href="#outlined-shapes" aria-label="Anchor link for: outlined-shapes"
  title="Anchor link for: outlined-shapes"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>We can even add an outline, but we'll need two elements. One acts as the outline, and the smaller one as a fill. Because the stroke width is the diameter, just make sure the smaller element's stroke is smaller for two times the outline width.</p>
<p>To give you an example, if we want a circle with radius of 50px and outline of 1px, stroke widths need to be 100px and 98px.</p>
<p>Which gives us the following code:</p>
<pre data-lang="html" style="background-color:#282c34;color:#dcdfe4;" class="language-html "><code class="language-html" data-lang="html"><span>&lt;</span><span style="color:#e06c75;">path
</span><span>  </span><span style="color:#e5c07b;">stroke</span><span>=</span><span style="color:#98c379;">&quot;black&quot;
</span><span>  </span><span style="color:#e5c07b;">d</span><span>=</span><span style="color:#98c379;">&quot;M 50 50 l 0.0001 0&quot;
</span><span>  </span><span style="color:#e5c07b;">vector-effect</span><span>=</span><span style="color:#98c379;">&quot;non-scaling-stroke&quot;
</span><span>  </span><span style="color:#e5c07b;">stroke-linecap</span><span>=</span><span style="color:#98c379;">&quot;round&quot;
</span><span>  </span><span style="color:#e5c07b;">stroke-width</span><span>=</span><span style="color:#98c379;">&quot;100&quot;
</span><span>/&gt;
</span><span>&lt;</span><span style="color:#e06c75;">path
</span><span>  </span><span style="color:#e5c07b;">stroke</span><span>=</span><span style="color:#98c379;">&quot;white&quot;
</span><span>  </span><span style="color:#e5c07b;">d</span><span>=</span><span style="color:#98c379;">&quot;M 50 50 l 0.0001 0&quot;
</span><span>  </span><span style="color:#e5c07b;">vector-effect</span><span>=</span><span style="color:#98c379;">&quot;non-scaling-stroke&quot;
</span><span>  </span><span style="color:#e5c07b;">stroke-linecap</span><span>=</span><span style="color:#98c379;">&quot;round&quot;
</span><span>  </span><span style="color:#e5c07b;">stroke-width</span><span>=</span><span style="color:#98c379;">&quot;98&quot;
</span><span>/&gt;
</span></code></pre>
<div class="resize">
  <svg
    aria-label="Example of outlined non-scaling circle next to the standard scaling one"
    viewBox="0 0 200 100"
  >
    <circle
      cx="50"
      cy="50"
      r="50"
      vector-effect="non-scaling-stroke"
      stroke="black"
      fill="none"
    />
    <path
      stroke="black"
      d="M 150 50 l 0.0001 0"
      vector-effect="non-scaling-stroke"
      stroke-linecap="round"
      stroke-width="100"
    />
    <path
      stroke="white"
      d="M 150 50 l 0.0001 0"
      vector-effect="non-scaling-stroke"
      stroke-linecap="round"
      stroke-width="98"
    />
  </svg>
</div>
<div class="resize">
  <svg
    viewBox="0 0 200 100"
    aria-label="Example of outlined non-scaling rectangle next to the standard scaling one"
  >
    <rect
      x="10"
      y="0"
      width="100"
      height="100"
      vector-effect="non-scaling-stroke"
      stroke="black"
      fill="none"
    />
    <path
      stroke="black"
      d="M 150 50 l 0.0001 0"
      vector-effect="non-scaling-stroke"
      stroke-linecap="square"
      stroke-width="100"
    />
    <path
      stroke="white"
      d="M 150 50 l 0.0001 0"
      vector-effect="non-scaling-stroke"
      stroke-linecap="square"
      stroke-width="98"
    />
  </svg>
</div>
<p>This method is practical for elements that should stay the same when image scales. I already mentioned data points on charts, but it is also useful for map markers.</p>
<p>It might even be possible to create more complex elements combining multiple paths, but I haven't really looked into it.</p>
<p>I hope you'll find it useful!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Into 2022</title>
		<published>2022-03-04T00:00:00+00:00</published>
		<updated>2022-03-04T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/into-2022/" type="text/html"/>
		<id>https://muffinman.io/blog/into-2022/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>I'm super late with this post, but again, better late than never. I just couldn't find the inspiration and drive for writing last year. Generally, I lacked motivation and wasn't really productive.</p>
<span id="continue-reading"></span><h2 id="generative-art">Generative Art<a
  class="header-anchor"
  href="#generative-art" aria-label="Anchor link for: generative-art"
  title="Anchor link for: generative-art"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>As for my art, 2021 wasn't as fruitful as the year before, but I did finish a couple of drawings. I'm still very much into it and lately I have found my drive again.</p>
<p>AxiDraw, the pen plotter, continues to be my favorite purchase ever. Here are a couple of my plotted drawings from the last year:</p>

  <img
    class="image image--md   "
    src="&#x2F;art&#x2F;pokeball&#x2F;1.jpg"
    alt="Space Armadillo (aka Pokeball)"
  />
  


  <img
    class="image image--md   "
    src="&#x2F;img&#x2F;into-2022&#x2F;untitled.jpg"
    alt="Untitled"
  />
  

<p>
  <img
    class="image    "
    src="&#x2F;art&#x2F;krypton&#x2F;0.jpg"
    alt="Krypton"
  />
  


I wrote a separate post about the creative process behind the last drawing - <a href="/blog/breaking-down-krypton/">Breaking down Krypton</a>.</p>
<h2 id="blog">Blog<a
  class="header-anchor"
  href="#blog" aria-label="Anchor link for: blog"
  title="Anchor link for: blog"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Oh boy, did I neglect this blog last year. I wrote only four posts. But I really couldn't find the inspiration and will to write. Naturally, the number of visits dropped, and it was a little above 90K. The fact that adblockers now block Goat Analytics also had an impact on numbers.</p>

  <img
    class="image image--md  image--shadow "
    src="&#x2F;img&#x2F;into-2022&#x2F;analytics.png"
    alt="Analytics breakdown for 2021"
  />
  

<p>Luckily, now I have way more drive to write and keep the site updated.</p>
<p>This February, the blog got a redesign that I planned for a long time. I wanted to add &quot;Art&quot; and &quot;Projects&quot; sections, but I kept redesigning it over and over again. Finally, when I decided to <span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  switch from Jekyll
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>I'll probably cover that in a another post.<span class="sidenote__bracket">)</span></span>
 to <a href="https://www.getzola.org/">Zola</a> I was able to focus and finish the redesign.</p>
<p>I did the design myself, using the thing or two I picked up from my designer colleagues. I released it as soon as I had something presentable. It was super bare bones and I'm still tweaking it and adding more personality, but nonetheless, I'm pretty satisfied with how it turned out.</p>
<p>Fun fact, you can try my layout <a href="#debug">debug mode</a>, I kept it in the production on purpose.</p>
<h2 id="work">Work<a
  class="header-anchor"
  href="#work" aria-label="Anchor link for: work"
  title="Anchor link for: work"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Last year was productive for <a href="https://work.co">my company</a> as a whole. I had the pleasure of working with two clients, TED and IBM Research. In both cases, teams consisted of wonderful people and I feel proud that I was able to help them build and improve their digital products.</p>
<h2 id="side-projects">Side projects<a
  class="header-anchor"
  href="#side-projects" aria-label="Anchor link for: side-projects"
  title="Anchor link for: side-projects"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I tremendously enjoy these small pet projects. <a href="/archive/#generative">Generative art</a> was a big part of this in 2021, but beside that I did a couple of other things. At our Belgrade office we did <a href="/blog/weekly-code-challenge-spring-2021/">a weekly code challenge</a> which was a lot of fun.</p>
<p>I got a 3d printer, Prusa Mini+, so I started playing with some 3d modeling (using code of course). Few days ago I found out about <a href="https://github.com/jscad/OpenJSCAD.org">JSCAD</a>, so I started making <a href="https://github.com/Stanko/jscad-models">some models</a> using it.</p>
<p>I also got my hands dirty with some soldering and electronics. Which takes me to:</p>
<h3 id="retro-frame">Retro frame<a
  class="header-anchor"
  href="#retro-frame" aria-label="Anchor link for: retro-frame"
  title="Anchor link for: retro-frame"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>This one is really close to my heart. I created a physical pixel art frame and I call it &quot;Retro frame&quot;. This is just a teaser, as I'm waiting for a new wooden frame and making small adjustments. But don't worry, I plan on doing a write up and open sourcing everything.</p>
<p><video class="video video--shadow" playsinline="true" loop="true" src="/img/into-2022/mario.mov#t=0.001" controls="true" muted="true"></video></p>
<p>Just looking at <span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  this video
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Check the original animation on the <a href="https://rephil.dribbble.com/">artist's website</a><span class="sidenote__bracket">)</span></span>
 makes me happy!</p>
<p>I have a similar project planned, including an e-ink screen, so stay tuned!</p>
<h3 id="npm-packages">npm packages<a
  class="header-anchor"
  href="#npm-packages" aria-label="Anchor link for: npm-packages"
  title="Anchor link for: npm-packages"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Number of downloads of my npm packages was up slightly, which is nice because I haven't done much work on that front. The total number went over 10 million!</p>

<a href="https:&#x2F;&#x2F;npm-stat.com&#x2F;charts.html?author=stanko&amp;from=2021-01-01&amp;to=2021-12-31" class="image__link">

  <img
    class="image image--sm   "
    src="&#x2F;img&#x2F;into-2022&#x2F;npm.png"
    alt="Npm packages stats for 2021"
  />
  

</a>

<h2 id="thank-you">Thank you!<a
  class="header-anchor"
  href="#thank-you" aria-label="Anchor link for: thank-you"
  title="Anchor link for: thank-you"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>To all people who actually read my ramblings, thank you! I sincerely hope that you occasionally  stumble on something you like on my website - a solution to a programming problem, inspiration or just find  something interesting.</p>
<p>To a better year, cheers!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Breaking down Krypton</title>
		<published>2022-03-01T00:00:00+00:00</published>
		<updated>2022-03-01T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/breaking-down-krypton/" type="text/html"/>
		<id>https://muffinman.io/blog/breaking-down-krypton/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>This post was originally written for our internal technology newsletter at <a href="https://work.co">Work &amp; Co</a>. It is a little bit adapted for web, but the content is almost identical.</p>
<hr />
<p>About a year ago I made this plot. It is called <span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  &quot;Krypton&quot;
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Named by a dear friend and ex-colleague<span class="sidenote__bracket">)</span></span>
, and I'll try to break down how it was made.</p>

  <img
    class="image image--md   "
    src="&#x2F;img&#x2F;krypton&#x2F;cover.jpg"
    alt="Krypton plot"
  />
  

<p>The wonderful thing about generative art is that code is just a tool. Thing that really matters is the actual artwork. In this specific case, code is straightforward and relatively simple. But it produces drawings that, in my opinion, look visually pleasing and have a nice sense of depth to them.</p>
<h2 id="tooling">Tooling<a
  class="header-anchor"
  href="#tooling" aria-label="Anchor link for: tooling"
  title="Anchor link for: tooling"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>For all of my generative work, I use plain JavaScript, <a href="https://p5js.org/">p5.js</a> and a couple of custom-made tools. These tools are often crude, but they do exactly what I want so I don't mind. With each new project I keep adding more features and polishing them. At some point these tools may reach the point where they are presentable. If that happens I'll gladly share them with the world and open source everything.</p>
<p>This is how the interface looks. I have an easy way to add controls for image parameters. These controls allow me to tweak drawings with a short feedback loop. Each time a parameter is changed, the image is redrawn and the parameter is reflected in the URL. This allows me to go through iterations using the browser history.</p>

  <img
    class="image image--md   "
    src="&#x2F;img&#x2F;krypton&#x2F;tooling.png"
    alt="My tooling"
  />
  

<p>To make navigation through the history easier, for each unique combination of parameters, I generate a random color and ASCII face. That is why my browser history looks like this :)</p>

  <img
    class="image image--xs  image--shadow "
    src="&#x2F;img&#x2F;krypton&#x2F;history.png"
    alt="History dropdown with ASCII faces"
  />
  

<h2 id="voronoi-diagram">Voronoi diagram<a
  class="header-anchor"
  href="#voronoi-diagram" aria-label="Anchor link for: voronoi-diagram"
  title="Anchor link for: voronoi-diagram"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I use Voronoi diagrams a lot in my drawings. So much, that I'm sometimes trying to avoid them, to make sure I'm not limiting myself to a single algorithm.</p>
<p>Voronoi diagram takes a collection of points, and then partitions a plane into polygons, where each polygon's edge is right in the middle of two points. It sounds like a lot, but if you study this image, it should become clearer. For a more detailed explanation you can check out <a href="https://en.wikipedia.org/wiki/Voronoi_diagram">the article on Wikipedia</a>.</p>

  <img
    class="image image--sm   "
    src="&#x2F;img&#x2F;krypton&#x2F;voronoi.png"
    alt="Voronoi diagram"
  />
  

<h2 id="generating-points">Generating points<a
  class="header-anchor"
  href="#generating-points" aria-label="Anchor link for: generating-points"
  title="Anchor link for: generating-points"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>To get Voronoi polygons, we'll need some points. We'll iterate from the center, and in each iteration, we'll take a random point on a circle and displace it a little bit, so it doesn't look artificial. Then, increase the radius and repeat the whole process. The larger the radius, the more points we are going to generate.</p>
<p>The result looks nice, but it took me a number of tries to get it just right.</p>

  <img
    class="image image--md   "
    src="&#x2F;img&#x2F;krypton&#x2F;10.png"
    alt="Points"
  />
  

<p>Now when we have our points, Voronoi can do it's thing. This is what we end up with.</p>

  <img
    class="image image--md   "
    src="&#x2F;img&#x2F;krypton&#x2F;20.png"
    alt="Voronoi diagram with points visible"
  />
  

<p><strong>Different points distribution</strong></p>
<p>Like I mentioned, the point distribution is something I tweaked to get the result I like. For example, if we change the easing function for radius increasing (&quot;ease in&quot; instead of &quot;ease out&quot;), we'll get a completely different result. If you ask me, it doesn't look nearly as good.</p>
<p>Let me give you a tip, if you start doing generative art, don't be afraid to experiment. If a parameter looks nice in a range between 10 and 20, try -50 or 300 or swap <code>x</code> and <code>y</code> coordinates. Do it for fun, as a lot of times it will not look good, but sometimes it will and it will just blow your mind.</p>
<div
  class="dual-image  "
>
  <img class="dual-image__img" src="&#x2F;img&#x2F;krypton&#x2F;b-10.png" alt="Points with different distribution" />
  <img class="dual-image__img" src="&#x2F;img&#x2F;krypton&#x2F;b-20.png" alt="And corresponding Voronoi diagram" />
</div>
<h2 id="cleaning-up-voronoi">Cleaning up Voronoi<a
  class="header-anchor"
  href="#cleaning-up-voronoi" aria-label="Anchor link for: cleaning-up-voronoi"
  title="Anchor link for: cleaning-up-voronoi"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Let's get rid of points, as they already did their work. We can loose these weird looking edge polygons as well. When I got to this point I thought to myself: <em>&quot;OK, this is taking shape. I can work with this.&quot;</em></p>
<div
  class="dual-image  "
>
  <img class="dual-image__img" src="&#x2F;img&#x2F;krypton&#x2F;30.png" alt="Diagram without points" />
  <img class="dual-image__img" src="&#x2F;img&#x2F;krypton&#x2F;40.png" alt="Diagram with edge polygons removed" />
</div>
<p>Back then, I experimented a little bit with colors.</p>

  <img
    class="image image--md   "
    src="&#x2F;img&#x2F;krypton&#x2F;color.jpg"
    alt="Color exploration"
  />
  

<p>But as I wanted to pen plot the drawing, I abandoned the whole full color idea.</p>
<h2 id="making-it-interesting">Making it interesting<a
  class="header-anchor"
  href="#making-it-interesting" aria-label="Anchor link for: making-it-interesting"
  title="Anchor link for: making-it-interesting"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>We made a solid base, but let's try to make it more interesting. How about we space the tiles apart a little? Randomly remove pieces? Make the whole thing explode? Or maybe pieces could start falling apart? Tiles could have rounded corners? The general idea is to mimic phenomena from the physical world by using a little bit of carefully introduced randomness.</p>
<p>I tried all of the things mentioned above, and for the final plot I scaled the tiles and made pieces break off the main structure. Only pieces in the lower half are offset. The further away they are from the center, the more offset they are going to be. A little bit of randomness is sprinkled on top to break the mathematical orderliness.</p>
<div
  class="dual-image  "
>
  <img class="dual-image__img" src="&#x2F;img&#x2F;krypton&#x2F;50.png" alt="Add polygon offset" />
  <img class="dual-image__img" src="&#x2F;img&#x2F;krypton&#x2F;60.png" alt="Make pieces fall off" />
</div>
<p>Then I added another layer to give it more depth, and finally inverted the whole image, as I was planning to plot it on a black paper.</p>
<div
  class="dual-image  "
>
  <img class="dual-image__img" src="&#x2F;img&#x2F;krypton&#x2F;80.png" alt="Add another layer" />
  <img class="dual-image__img" src="&#x2F;img&#x2F;krypton&#x2F;90.png" alt="Invert colors" />
</div>
<h2 id="plot">Plot<a
  class="header-anchor"
  href="#plot" aria-label="Anchor link for: plot"
  title="Anchor link for: plot"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I plotted the drawing on Fabriano's Black Black paper, using Sakura gel markers. Between the layers, I had to swap the markers and run it again. For this particular drawing, it wasn't that important if the layers are not perfectly aligned. But in some cases it can be really tricky to swap pens precisely.</p>
<p>Fun fact, the drawing was reserved and sold even before it was plotted. It went to US, to now an ex-Work&amp;Co colleague.</p>
<div
  class="dual-image dual-image--shadow "
>
  <img class="dual-image__img" src="&#x2F;art&#x2F;krypton&#x2F;0.jpg" alt="Pen plot, white on black paper" />
  <img class="dual-image__img" src="&#x2F;art&#x2F;krypton&#x2F;2.jpg" alt="Detail of the plotted piece" />
</div>
<h2 id="conclusion">Conclusion<a
  class="header-anchor"
  href="#conclusion" aria-label="Anchor link for: conclusion"
  title="Anchor link for: conclusion"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Basically, it takes only a few steps to generate Krypton. I hope this will inspire you to try fooling around with creative coding.</p>
<p><video src="/img/krypton/output.mp4#t=0.001" playsinline="true" controls="true" muted="true" class="video video--shadow"></video></p>
<p>To encourage you, here are a few rejected examples of generated images. These are not nearly as nice. Randomness is a super powerful tool, but you need to play around with the values and finely tune them to get good results.</p>
<div
  class="dual-image dual-image--shadow "
>
  <img class="dual-image__img" src="&#x2F;img&#x2F;krypton&#x2F;r1.png" alt="Rejected render" />
  <img class="dual-image__img" src="&#x2F;img&#x2F;krypton&#x2F;r2.png" alt="Another rejected render" />
</div>
<p>You can find this and my other plots on <a href="https://instagram.com/p/CM6sTJKH8Eu">my Instagram profile</a>. At some point I'll stop being lazy, and make an artwork section here on my website.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Libraries I use for generative art</title>
		<published>2022-02-28T00:00:00+00:00</published>
		<updated>2022-02-28T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/js-libraries-for-generative-art/" type="text/html"/>
		<id>https://muffinman.io/blog/js-libraries-for-generative-art/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>This is going to be a very straight forward post. Just a list of JavaScript libraries I use in creating my generative art. And I really mean I use (and abuse) them. All of them are used in multiple of my drawings. I'll include couple of photos under the respective libraries.</p>
<p>I finally settled with these libraries after trying several other alternatives for each. Performance was one of the key factors (especially as generative work can get brute-forcy sometimes).</p>
<p>Huge <strong>thank you</strong> to <span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  all people who created and shared these wonderful tools!
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Also, as a rule of thumb, when you find a good library, you might want to check author's GitHub profile. In the most cases you are going to find more useful stuff there. That is exactly how I found some of these.<span class="sidenote__bracket">)</span></span>
</p>
<p>Categories:</p>
<ul>
<li><a href="https://muffinman.io/blog/js-libraries-for-generative-art/#randomness-and-noise">Randomness and noise</a></li>
<li><a href="https://muffinman.io/blog/js-libraries-for-generative-art/#geometry">Geometry</a></li>
<li><a href="https://muffinman.io/blog/js-libraries-for-generative-art/#vector-fields">Vector fields</a></li>
<li><a href="https://muffinman.io/blog/js-libraries-for-generative-art/#3d-vector-line-engines">3D vector line engines</a></li>
<li><a href="https://muffinman.io/blog/js-libraries-for-generative-art/#spatial-data-structures">Spatial data structures</a></li>
<li><a href="https://muffinman.io/blog/js-libraries-for-generative-art/#axidraw">Axidraw</a></li>
<li><a href="https://muffinman.io/blog/js-libraries-for-generative-art/#other">Other</a></li>
</ul>
<span id="continue-reading"></span><h3 id="randomness-and-noise">Randomness and noise<a
  class="header-anchor"
  href="#randomness-and-noise" aria-label="Anchor link for: randomness-and-noise"
  title="Anchor link for: randomness-and-noise"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<h5 id="seedrandom"><a href="https://github.com/davidbau/seedrandom">seedrandom</a><a
  class="header-anchor"
  href="#seedrandom" aria-label="Anchor link for: seedrandom"
  title="Anchor link for: seedrandom"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h5>
<p>In generative programming it is super important to be able to repeat the same output. As randomness is heavily involved, we need a way to repeat random values. That's where seedrandom steps in as an excellent seeded random number generator.</p>
<h5 id="random-words"><a href="https://github.com/apostrophecms/random-words">random-words</a><a
  class="header-anchor"
  href="#random-words" aria-label="Anchor link for: random-words"
  title="Anchor link for: random-words"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h5>
<p>For random number generator seeds, I like to use real words instead of randomly generated strings. This library is a simple dictionary of couple of thousands english words.</p>
<h5 id="simplex-noise"><a href="https://github.com/jwagner/simplex-noise.js">simplex-noise</a><a
  class="header-anchor"
  href="#simplex-noise" aria-label="Anchor link for: simplex-noise"
  title="Anchor link for: simplex-noise"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h5>
<p>Fast implementation of Open Simplex noise.</p>
<h5 id="poisson-disk-sampling"><a href="https://github.com/kchapelier/poisson-disk-sampling">poisson-disk-sampling</a><a
  class="header-anchor"
  href="#poisson-disk-sampling" aria-label="Anchor link for: poisson-disk-sampling"
  title="Anchor link for: poisson-disk-sampling"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h5>
<p>When you need a random collections of points in space, Poisson sampling is a great tool. It gives us much more natural distribution than just using random values.</p>
<h3 id="geometry">Geometry<a
  class="header-anchor"
  href="#geometry" aria-label="Anchor link for: geometry"
  title="Anchor link for: geometry"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<h5 id="js-angusj-clipper"><a href="https://github.com/xaviergonz/js-angusj-clipper">js-angusj-clipper</a><a
  class="header-anchor"
  href="#js-angusj-clipper" aria-label="Anchor link for: js-angusj-clipper"
  title="Anchor link for: js-angusj-clipper"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h5>
<p>This library is a lifesaver. For all your polygon clipping and offseting needs. And it is super fast as it is implemented in WebAssembly.</p>
<h5 id="voronoi"><a href="https://github.com/gorhill/Javascript-Voronoi">voronoi</a><a
  class="header-anchor"
  href="#voronoi" aria-label="Anchor link for: voronoi"
  title="Anchor link for: voronoi"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h5>
<p>Sometimes I think I use Voronoi diagrams too much in my work. Anyway, this library efficiently computes Voronoi diagrams.</p>

  <img
    class="image image--xs   "
    src="&#x2F;img&#x2F;js-libs&#x2F;krypton.jpg"
    alt="Krypton"
  />
  

<h5 id="robust-point-in-polygon"><a href="https://github.com/mikolalysenko/robust-point-in-polygon">robust-point-in-polygon</a><a
  class="header-anchor"
  href="#robust-point-in-polygon" aria-label="Anchor link for: robust-point-in-polygon"
  title="Anchor link for: robust-point-in-polygon"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h5>
<p>For figuring out if the point is inside of the polygon. I tried a couple of other libraries and all of them would return wrong results in certain edge cases. So far, <code>robust-point-in-polygon</code> didn't let me down.</p>
<h5 id="simplify-js"><a href="https://github.com/mourner/simplify-js">simplify-js</a><a
  class="header-anchor"
  href="#simplify-js" aria-label="Anchor link for: simplify-js"
  title="Anchor link for: simplify-js"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h5>
<p>Simplifies polyline. Very useful for pen plotting. Sometimes my programs would generate lines with way too many points. This library will reduce the number significantly and human eye often can't see the difference.</p>
<h5 id="isect"><a href="https://github.com/anvaka/isect">isect</a><a
  class="header-anchor"
  href="#isect" aria-label="Anchor link for: isect"
  title="Anchor link for: isect"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h5>
<p>Finds all intersections of a given set of line segments.</p>
<h3 id="vector-fields">Vector fields<a
  class="header-anchor"
  href="#vector-fields" aria-label="Anchor link for: vector-fields"
  title="Anchor link for: vector-fields"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<h5 id="streamlines"><a href="https://github.com/anvaka/streamlines">streamlines</a><a
  class="header-anchor"
  href="#streamlines" aria-label="Anchor link for: streamlines"
  title="Anchor link for: streamlines"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h5>
<p>Calculates stream lines for a given vector field.</p>

  <img
    class="image image--sm   "
    src="&#x2F;img&#x2F;js-libs&#x2F;black-holes.jpg"
    alt="Black Holes"
  />
  

<p>When I was making <a href="/blog/neon-generative-art-piece-made-using-2d-vector-field/">Neon</a> I stumbled on <a href="https://web.cs.ucdavis.edu/~ma/SIGGRAPH02/course23/notes/papers/Jobard.pdf">this paper</a>. Before even trying to implement it myself, I searched for a good soul who already did it. Luckily I found Andrei's repo.</p>
<h3 id="3d-vector-line-engines">3D vector line engines<a
  class="header-anchor"
  href="#3d-vector-line-engines" aria-label="Anchor link for: 3d-vector-line-engines"
  title="Anchor link for: 3d-vector-line-engines"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<h5 id="linea"><a href="https://github.com/Stanko/linea">linea</a><a
  class="header-anchor"
  href="#linea" aria-label="Anchor link for: linea"
  title="Anchor link for: linea"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h5>
<p>This is my port of <a href="https://github.com/fogleman/ln">Michael Fogleman's ln</a> from Go to TypeScript. It was never fully finished, so you might want to check another port - <a href="https://github.com/aweary/ln.js">ln.js</a>. It is complete and has better documentation than my port. Personally, I still use mine as it is easier for me to hack around.</p>

  <img
    class="image image--sm  image--shadow "
    src="&#x2F;img&#x2F;js-libs&#x2F;belgrade.jpg"
    alt="Belgrade"
  />
  

<h3 id="spatial-data-structures">Spatial data structures<a
  class="header-anchor"
  href="#spatial-data-structures" aria-label="Anchor link for: spatial-data-structures"
  title="Anchor link for: spatial-data-structures"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>When working with spatial data, something that is a trivial problem to a human to see, can be super hard to code. These two libraries make things like searching for nearby elements in space so much easier.</p>
<h5 id="kd-tree-javascript"><a href="https://github.com/ubilabs/kd-tree-javascript">kd-tree-javascript</a><a
  class="header-anchor"
  href="#kd-tree-javascript" aria-label="Anchor link for: kd-tree-javascript"
  title="Anchor link for: kd-tree-javascript"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h5>
<p><a href="https://en.wikipedia.org/wiki/K-d_tree">K-dimensional tree</a> implementation. It is space-partitioning data structure for organizing points in a k-dimensional space.</p>
<h5 id="rbush"><a href="https://github.com/mourner/rbush">rbush</a><a
  class="header-anchor"
  href="#rbush" aria-label="Anchor link for: rbush"
  title="Anchor link for: rbush"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h5>
<p>2D spatial indexing which uses <a href="https://en.wikipedia.org/wiki/R-tree">R-tree</a>.</p>
<h3 id="axidraw">AxiDraw<a
  class="header-anchor"
  href="#axidraw" aria-label="Anchor link for: axidraw"
  title="Anchor link for: axidraw"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<h5 id="saxi"><a href="https://github.com/nornagon/saxi">saxi</a><a
  class="header-anchor"
  href="#saxi" aria-label="Anchor link for: saxi"
  title="Anchor link for: saxi"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h5>
<p>All of my work is plotted using <a href="https://www.axidraw.com/">AxiDraw</a>. Saxi is a great little program that lets you control AxiDraw. It comes with a great set of default values for options. Depending on the scenario, it can make plotting a much more pleasant experience than official Inkscape plugin.</p>
<h3 id="other">Other<a
  class="header-anchor"
  href="#other" aria-label="Anchor link for: other"
  title="Anchor link for: other"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<h5 id="mem"><a href="https://github.com/sindresorhus/mem">mem</a><a
  class="header-anchor"
  href="#mem" aria-label="Anchor link for: mem"
  title="Anchor link for: mem"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h5>
<p>Memoization of functions. It means that consecutive function calls with identical input are cached instead of calculated again.</p>
<h5 id="cool-ascii-faces"><a href="https://github.com/maxogden/cool-ascii-faces">cool-ascii-faces</a><a
  class="header-anchor"
  href="#cool-ascii-faces" aria-label="Anchor link for: cool-ascii-faces"
  title="Anchor link for: cool-ascii-faces"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h5>
<p><span aria-hidden="true">ʕ•ᴥ•ʔ</span> cause why not? Just kidding. To make navigation through the history easier, for each unique combination of parameters I generate a random color and ASCII face. Then my browser history looks like this:</p>

  <img
    class="image image--xs  image--shadow "
    src="&#x2F;img&#x2F;js-libs&#x2F;cool-faces.png"
    alt="Funky browser history"
  />
  


    </content>

	</entry>
	<entry xml:lang="en">
		<title>Untitled</title>
		<published>2022-02-24T00:00:00+00:00</published>
		<updated>2022-02-24T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/branches-01-untitled/" type="text/html"/>
		<id>https://muffinman.io/art/branches-01-untitled/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>I&#x27;m still working on this algorithm, but I had to plot a small one.</p>
    </content>

	</entry>
	<entry xml:lang="en">
		<title>Bunny</title>
		<published>2022-02-20T00:00:00+00:00</published>
		<updated>2022-02-20T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/bunny/" type="text/html"/>
		<id>https://muffinman.io/art/bunny/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>I plotted it four times before I was satisfied.</p><p>I still think it is not perfect, but I stopped here. I may revisit the algorithm and generate a different drawing in the future.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Weekly Code Challenge (spring 2021)</title>
		<published>2021-09-30T00:00:00+00:00</published>
		<updated>2021-09-30T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/weekly-code-challenge-spring-2021/" type="text/html"/>
		<id>https://muffinman.io/blog/weekly-code-challenge-spring-2021/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>If you just want the see the submissions, jump to the <a href="https://muffinman.io/code-challenge/">Weekly Code Challege</a> website. But please bare in mind that the most of these were created in a couple of hours.</p>
<span id="continue-reading"></span>
<hr />
<p>This post is long overdue. Earlier this year, I came with an idea to organize a weekly code challenge in our <a href="https://work.co/careers/offices/belgrade/">Belgrade office</a>. With the whole  COVID situation going on, I hoped it could inspire people to start hacking and make programming fun again.</p>

<a href="https:&#x2F;&#x2F;muffinman.io&#x2F;code-challenge&#x2F;" class="image__link">

  <img
    class="image image--lg   "
    src="&#x2F;img&#x2F;code-challenge-spring-2021&#x2F;waves.png"
    alt="CSS only 3D people making waves"
  />
  

</a>

<p>Some people were interested, so we ran the challenge in spring this year, from April to June. It lasted for ten weeks, each week had a different theme and there was a total of <a href="https://muffinman.io/code-challenge/">47 submissions</a>. We didn't impose a lot of rules, it just had to run in a browser, but you could use any library or framework and spend as much (or as little) time as you wanted.</p>
<p>Challenge started hot, but as weeks passed by, interest slowly faded away. After ten weeks we decided to end it. To be honest, it lasted longer than I initially hoped. A lot of people tried new stuff, played around and had fun hacking little things. I dare to say it was a complete success and I have to say thanks to all the people who participated!</p>
<p>Therefore, I urge you to organize something similar yourself, in your office, university or city, it doesn't matter as long as people are hacking for the sake of it. It is a wonderful and fulfilling process.</p>
<h2 id="shameless-self-promotion">Shameless self promotion<a
  class="header-anchor"
  href="#shameless-self-promotion" aria-label="Anchor link for: shameless-self-promotion"
  title="Anchor link for: shameless-self-promotion"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I was happy that people were interested to participate, and I enjoyed it myself tremendously. In the process, I learned a thing of two and hacked together a few things I would probably never try if there wasn't for the code challenge.</p>
<p>Out of the nine things I created (I skipped the last week), these three are my favorite:</p>
<ul>
<li><a href="https://muffinman.io/weekly-code-challenge/week-three/index.html">ASCII rendered Flappy Bird clone</a></li>
<li><a href="https://muffinman.io/weekly-code-challenge/week-five/index.html">Sloppy clone of The Unfinished Swan</a></li>
<li><a href="https://muffinman.io/weekly-code-challenge/week-seven/index.html">CSS only 3D people making waves</a></li>
</ul>
<p>All three are completely different and they vary from a vanilla JavaScript ASCII rendered game, followed by a simple ThreeJS demo to <span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  the complex 3D shapes CSS objects.
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>To be fair, these are only complex in the context of using CSS to render them.<span class="sidenote__bracket">)</span></span>
</p>
<p>You can check my submissions <a href="https://muffinman.io/weekly-code-challenge/">here</a>, and code is available on <a href="https://github.com/Stanko/weekly-code-challenge">GitHub</a>.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>HyperX Cloud II sound card USB connector replacement</title>
		<published>2021-09-29T00:00:00+00:00</published>
		<updated>2021-09-29T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/hyperx-cloud-ii-sound-card-usb-connector-replacement/" type="text/html"/>
		<id>https://muffinman.io/blog/hyperx-cloud-ii-sound-card-usb-connector-replacement/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>If you are only interested in the wiring diagram, jump directly to the <a href="https://muffinman.io/blog/hyperx-cloud-ii-sound-card-usb-connector-replacement/#wiring">wiring</a> section.</p>
<hr />
<p>HyperX's Cloud II headphones come with a USB sound card, which looks like this:</p>
<p><img src="/img/hyperx-cloud2/usb-sound-card.jpg" alt="USB sound card that comes with Cloud II headphones" /></p>
<p>It is a convenient little dongle. I had it plugged in into the front USB port, and I bumped into it, bending the connector for ninety degrees. Naturally, it stopped working. Good thing about these headphones is that the sound card isn't mandatory for headphones to work, but the regular audio cable is pretty short.</p>
<p>After searching for the replacement, I realized I can't buy it where I live, and that it costs around 35-40$ which is more than the half of the price for a whole new pair. That is why I decided to try to repair it on my own.</p>
<p>The reason I'm writing this blog post is that I couldn't find <strong>any</strong> information on how to repair it, so hopefully it will help you fix the same problem.</p>
<span id="continue-reading"></span><h2 id="wiring">Wiring<a
  class="header-anchor"
  href="#wiring" aria-label="Anchor link for: wiring"
  title="Anchor link for: wiring"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>The process is actually super simple. You'll need some soldering experience and a USB connector. Cut off the original connector and strip the wires.</p>
<p>Solder wires to a connector in a following order:</p>
<ul>
<li><span style="color: black">Black</span></li>
<li><span style="color: green">Green</span></li>
<li><span style="color: darkgoldenrod">Copper</span></li>
<li><span style="color: red">Red</span></li>
</ul>
<p>Some diagrams will show you different order with middle (data) wires switched, but that won't work. I tried soldering it like that initially, but nor Windows nor Mac would recognize the headphones. The HyperX logo would light up, but Windows gave me a <em>&quot;Unknown USB Device (Device Descriptor Request Failed)&quot;</em> message. That's how I figured out that power wires are connected properly, but the data ones are not.</p>
<p><img src="/img/hyperx-cloud2/wires.jpg" alt="USB connector with wires soldered in the correct order" /></p>
<p>Sorry for the blurry photo, but I didn't want to disassemble everything to get a better one.</p>
<hr />
<p>I hope this will help you fix your headphones and motivate you to try to fix more things in the future, before just ordering a replacement.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Catching the blur event on an element and its children</title>
		<published>2021-09-19T00:00:00+00:00</published>
		<updated>2021-09-19T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/catching-the-blur-event-on-an-element-and-its-children/" type="text/html"/>
		<id>https://muffinman.io/blog/catching-the-blur-event-on-an-element-and-its-children/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Recently I implemented a fly out menu in React, and stumbled on the following problem - I had to catch a blur event on the menu, but it had multiple focusable children. When user is tabbing between these menu items, blur event is triggered every time on the parent, followed by the focus event on the next item. As I wanted to close the menu on blur, this would close it before user was able to get to the next menu item.</p>
<span id="continue-reading"></span>
<p>Solution is fairly simple and it is not React exclusive - it can be used with any other framework or vanilla JavaScript. The flow goes something like this:</p>
<ul>
<li>Listen to a blur event on the parent element (in my case it was the menu). This will catch blur event on all of its children too.</li>
<li>In the handler, give browser time to focus the next element (by using <code>requestAnimationFrame</code>).</li>
<li>Check if the newly focused element is in our parent element.</li>
<li>If it is, do nothing, as focus hasn’t exited the parent yet.</li>
<li>If it is not, we left the parent element completely and it is safe to do our blur logic (in my case, it was closing the menu).</li>
</ul>
<p>Code looks like this:</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#c678dd;">const </span><span style="color:#61afef;">handleBlur </span><span style="color:#c678dd;">= </span><span>(</span><span style="color:#e06c75;">e</span><span>) </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">currentTarget </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">e</span><span>.</span><span style="color:#e06c75;">currentTarget</span><span>;
</span><span>
</span><span>  </span><span style="color:#5c6370;">// Give browser time to focus the next element
</span><span>  </span><span style="color:#61afef;">requestAnimationFrame</span><span>(() </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>    </span><span style="color:#5c6370;">// Check if the new focused element is a child of the original container
</span><span>    </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#c678dd;">!</span><span style="color:#e06c75;">currentTarget</span><span>.</span><span style="color:#61afef;">contains</span><span>(document.</span><span style="color:#e06c75;">activeElement</span><span>)) {
</span><span>      </span><span style="color:#5c6370;">// Do blur logic here!
</span><span>    }
</span><span>  });
</span><span>};
</span></code></pre>
<h2 id="react-component">React component<a
  class="header-anchor"
  href="#react-component" aria-label="Anchor link for: react-component"
  title="Anchor link for: react-component"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I pulled out the logic and created a small React component:</p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#c678dd;">const </span><span style="color:#61afef;">ChildrenBlur </span><span style="color:#c678dd;">= </span><span>({ </span><span style="color:#e06c75;">children</span><span>, </span><span style="color:#e06c75;">onBlur</span><span>, </span><span style="color:#c678dd;">...</span><span style="color:#e06c75;">props </span><span>}) </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">handleBlur </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">useCallback</span><span>(
</span><span>    (</span><span style="color:#e06c75;">e</span><span>) </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>      </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">currentTarget </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">e</span><span>.</span><span style="color:#e06c75;">currentTarget</span><span>;
</span><span>
</span><span>      </span><span style="color:#5c6370;">// Give browser time to focus the next element
</span><span>      </span><span style="color:#61afef;">requestAnimationFrame</span><span>(() </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>        </span><span style="color:#5c6370;">// Check if the new focused element is a child of the original container
</span><span>        </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#c678dd;">!</span><span style="color:#e06c75;">currentTarget</span><span>.</span><span style="color:#61afef;">contains</span><span>(document.</span><span style="color:#e06c75;">activeElement</span><span>)) {
</span><span>          </span><span style="color:#61afef;">onBlur</span><span>();
</span><span>        }
</span><span>      });
</span><span>    },
</span><span>    [</span><span style="color:#e06c75;">onBlur</span><span>]
</span><span>  );
</span><span>
</span><span>  </span><span style="color:#c678dd;">return </span><span>(
</span><span>    &lt;</span><span style="color:#e06c75;">div </span><span>{</span><span style="color:#c678dd;">...</span><span style="color:#e06c75;">props</span><span>} </span><span style="color:#e5c07b;">onBlur</span><span style="color:#c678dd;">=</span><span>{</span><span style="color:#e06c75;">handleBlur</span><span>}&gt;
</span><span>      {</span><span style="color:#e06c75;">children</span><span>}
</span><span>    &lt;/</span><span style="color:#e06c75;">div</span><span>&gt;
</span><span>  );
</span><span>};
</span></code></pre>
<p>and usage is pretty straight forward:</p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span>&lt;</span><span style="color:#e5c07b;">ChildrenBlur
</span><span>  </span><span style="color:#e5c07b;">onBlur</span><span style="color:#c678dd;">=</span><span>{() </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>    </span><span style="color:#61afef;">doSomethingCoolOnBlur</span><span>()
</span><span>  }}
</span><span>&gt;
</span><span>  &lt;</span><span style="color:#e06c75;">button</span><span>&gt;Button 1&lt;/</span><span style="color:#e06c75;">button</span><span>&gt;
</span><span>  &lt;</span><span style="color:#e06c75;">button</span><span>&gt;Button 2&lt;/</span><span style="color:#e06c75;">button</span><span>&gt;
</span><span>  &lt;</span><span style="color:#e06c75;">button</span><span>&gt;Button 3&lt;/</span><span style="color:#e06c75;">button</span><span>&gt;
</span><span>&lt;/</span><span style="color:#e5c07b;">ChildrenBlur</span><span>&gt;
</span></code></pre>
<h2 id="demo">Demo<a
  class="header-anchor"
  href="#demo" aria-label="Anchor link for: demo"
  title="Anchor link for: demo"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>To see it live check the demo on Codepen:</p>
<iframe
  height="380"
  
  scrolling="no"
  title="React, blur on an element and its children"
  src="https://codepen.io/stanko/embed/NWgvOXp?default-tab=result"
  frameborder="no"
  loading="lazy"
  allowtransparency="true"
  allowfullscreen="true"
>
  See the Pen <a href="https://codepen.io/stanko/pen/NWgvOXp">
  React, blur on an element and its children</a> by Stanko (<a href="https://codepen.io/stanko">@stanko</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
<hr />
<p>I really like this technique, and I found it useful in multiple places like tooltips and dropdowns, where it can replace “outside click” listeners.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Stranded</title>
		<published>2021-08-23T00:00:00+00:00</published>
		<updated>2021-08-23T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/stranded-green-purple/" type="text/html"/>
		<id>https://muffinman.io/art/stranded-green-purple/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Plotted one for my best man.</p>
    </content>

	</entry>
	<entry xml:lang="en">
		<title>Untitled</title>
		<published>2021-07-27T00:00:00+00:00</published>
		<updated>2021-07-27T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/boxes-untitled/" type="text/html"/>
		<id>https://muffinman.io/art/boxes-untitled/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Shading was done by generating (a lot of) dots. Then I used <a href="https://github.com/nornagon/saxi">saxi's</a> option to connect nearby dots in order to create these squiggly lines.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Space Invader</title>
		<published>2021-07-04T00:00:00+00:00</published>
		<updated>2021-07-04T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/space-invader/" type="text/html"/>
		<id>https://muffinman.io/art/space-invader/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Made out of fifty thousands dots. The Knight for scale.</p>
    </content>

	</entry>
	<entry xml:lang="en">
		<title>Beach (print)</title>
		<published>2021-04-11T00:00:00+00:00</published>
		<updated>2021-04-11T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/beach-print/" type="text/html"/>
		<id>https://muffinman.io/art/beach-print/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Pretty large print, on a thick watercolor cotton paper.</p>
    </content>

	</entry>
	<entry xml:lang="en">
		<title>Krypton</title>
		<published>2021-03-27T00:00:00+00:00</published>
		<updated>2021-03-27T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/krypton/" type="text/html"/>
		<id>https://muffinman.io/art/krypton/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Power of Voronoi diagrams.</p><p>I wrote <a href="/blog/breaking-down-krypton/">the blog post</a> about the creation process. Fun fact, this plot got sold even before I plotted it.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Space Armadillo</title>
		<published>2021-03-14T00:00:00+00:00</published>
		<updated>2021-03-14T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/armadillo/" type="text/html"/>
		<id>https://muffinman.io/art/armadillo/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Small plots are fun.</p><p>Everything is actually 2D, but made to look like 3D. Same algorithm as &quot;Pokeball&quot;.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Pokeball</title>
		<published>2021-03-14T00:00:00+00:00</published>
		<updated>2021-03-14T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/pokeball/" type="text/html"/>
		<id>https://muffinman.io/art/pokeball/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Classic example of bug becoming a feature.</p><p>You can see some ellipses are not being cropped properly. I love how it turned out so I kept it like this.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Untitled (five prints)</title>
		<published>2021-02-16T00:00:00+00:00</published>
		<updated>2021-02-16T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/untitled-vector-field-prints/" type="text/html"/>
		<id>https://muffinman.io/art/untitled-vector-field-prints/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Colorful blobs following a vector field.</p><p>It took me some time to get the color blending just right. Because of so many colors, it was impossible to plot these. In the end I did five very tall prints.</p>
<p>Be sure to check out the last photo to see all prints in one place.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Into 2021</title>
		<published>2021-02-01T00:00:00+00:00</published>
		<updated>2021-02-01T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/into-2021/" type="text/html"/>
		<id>https://muffinman.io/blog/into-2021/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>2020 was a hard one.</p>
<p>I started writing this post in December, but I couldn't make myself finish it. The whole situation with COVID made me anxious at times and I didn't really have motivation for my side projects including this blog. But I won't focus on bad things, everyone had a tough year, so let's try to stay positive.</p>
<span id="continue-reading"></span><h2 id="generative-art">Generative Art<a
  class="header-anchor"
  href="#generative-art" aria-label="Anchor link for: generative-art"
  title="Anchor link for: generative-art"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I had one huge positive this year - I got into <a href="https://en.wikipedia.org/wiki/Generative_art">generative art</a>. My fiance likes to say that I woke up on the first on January and <i>started drawing some triangles</i>. <a href="https://codepen.io/stanko/pen/XWJeBqQ">Triangles</a> were super naive, but I'm super happy with my progress and these are some of my creations (all pen plotted):</p>

  <img
    class="image image--md   "
    src="&#x2F;img&#x2F;2021&#x2F;waves.jpg"
    alt="&quot;Waves&quot;, one of the first pieces I made"
  />
  


  <img
    class="image image--lg   "
    src="&#x2F;img&#x2F;2021&#x2F;black-holes.jpg"
    alt="Me holding my generative piece &quot;Black Holes&quot;"
  />
  


  <img
    class="image image--lg   "
    src="&#x2F;img&#x2F;2021&#x2F;truchet.jpg"
    alt="&quot;Untitled&quot;, drawing based on Truchet tiling"
  />
  

<p>Special thanks to Vladimir Mitrović who was the only person I knew doing generative art. When I reached out, he selflessly helped me start with the whole thing. Be sure to visit <a href="https://brutalism.rs/">his website</a> as he is doing amazing stuff.</p>
<p>I <a href="/archive/#generative-art">already wrote</a> about my generative work a little, but I will create a separate site section for my artwork. Meanwhile, you can see the most of my work on <a href="https://www.instagram.com/muffinman_io/">Instagram</a>. I'm super thrilled that people like my art enough to hang it on their walls.</p>
<p>All of my work is done with pen plotting in mind. I'm using <a href="https://shop.evilmadscientist.com/908">AxiDraw SE/A3</a> by Evil Mad Scientist and I love everything about this machine. Pen plotting is something that I want to write more about in the future.</p>

  <img
    class="image image--lg  image--shadow "
    src="&#x2F;img&#x2F;2021&#x2F;beach.jpg"
    alt="&quot;Beach&quot;, generative piece consisting of 116 thousands dots"
  />
  

<h2 id="blog">Blog<a
  class="header-anchor"
  href="#blog" aria-label="Anchor link for: blog"
  title="Anchor link for: blog"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>This year I neglected the blog a little. Mostly because I was focused on generative stuff, and I was doing that instead of writing posts. The pandemic didn't help either.</p>
<p>I <a href="/blog/this-blog-is-now-google-free/">removed Google Analytics</a> in favor of <a href="https://www.goatcounter.com/">GoatCounter</a>, a simple open source web analytics which are not tracking my readers.</p>
<p>Even without writing much, I had more visits than in 2020. But you can see the drop in May, about the same time I removed Google Analytics. Coincidence or not, I can't say. The second drop happened in early December, as I moved posts under <code>/blog</code> prefix but screwed up the redirections. I can only hope search engines won't derank me too much because of that.</p>

  <img
    class="image image--md   "
    src="&#x2F;img&#x2F;2021&#x2F;analytics.png"
    alt="My blog&#x27;s analytics for 2020"
  />
  

<p>People are still not sticking around after reading one article, but that is ok, I never optimized for that. I'm happy to see that traffic is still mainly organic, coming from the search engines. Interesting thing is that macOS is almost tied with Windows.</p>
<h2 id="work">Work<a
  class="header-anchor"
  href="#work" aria-label="Anchor link for: work"
  title="Anchor link for: work"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<h3 id="working-from-home">Working from home<a
  class="header-anchor"
  href="#working-from-home" aria-label="Anchor link for: working-from-home"
  title="Anchor link for: working-from-home"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>I'm fortunate enough to have a dedicate work space. A small study with a <span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  good chair
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>I'm a big fan of Steelcase chairs<span class="sidenote__bracket">)</span></span>
 and a monitor. Pretty much the same setup as the one I have at work. All in all, I think I was more productive working from home, mainly due to the lack of distractions. But man, I miss working from office, along with all of it's distractions.</p>
<h3 id="our-website">Our website<a
  class="header-anchor"
  href="#our-website" aria-label="Anchor link for: our-website"
  title="Anchor link for: our-website"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>I'm proud to say I was part of the team who developed a new version of <a href="https://work.co/">Work &amp; Co website</a>. I love it's design and the grid navigation. Fully made in React.</p>

<a href="https:&#x2F;&#x2F;work.co" class="image__link">

  <img
    class="image image--lg  image--shadow "
    src="&#x2F;img&#x2F;2021&#x2F;workco.png"
    alt="Work &amp; Co website"
  />
  

</a>

<h3 id="ikea">IKEA<a
  class="header-anchor"
  href="#ikea" aria-label="Anchor link for: ikea"
  title="Anchor link for: ikea"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>For about year and a half I was working with some great people in IKEA on their new web experience and the new design system. It was a super pleasant and insightful experience.</p>
<h2 id="side-projects">Side projects<a
  class="header-anchor"
  href="#side-projects" aria-label="Anchor link for: side-projects"
  title="Anchor link for: side-projects"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>If I remember correctly, I haven't released any npm libraries this year. Like I said, I was spending my time drawing with code. However, number of downloads is still on the upward trend. It reached whopping 9 millions this year!</p>
<p><a href="https://npm-stat.com/charts.html?author=stanko&amp;from=2020-01-01&amp;to=2020-12-31"><img src="/img/2021/npm.png" alt="Stats for my npm packages, for 2020" /></a></p>
<p>Some of my generative work is open source and interactive. For all other drawings, please check my generative work on <a href="https://www.instagram.com/muffinman_io/">Instagram</a>, until I build a real artwork section.</p>
<p>Interactive ones you can find here:</p>
<ul>
<li><a href="https://neon.muffinman.io/">Neon</a></li>
<li><a href="https://breathe.muffinman.io/">Breathe</a></li>
<li><a href="https://muffinman.io/generative-swirls/">Swirls</a></li>
</ul>
<hr />
<h2 id="thank-you">Thank you!<a
  class="header-anchor"
  href="#thank-you" aria-label="Anchor link for: thank-you"
  title="Anchor link for: thank-you"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Post is a little bit chaotic, which fits the theme of 2020. I just wanted to get it out there as it took me so long to finish it. Thank you for reading my ramblings and <span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  let's hope 2021 will be a better year.
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>It has to be, right?!<span class="sidenote__bracket">)</span></span>
</p>
<p>Take care!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Beach</title>
		<published>2020-12-06T00:00:00+00:00</published>
		<updated>2020-12-06T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/beach/" type="text/html"/>
		<id>https://muffinman.io/art/beach/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>11 hours of plotting and 115 981 dots.</p><p>Two separate plots, and I'm super happy how I managed to align them. On the last image, you can see the lines I drew to help me align it. My wife insisted we keep this one.</p>
<p>Pigma Micron pens are indestructible, just saying.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Contact Lost</title>
		<published>2020-12-03T00:00:00+00:00</published>
		<updated>2020-12-03T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/contact-lost/" type="text/html"/>
		<id>https://muffinman.io/art/contact-lost/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>46534 pen plotted dots.</p><p>It ended up being vertically symmetrical because I forgot to change parameters for the bottom half.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Stranded</title>
		<published>2020-11-07T00:00:00+00:00</published>
		<updated>2020-11-07T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/stranded-blue-red/" type="text/html"/>
		<id>https://muffinman.io/art/stranded-blue-red/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>The best photo I had is this one that I took while plotting was still in progress.</p>
    </content>

	</entry>
	<entry xml:lang="en">
		<title>Stranded</title>
		<published>2020-11-07T00:00:00+00:00</published>
		<updated>2020-11-07T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/stranded-silver/" type="text/html"/>
		<id>https://muffinman.io/art/stranded-silver/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>It gives me almost claustrophobic vibe, therefore the name. Silver looks so much nicer in person.</p>
    </content>

	</entry>
	<entry xml:lang="en">
		<title>AxiDraw Lego camera mount</title>
		<published>2020-10-17T00:00:00+00:00</published>
		<updated>2020-10-17T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/axidraw-lego-camera-mount/" type="text/html"/>
		<id>https://muffinman.io/blog/axidraw-lego-camera-mount/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>I already <a href="/blog/axidraw-plotter-camera-mount/">built a mount</a> for my Raspberry Pi camera, but it was 3d printed. Meaning that it has one fixed position. I used it a couple of times, but I wasn't super satisfied. Then I stumbled on <a href="https://imgur.com/gallery/VjXSSzh">these images</a>, and thought it was a great idea to use Lego to build a new, more versatile mount.</p>
<p>A friend of mine had a bunch of spare Legos laying around, so he gave me two bags full of Legos to play around. I wasn't sure where to start, especially because I wanted to make both height and rotation adjustable. After fiddling with the blocks for about an hour, I came up with this:</p>
<div
  class="dual-image  "
>
  <img class="dual-image__img" src="&#x2F;img&#x2F;axidraw&#x2F;lego-front.jpg" alt="Camera on the mount, front view" />
  <img class="dual-image__img" src="&#x2F;img&#x2F;axidraw&#x2F;lego-back.jpg" alt="Camera on the mount, back view" />
</div>
<span id="continue-reading"></span>
<p>It is quite simple, but the secret is in the blue part. Because it can be connected with the black &quot;rail&quot; I
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  glued on to the plotter
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>I used double sided mounting tape, as it is stable enough and easy to remove if I want to<span class="sidenote__bracket">)</span></span>
</p>
<p><img src="/img/axidraw/lego-rail.jpg" alt="AxiDraw with black lego rail glued on" /></p>
<p>This allows me to change the height of the mount, by inserting the blue part into the different hole. And to make things even better, the blue part behaves as an axis, and the whole mount can be rotated around it. Once mounted, it looks like this:</p>
<p><img src="/img/axidraw/lego-mounted.jpg" alt="Camera mounted on the plotter" /></p>
<p>And finally I shot a short test video plotting my logo:</p>
<p><video
  style="width:100%"
  controls="true"
  muted="true"
  loop="true"
  playsinline="true"
  alt-text="Silver pen drawing my logo on black paper"
  src="/img/axidraw/lego-example.mp4#t=0.001"
></video></p>
<p>If you want to see pen plots of my generative art, check my <a href="https://www.instagram.com/muffinman_io/">Instagram account</a>.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Simple video buffering loader in React</title>
		<published>2020-10-16T00:00:00+00:00</published>
		<updated>2020-10-16T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/react-simple-video-buffering-loader/" type="text/html"/>
		<id>https://muffinman.io/blog/react-simple-video-buffering-loader/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>For multiple projects, I had to add a simple video component with
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  play/pause button
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Always include at least basic video controls for accessibility<span class="sidenote__bracket">)</span></span>

and a buffering loader. It is not hard to detect the buffering state, but it can be tricky to get everything right.</p>
<p>Therefore, I created a simple component which I now copy from project to project with slight style adjustments. Jump to <a href="https://muffinman.io/blog/react-simple-video-buffering-loader/#code">the code</a> if you are not interested in how it's made.</p>
<span id="continue-reading"></span><h2 id="demo">Demo<a
  class="header-anchor"
  href="#demo" aria-label="Anchor link for: demo"
  title="Anchor link for: demo"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Here you can see the final version (it might be easier to see the functionality if you <a href="https://codepen.io/stanko/pen/WNxwreJ" target="_blank">open it in a separate tab</a>).</p>
<iframe
  height="550"
  
  scrolling="no"
  title="React - Simple video buffering loader"
  src="https://codepen.io/stanko/embed/WNxwreJ?default-tab=result"
  frameborder="no"
  loading="lazy"
  allowtransparency="true"
  allowfullscreen="true"
>
  See the Pen <a href="https://codepen.io/stanko/pen/WNxwreJ">
  React - Simple video buffering loader</a> by Stanko (<a href="https://codepen.io/stanko">@stanko</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
<h2 id="how-it-works">How it works<a
  class="header-anchor"
  href="#how-it-works" aria-label="Anchor link for: how-it-works"
  title="Anchor link for: how-it-works"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>The solution is simple and relies on four video events:</p>
<ul>
<li><code>waiting</code> - playback has stopped because of a temporary lack of data</li>
<li><code>pause</code> - playback has been paused</li>
<li><code>play</code> - playback has begun</li>
<li><code>playing</code> - playback is ready to start after having been paused or delayed due to lack of data</li>
</ul>
<p>We are going to use <code>waiting</code> event to set our loading flag to <code>true</code> and all other events to set it to <code>false</code>.</p>
<p>If the video is already playing, and buffering happens, we'll get events fired in this order:</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>&quot;waiting&quot;
</span><span>&quot;playing&quot;
</span></code></pre>
<p>This is all fine and dandy, but if the video is paused, and we play it things get a little messy.
Now, if buffering happens, we'll get these events fired:</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>&quot;play&quot;
</span><span>&quot;playing&quot;
</span><span>&quot;waiting&quot;
</span><span>&quot;playing&quot;
</span></code></pre>
<p>All of these events are fired in a very quick succession and alter the state too fast leading to some bad UX. The secret is to add a short debounce time to avoid it. What I found to work best is 200ms for <code>waiting</code> event and 50ms for all others.</p>
<h2 id="code">Code<a
  class="header-anchor"
  href="#code" aria-label="Anchor link for: code"
  title="Anchor link for: code"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I'm using React with hooks, but the same thing can be easily ported to React class or vanilla JavaScript.</p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#c678dd;">import </span><span style="color:#e06c75;">React</span><span>, { </span><span style="color:#e06c75;">useEffect</span><span>, </span><span style="color:#e06c75;">useState</span><span>, </span><span style="color:#e06c75;">useRef </span><span>} </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;react&#39;</span><span>;
</span><span>
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">PLAYING_DEBOUNCE_TIME </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">50</span><span>;
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">WAITING_DEBOUNCE_TIME </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">200</span><span>;
</span><span>
</span><span style="color:#c678dd;">const </span><span style="color:#61afef;">Video </span><span style="color:#c678dd;">= </span><span>({ </span><span style="color:#e06c75;">src</span><span>, </span><span style="color:#c678dd;">...</span><span style="color:#e06c75;">props </span><span>}) </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>  </span><span style="color:#c678dd;">const </span><span>[</span><span style="color:#e06c75;">isPlaying</span><span>, </span><span style="color:#e06c75;">setIsPlaying</span><span>] </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">useState</span><span>(</span><span style="color:#e5c07b;">false</span><span>);
</span><span>  </span><span style="color:#c678dd;">const </span><span>[</span><span style="color:#e06c75;">isWaiting</span><span>, </span><span style="color:#e06c75;">setIsWaiting</span><span>] </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">useState</span><span>(</span><span style="color:#e5c07b;">false</span><span>);
</span><span>
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">isWaitingTimeout </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">useRef</span><span>(</span><span style="color:#e5c07b;">null</span><span>);
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">isPlayingTimeout </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">useRef</span><span>(</span><span style="color:#e5c07b;">null</span><span>);
</span><span>
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">videoElementRef </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">useRef</span><span>();
</span><span>
</span><span>  </span><span style="color:#61afef;">useEffect</span><span>(() </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>    </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#c678dd;">!</span><span style="color:#e06c75;">videoElementRef</span><span>.current) {
</span><span>      </span><span style="color:#c678dd;">return</span><span>;
</span><span>    }
</span><span>
</span><span>    </span><span style="color:#c678dd;">const </span><span style="color:#61afef;">waitingHandler </span><span style="color:#c678dd;">= </span><span>() </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>      </span><span style="color:#61afef;">clearTimeout</span><span>(</span><span style="color:#e06c75;">isWaitingTimeout</span><span>.current);
</span><span>
</span><span>      </span><span style="color:#e06c75;">isWaitingTimeout</span><span>.current </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">setTimeout</span><span>(() </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>        </span><span style="color:#61afef;">setIsWaiting</span><span>(</span><span style="color:#e5c07b;">true</span><span>);
</span><span>      }, </span><span style="color:#e06c75;">WAITING_DEBOUNCE_TIME</span><span>);
</span><span>    };
</span><span>
</span><span>    </span><span style="color:#c678dd;">const </span><span style="color:#61afef;">playHandler </span><span style="color:#c678dd;">= </span><span>() </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>      </span><span style="color:#61afef;">clearTimeout</span><span>(</span><span style="color:#e06c75;">isWaitingTimeout</span><span>.current);
</span><span>      </span><span style="color:#61afef;">clearTimeout</span><span>(</span><span style="color:#e06c75;">isPlayingTimeout</span><span>.current);
</span><span>
</span><span>      </span><span style="color:#e06c75;">isPlayingTimeout</span><span>.current </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">setTimeout</span><span>(() </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>        </span><span style="color:#61afef;">setIsPlaying</span><span>(</span><span style="color:#e5c07b;">true</span><span>);
</span><span>        </span><span style="color:#61afef;">setIsWaiting</span><span>(</span><span style="color:#e5c07b;">false</span><span>);
</span><span>      }, </span><span style="color:#e06c75;">PLAYING_DEBOUNCE_TIME</span><span>);
</span><span>    };
</span><span>
</span><span>    </span><span style="color:#c678dd;">const </span><span style="color:#61afef;">pauseHandler </span><span style="color:#c678dd;">= </span><span>() </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>      </span><span style="color:#61afef;">clearTimeout</span><span>(</span><span style="color:#e06c75;">isWaitingTimeout</span><span>.current);
</span><span>      </span><span style="color:#61afef;">clearTimeout</span><span>(</span><span style="color:#e06c75;">isPlayingTimeout</span><span>.current);
</span><span>
</span><span>      </span><span style="color:#e06c75;">isPlayingTimeout</span><span>.current </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">setTimeout</span><span>(() </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>        </span><span style="color:#61afef;">setIsPlaying</span><span>(</span><span style="color:#e5c07b;">false</span><span>);
</span><span>        </span><span style="color:#61afef;">setIsWaiting</span><span>(</span><span style="color:#e5c07b;">false</span><span>);
</span><span>      }, </span><span style="color:#e06c75;">PLAYING_DEBOUNCE_TIME</span><span>);
</span><span>    };
</span><span>
</span><span>    </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">element </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">videoElementRef</span><span>.current;
</span><span>
</span><span>    </span><span style="color:#e06c75;">element</span><span>.</span><span style="color:#61afef;">addEventListener</span><span>(</span><span style="color:#98c379;">&quot;waiting&quot;</span><span>, </span><span style="color:#e06c75;">waitingHandler</span><span>);
</span><span>    </span><span style="color:#e06c75;">element</span><span>.</span><span style="color:#61afef;">addEventListener</span><span>(</span><span style="color:#98c379;">&quot;play&quot;</span><span>, </span><span style="color:#e06c75;">playHandler</span><span>);
</span><span>    </span><span style="color:#e06c75;">element</span><span>.</span><span style="color:#61afef;">addEventListener</span><span>(</span><span style="color:#98c379;">&quot;playing&quot;</span><span>, </span><span style="color:#e06c75;">playHandler</span><span>);
</span><span>    </span><span style="color:#e06c75;">element</span><span>.</span><span style="color:#61afef;">addEventListener</span><span>(</span><span style="color:#98c379;">&quot;pause&quot;</span><span>, </span><span style="color:#e06c75;">pauseHandler</span><span>);
</span><span>
</span><span>    </span><span style="color:#5c6370;">// clean up
</span><span>    </span><span style="color:#c678dd;">return </span><span>() </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>      </span><span style="color:#61afef;">clearTimeout</span><span>(</span><span style="color:#e06c75;">isWaitingTimeout</span><span>.current);
</span><span>      </span><span style="color:#61afef;">clearTimeout</span><span>(</span><span style="color:#e06c75;">isPlayingTimeout</span><span>.current);
</span><span>
</span><span>      </span><span style="color:#e06c75;">element</span><span>.</span><span style="color:#61afef;">removeEventListener</span><span>(</span><span style="color:#98c379;">&quot;waiting&quot;</span><span>, </span><span style="color:#e06c75;">waitingHandler</span><span>);
</span><span>      </span><span style="color:#e06c75;">element</span><span>.</span><span style="color:#61afef;">removeEventListener</span><span>(</span><span style="color:#98c379;">&quot;play&quot;</span><span>, </span><span style="color:#e06c75;">playHandler</span><span>);
</span><span>      </span><span style="color:#e06c75;">element</span><span>.</span><span style="color:#61afef;">removeEventListener</span><span>(</span><span style="color:#98c379;">&quot;playing&quot;</span><span>, </span><span style="color:#e06c75;">playHandler</span><span>);
</span><span>      </span><span style="color:#e06c75;">element</span><span>.</span><span style="color:#61afef;">removeEventListener</span><span>(</span><span style="color:#98c379;">&quot;pause&quot;</span><span>, </span><span style="color:#e06c75;">pauseHandler</span><span>);
</span><span>    };
</span><span>  }, [</span><span style="color:#e06c75;">videoElementRef</span><span>]);
</span><span>
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#61afef;">handlePlayPauseClick </span><span style="color:#c678dd;">= </span><span>() </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>    </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#e06c75;">videoElementRef</span><span>.current) {
</span><span>      </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#e06c75;">isPlaying</span><span>) {
</span><span>        </span><span style="color:#e06c75;">videoElementRef</span><span>.current.</span><span style="color:#61afef;">pause</span><span>();
</span><span>      } </span><span style="color:#c678dd;">else </span><span>{
</span><span>        </span><span style="color:#e06c75;">videoElementRef</span><span>.current.</span><span style="color:#61afef;">play</span><span>();
</span><span>      }
</span><span>    }
</span><span>  };
</span><span>
</span><span>  </span><span style="color:#c678dd;">return </span><span>(
</span><span>    &lt;</span><span style="color:#e06c75;">div </span><span style="color:#e5c07b;">className</span><span style="color:#c678dd;">=</span><span style="color:#98c379;">&quot;SimpleVideo&quot;</span><span>&gt;
</span><span>      &lt;</span><span style="color:#e06c75;">video </span><span>{</span><span style="color:#c678dd;">...</span><span style="color:#e06c75;">props</span><span>} </span><span style="color:#e5c07b;">ref</span><span style="color:#c678dd;">=</span><span>{</span><span style="color:#e06c75;">videoElementRef</span><span>} </span><span style="color:#e5c07b;">src</span><span style="color:#c678dd;">=</span><span>{</span><span style="color:#e06c75;">src</span><span>} </span><span style="color:#e5c07b;">className</span><span style="color:#c678dd;">=</span><span style="color:#98c379;">&quot;SimpleVideo-video&quot; </span><span>/&gt;
</span><span>
</span><span>      &lt;</span><span style="color:#e06c75;">button </span><span style="color:#e5c07b;">onClick</span><span style="color:#c678dd;">=</span><span>{</span><span style="color:#e06c75;">handlePlayPauseClick</span><span>} </span><span style="color:#e5c07b;">className</span><span style="color:#c678dd;">=</span><span style="color:#98c379;">&quot;SimpleVideo-playPause&quot;</span><span>&gt;
</span><span>        {</span><span style="color:#e06c75;">isPlaying </span><span style="color:#c678dd;">? </span><span style="color:#98c379;">&quot;Pause&quot; </span><span style="color:#c678dd;">: </span><span style="color:#98c379;">&quot;Play&quot;</span><span>}
</span><span>        {</span><span style="color:#e06c75;">isWaiting </span><span style="color:#c678dd;">&amp;&amp; </span><span>&lt;</span><span style="color:#e06c75;">span </span><span style="color:#e5c07b;">className</span><span style="color:#c678dd;">=</span><span style="color:#98c379;">&quot;SimpleVideo-loader&quot;</span><span>&gt;Buffering&lt;/</span><span style="color:#e06c75;">span</span><span>&gt;}
</span><span>      &lt;/</span><span style="color:#e06c75;">button</span><span>&gt;
</span><span>    &lt;/</span><span style="color:#e06c75;">div</span><span>&gt;
</span><span>  );
</span><span>};
</span></code></pre>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Untitled</title>
		<published>2020-10-12T00:00:00+00:00</published>
		<updated>2020-10-12T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/3d-cubes-untitled/" type="text/html"/>
		<id>https://muffinman.io/art/3d-cubes-untitled/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Not really generative, I just played with blender&#x27;s SVG export.</p><p>One plot ended up being smaller because I screwed up cutting it.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Alien Machinery</title>
		<published>2020-10-02T00:00:00+00:00</published>
		<updated>2020-10-02T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/alien-machinery/" type="text/html"/>
		<id>https://muffinman.io/art/alien-machinery/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>This one gives me strong sci-fi vibes.</p><p>It was generated using the same algorithm as the previous drawing. Metallic pens give it a really nice effect in person.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Untitled</title>
		<published>2020-09-30T00:00:00+00:00</published>
		<updated>2020-09-30T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/hex-truchet-untitled/" type="text/html"/>
		<id>https://muffinman.io/art/hex-truchet-untitled/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Although simple, I really like this one and hexagon-based tilings in general.</p><p>Be sure t o check the timelapse in the gallery below.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Deprecating Marvin</title>
		<published>2020-09-16T00:00:00+00:00</published>
		<updated>2020-09-16T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/deprecating-marvin/" type="text/html"/>
		<id>https://muffinman.io/blog/deprecating-marvin/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>It is funny, I would never say I would be sad to deprecate a software project. Especially a project boilerplate. But I just merged the deprecation notice, and I do feel down a little.</p>
<p>I created <a href="https://github.com/workco/marvin">Marvin</a> about <a href="/blog/webpack-2-react-redux/">four years ago</a> for my own needs. Since then it grew, became internal project at
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  Work&amp;Co
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Fun fact, <a href="https://work.co">our website</a> is made on top of Marvin.<span class="sidenote__bracket">)</span></span>

and was used by thousands of people.</p>
<span id="continue-reading"></span><h2 id="why">Why?<a
  class="header-anchor"
  href="#why" aria-label="Anchor link for: why"
  title="Anchor link for: why"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>When Marvin was created React landscape was looking a lot different than today. The ecosystem continues to relentlessly evolve and maintaining a single boilerplate to capture all these possibilities has become unproductive.</p>
<p>The repo will stay available, but we are stopping further improvements and maintenance.</p>
<h2 id="thank-you">Thank you!<a
  class="header-anchor"
  href="#thank-you" aria-label="Anchor link for: thank-you"
  title="Anchor link for: thank-you"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>A <a href="https://en.wikipedia.org/wiki/So_Long,_and_Thanks_for_All_the_Fish">big thank you</a> to everyone who used and supported Marvin!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Black Holes</title>
		<published>2020-09-11T00:00:00+00:00</published>
		<updated>2020-09-11T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/black-holes-color/" type="text/html"/>
		<id>https://muffinman.io/art/black-holes-color/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>In full neon.</p><p>A friend of mine asked for a color version of <a href="/art/black-holes/">Black Holes</a>. Again, it is so hard to take a good photo of these colors. They are nicer and more vivid in person.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Neon</title>
		<published>2020-08-02T00:00:00+00:00</published>
		<updated>2020-08-02T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/neon/" type="text/html"/>
		<id>https://muffinman.io/art/neon/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>My first real attempt at generative drawings.</p><p>You can play with algorithm <a href="https://neon.muffinman.io/">here</a> and download images. It took me ages to find appropriate pens to plot this one. Also check <a href="http://motorhead.local:1234/blog/neon-generative-art-piece-made-using-2d-vector-field/">the blog post</a> about how it is made.</p>
<p>On the images below you can see two different drawings.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Waves (prints)</title>
		<published>2020-07-20T00:00:00+00:00</published>
		<updated>2020-07-20T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/waves-prints/" type="text/html"/>
		<id>https://muffinman.io/art/waves-prints/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Large one was planned, small was not.</p><p>Generative process allows me to work with huge number of elements and tiny details. These details are sometimes impossible to plot, as they would just get lost in the process. That's why I love large format prints - they allow tiny details to be seen and shine through.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Black Holes</title>
		<published>2020-07-11T00:00:00+00:00</published>
		<updated>2020-07-11T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/black-holes/" type="text/html"/>
		<id>https://muffinman.io/art/black-holes/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Finely tuned vector field. Myself for scale.</p><p>Plotted in two takes on a single paper. White could be a little stronger, I still regret not doing two passes for each layer.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>This blog is now Google free</title>
		<published>2020-06-21T00:00:00+00:00</published>
		<updated>2020-06-21T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/this-blog-is-now-google-free/" type="text/html"/>
		<id>https://muffinman.io/blog/this-blog-is-now-google-free/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Earlier today I removed Google Analytics script from my website. Long time ago I switched to self hosted fonts instead of Google Fonts. That means, as of today, my blog is completely Google free.</p>
<span id="continue-reading"></span>
<p>Google Analytics is a great product, but I probably used up to five percent of it's features. Still I had a fear of missing out. That's why I delayed pulling the plug for so many months.</p>
<p>I've tried a lot of other solutions, but they all felt either too complex or too simplistic. In the end, I did find the replacement.</p>
<h2 id="goatcounter">GoatCounter<a
  class="header-anchor"
  href="#goatcounter" aria-label="Anchor link for: goatcounter"
  title="Anchor link for: goatcounter"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>It has a funky name, <a href="https://www.goatcounter.com/">GoatCounter</a>. It is open source and privacy respecting. There isn't nearly as much data, but it is all the data I need. You should check it out. It has a generous free tier for non-commercial websites - but please consider donating or contributing as it is a work of a single developer. And he is doing a great job, every time I open the dashboard, there is something new or polished.</p>

  <img
    class="image image--lg   "
    src="&#x2F;img&#x2F;goatcounter.png"
    alt="GoatCounter dashboard for my website"
  />
  

<h2 id="why">Why?<a
  class="header-anchor"
  href="#why" aria-label="Anchor link for: why"
  title="Anchor link for: why"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>It is simple: &quot;If you don't pay for it, you are the product&quot;.</p>
<p>All these Google services are free because they are collecting data on every visitor. It is one thing to use their email service for my personal needs, but having it on my website, enforcing it on my readers just doesn't feel right.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Over the Garden Wall</title>
		<published>2020-05-27T00:00:00+00:00</published>
		<updated>2020-05-27T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/over-the-garden-wall/" type="text/html"/>
		<id>https://muffinman.io/art/over-the-garden-wall/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>I started playing with sine function and this is what came out.</p><p>I always liked the flow on this one, it feels natural.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Belgrade</title>
		<published>2020-05-17T00:00:00+00:00</published>
		<updated>2020-05-17T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/belgrade/" type="text/html"/>
		<id>https://muffinman.io/art/belgrade/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>City of Belgrade.</p><p>Real elevation data but with applied exponential scale to emphasize the relief.
I made three plots, all three a little bit different. They ended up in three different countries.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Hack for iOS Safari to display the HTML video thumbnail</title>
		<published>2020-05-12T00:00:00+00:00</published>
		<updated>2020-05-12T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/hack-for-ios-safari-to-display-html-video-thumbnail/" type="text/html"/>
		<id>https://muffinman.io/blog/hack-for-ios-safari-to-display-html-video-thumbnail/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Mobile iOS Safari doesn't display preview thumbnail until you tap on the video. My go-to solution was to define a <code>poster</code> attribute and move on. But today I learned I could use something called <a href="https://www.w3.org/TR/media-frags/">Media Fragments</a>.</p>
<p>Media Fragments specify a way of sharing parts of audio and video files by simply adding url params. <a href="https://caniuse.com/#feat=media-fragments">Browser support</a> varies, but fortunately support for what we need is pretty good.</p>
<span id="continue-reading"></span><h2 id="code">Code<a
  class="header-anchor"
  href="#code" aria-label="Anchor link for: code"
  title="Anchor link for: code"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>By simply adding <code>#t=0.001</code> at the end of the video file url, we are telling the browser to skip the first millisecond of the video. When you do this, even iOS Safari will preload and show that specific frame to the user.</p>
<p>So the code looks like this:</p>
<pre data-lang="html" style="background-color:#282c34;color:#dcdfe4;" class="language-html "><code class="language-html" data-lang="html"><span>&lt;</span><span style="color:#e06c75;">video</span><span>&gt;
</span><span>  &lt;</span><span style="color:#e06c75;">source </span><span style="color:#e5c07b;">src</span><span>=</span><span style="color:#98c379;">&quot;path-to-video.mp4#t=0.001&quot; </span><span style="color:#e5c07b;">type</span><span>=</span><span style="color:#98c379;">&quot;video/mp4&quot; </span><span>/&gt;
</span><span>&lt;/</span><span style="color:#e06c75;">video</span><span>&gt;
</span></code></pre>
<h2 id="example">Example<a
  class="header-anchor"
  href="#example" aria-label="Anchor link for: example"
  title="Anchor link for: example"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Please note that you need to check the example using iOS Safari to see the difference.</p>
<div class="dual-image">
  <div class="dual-image__img">
    <b class="dual-image__text">Without media fragments</b>
    <video playsinline="true" controls="true" muted="true" src="/videos/video.mp4" style="background: #f2f5f9"></video>
  </div>
  <div class="dual-image__img">
    <b class="dual-image__text">With media fragments</b>
    <video playsinline="true" controls="true" muted="true" src="/videos/video.mp4#t=0.001" style="background: #f2f5f9"></video>
  </div>
</div>
<p>It is a hacky solution, but I've tested it on desktop Firefox, Safari, Chrome, IE11 and Edge, as well as on iOS and Android phones and it works in all of those.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>AxiDraw plotter Raspberry Pi camera mount</title>
		<published>2020-05-07T00:00:00+00:00</published>
		<updated>2020-05-07T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/axidraw-plotter-camera-mount/" type="text/html"/>
		<id>https://muffinman.io/blog/axidraw-plotter-camera-mount/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>It has been almost two months since my last post because I was super busy with my new passion,
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  generative art
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>For now, you can see my work on my <a href="https://www.instagram.com/muffinman_io/">Instagram</a> profile.
Expect new posts about my process and tools in the near future.<span class="sidenote__bracket">)</span></span>
.</p>
<p>I also got my hands on the brilliant little machine by Evil Mad Scientist, <a href="https://shop.evilmadscientist.com/908">AxiDraw plotter</a>, and it is the best purchase I made in a long time. I love everything about it - how it is engineered, images I can produce using it and their support.</p>
<p>Then I saw <a href="https://www.instagram.com/p/B-5TeGDHo2c/">this video</a> and was blown away by the idea of recording a plotter from this perspective. When I asked the author how he does it, he pointed me to <a href="https://www.instructables.com/id/Raspberry-Pi-Camara-Mount-for-the-AxiDraw/">the tutorial he selflessly created</a>. To film these wonderful videos, he made a mount for Raspberry Pi camera he can put directly on the plotter.</p>
<span id="continue-reading"></span>
<hr />
<p>I had a Raspberry lying somewhere in the flat, so I immediately ordered a camera and a 3d printed mount. Because of the COVID situation and the curfew it took a week for these to arrive, making me impatient.</p>
<p>It didn't take me long to assemble this, but I did
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  break one
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Luckily I ordered two.<span class="sidenote__bracket">)</span></span>

3d printed mount when I was drilling holes in it. I didn't have any M2 screws, so improvised with the plastic spacers and connected everything together using thin steel wire. It is not the prettiest thing I've built, but it is functional!</p>
<p><img src="/img/axidraw/front.jpg" alt="Camera on the 3d printed mount" /></p>
<p>Here you can see how much I missed when I was drilling the holes:</p>
<p><img src="/img/axidraw/back-and-side.jpg" alt="Back and side views of the mount" /></p>
<p>Camera has a fixed focal length, and to get a sharp close up video, I had to adjust it by unscrewing the lens a little bit. My local Raspberry Pi supplier added <a href="https://www.adafruit.com/product/3518">this tiny tool</a> with the camera, and it made adjusting super easy.</p>
<p>Shorty after I was able to record the first video using the little contraption I created:</p>
<p><video
  poster="/img/axidraw/poster.jpg"
  style="width:100%"
  controls="true"
  muted="true"
  playsinline="true"
  alt-text="White pen drawing stars on the black paper, the first video I recorded using the mount"
  src="/img/axidraw/stars.mp4"
></video></p>
<p>Mesmerizing isn't it? I love the reflection on the pen.</p>
<hr />
<p>More images to show how it looks mounted on the plotter:</p>
<div
  class="dual-image  "
>
  <img class="dual-image__img" src="&#x2F;img&#x2F;axidraw&#x2F;mounted-1.jpg" alt="The contraption mounted on AxiDraw plotter" />
  <img class="dual-image__img" src="&#x2F;img&#x2F;axidraw&#x2F;mounted-2.jpg" alt="Another angle of the contraption mounted with the Raspberry Pi in the background" />
</div>
<p>This was a fun little project, and I hope you like the video. I can't wait to record longer ones.
And of course, big thanks to <a href="https://www.instagram.com/dutchplottr/">@dutchplottr</a> who came up with the idea. Make sure you check his work as well!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Galaxy</title>
		<published>2020-05-02T00:00:00+00:00</published>
		<updated>2020-05-02T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/galaxy-black/" type="text/html"/>
		<id>https://muffinman.io/art/galaxy-black/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>The second galaxy plot, silver on black. Pen for scale again.</p>
    </content>

	</entry>
	<entry xml:lang="en">
		<title>Galaxy</title>
		<published>2020-05-02T00:00:00+00:00</published>
		<updated>2020-05-02T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/galaxy-white/" type="text/html"/>
		<id>https://muffinman.io/art/galaxy-white/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Super wide, plotted on two separate papers. Pen for scale.</p><p>My first attempt at real 3D vector composition. The gap was initially added to hide the border between two papers, but it grew on me.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Untitled</title>
		<published>2020-04-24T00:00:00+00:00</published>
		<updated>2020-04-24T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/untitled-tracing-paper/" type="text/html"/>
		<id>https://muffinman.io/art/untitled-tracing-paper/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>I tried adding some depth by plotting on multiple layers, using tracing paper.</p><p>The base is white Bristol and the upper layer is tracing paper. I really like how it turned out, transparency gives it a nice sense of depth.</p>
<p>But tracing paper is incredibly hard to work with, it has mind of it's own. Once it gets framed, I hope glass will press it evenly against the base layer.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Pillars</title>
		<published>2020-04-18T00:00:00+00:00</published>
		<updated>2020-04-18T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/pillars/" type="text/html"/>
		<id>https://muffinman.io/art/pillars/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>~27000 circles, 82 meters of lines and 6 hours of plotting.</p><p>On the second to last image, you can see one of my first attempts to simulate tearing. If I ever return to this algorithm, I'll make a new composition wider.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Zappa</title>
		<published>2020-04-11T00:00:00+00:00</published>
		<updated>2020-04-11T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/zappa-spiral/" type="text/html"/>
		<id>https://muffinman.io/art/zappa-spiral/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>You&#x27;ve guessed it, I&#x27;m a Zappa fan.</p><p>Another Zappa, again generated by my <a href="https://muffinman.io/vertigo/">Vertigo</a> project. I still have this one lying around, I have to finally frame it.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Attractions</title>
		<published>2020-04-04T00:00:00+00:00</published>
		<updated>2020-04-04T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/attractions/" type="text/html"/>
		<id>https://muffinman.io/art/attractions/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Unfortunately I don&#x27;t have good photos of these.</p>
    </content>

	</entry>
	<entry xml:lang="en">
		<title>Waves</title>
		<published>2020-04-03T00:00:00+00:00</published>
		<updated>2020-04-03T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/waves/" type="text/html"/>
		<id>https://muffinman.io/art/waves/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>It took more than 16 hours to plot this one. One of my first plots and definitely one of my all time favorites.</p><p>I love the patterns that emerged from polygon splitting, it is a perfect contrast with the geometrical base of the drawing. My plotter wasn't calibrated properly, resulting in some lines not being perfectly aligned, but to me, it just gave even more soul to the drawing.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Perspective</title>
		<published>2020-03-31T00:00:00+00:00</published>
		<updated>2020-03-31T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/metaballs-perspective/" type="text/html"/>
		<id>https://muffinman.io/art/metaballs-perspective/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>First plot from the Metaballs series.</p><p>Check more drawings on <a href="/metaballs">the mini site</a>. I also did a <a href="http://motorhead.local:1234/blog/metaballs-generative-art/">write up</a> on how it is made.</p>
<p>I really need to plot a couple more of these.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Zappa</title>
		<published>2020-03-28T00:00:00+00:00</published>
		<updated>2020-03-28T00:00:00+00:00</updated>
		<link href="https://muffinman.io/art/zappa/" type="text/html"/>
		<id>https://muffinman.io/art/zappa/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>The first real plot I did, made for a friend of mine who is also a Zappa fan.</p><p>Image was generated using <a href="https://muffinman.io/vertigo/">Vertigo</a>, a small vector <em>shader</em> tool I created. It is open source and you can try it live on it's website.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Letters from Sarajevo</title>
		<published>2020-03-26T00:00:00+00:00</published>
		<updated>2020-03-26T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/letters-from-sarajevo/" type="text/html"/>
		<id>https://muffinman.io/blog/letters-from-sarajevo/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Today. I have a very personal project to share with you all.</p>
<p><a href="https://lettersfromsarajevo.com/">Letters from Sarajevo</a> is a web adaptation of the book of the same name. My brother wrote the book using authentic letters our father sent us while being stuck in Sarajevo during the war in the nineties.</p>
<p>For more information about the book, please check <a href="https://lettersfromsarajevo.com/en/about/">about page</a>.</p>
<p><a href="https://lettersfromsarajevo.com/"><img src="/img/letters-from-sarajevo/truce.png" alt="One of the images from the book, soldier lying on the cannon which is plugged with a cork" /></a></p>
<span id="continue-reading"></span><h2 id="illustrations">Illustrations<a
  class="header-anchor"
  href="#illustrations" aria-label="Anchor link for: illustrations"
  title="Anchor link for: illustrations"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>In the process of publishing the book, my father's original letters got lost. We were left with only low resolution scans. That's why I asked my friend <a href="https://www.instagram.com/sun_day_sign/">Ivan</a>, to redraw (and digitalize) all of the illustrations using scans as a reference.</p>
<p>Ivan did an amazing job, just check the comparison below:</p>
<div
  class="dual-image  "
>
  <img class="dual-image__img" src="&#x2F;img&#x2F;letters-from-sarajevo&#x2F;water-original.jpg" alt="One of the original illustrations, low resolution scan" />
  <img class="dual-image__img" src="&#x2F;img&#x2F;letters-from-sarajevo&#x2F;water.png" alt="Same illustration redrawn by Ivan" />
</div>
<h2 id="tech">Tech<a
  class="header-anchor"
  href="#tech" aria-label="Anchor link for: tech"
  title="Anchor link for: tech"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>The website is open source and the code is available on <a href="https://github.com/Stanko/letters-from-sarajevo">GitHub</a>.</p>
<p>The site is powered by Jekyll, and follows a very similar setup to my blog. The build process is a little bit more complicated, because there are two different versions deployed on two different domains.</p>
<ul>
<li><span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  <a href="https://lettersfromsarajevo.com/">English version</a>
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Soon to become the international version with more translations.<span class="sidenote__bracket">)</span></span>
</li>
<li><a href="https://pismaizsarajeva.com/">Serbian version</a></li>
</ul>
<p>There is almost no JavaScript at all, except <a href="/blog/mobile-chrome-vh-units-fix/">the fix for vh units</a>. I will probably sprinkle some JavaScript goodness, but only as a progressive enchainment. I don't want this to become a single page app.</p>
<p>Everything is deployed on Netlify's free plan.</p>
<h2 id="contributing">Contributing<a
  class="header-anchor"
  href="#contributing" aria-label="Anchor link for: contributing"
  title="Anchor link for: contributing"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>If you want to contribute, help with translations or you just have a suggestion, please open an issue <a href="https://github.com/Stanko/letters-from-sarajevo/issues">here</a> or leave a comment on this post. For translations, please note that each image has <code>alt</code> text as well.</p>
<p>I'm super happy to say, the website is already being translated to more languages. Special kudos to my colleague <a href="http://felipemedina.com.br/">Felipe</a> who volunteered to provide Brazilian Portuguese translation.</p>
<p>Everything on the website, including the code, is under <a href="https://creativecommons.org/licenses/by-nc/4.0/">CC BY-NC 4.0</a> license. I think the license is fair, as it allows people to share and adapt content as long the appropriate credit is given and it is for non-commercial purposes.</p>
<h2 id="thank-you">Thank you<a
  class="header-anchor"
  href="#thank-you" aria-label="Anchor link for: thank-you"
  title="Anchor link for: thank-you"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>This project means a lot to my parents and myself. Please let us know if you enjoyed reading it and share it with your friends.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Metaballs</title>
		<published>2020-02-06T00:00:00+00:00</published>
		<updated>2020-02-06T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/metaballs-generative-art/" type="text/html"/>
		<id>https://muffinman.io/blog/metaballs-generative-art/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>I'm all about generative art these days. Today, I present you <a href="/metaballs/">Metaballs</a>, my latest creation. It is one of those projects that I visualized in my head and managed to pull it off exactly how I imagined it.</p>
<p>Somehow I came up with an idea to generate spheres, smoothly merge them to get organic looking shapes, which then I would slice up and render the
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  outlines.
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>I ordered a pen plotter and that is the reason I'm focused on producing vector files.<span class="sidenote__bracket">)</span></span>
</p>
<p>One of the final images looks like this (click on it to see more):</p>

<a href="&#x2F;metaballs&#x2F;" class="image__link">

  <img
    class="image image--lg   "
    src="&#x2F;img&#x2F;metaballs&#x2F;03a.png"
    alt="&amp;quot;Ginger&amp;quot;, image generated using Metaballs"
  />
  

</a>

<span id="continue-reading"></span><h2 id="exploration">Exploration<a
  class="header-anchor"
  href="#exploration" aria-label="Anchor link for: exploration"
  title="Anchor link for: exploration"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Not sure how I started thinking about slicing these <em>blobby</em> objects, but I had a clear vision of what I wanted to achieve. At this point I had no idea they are called metaballs. I asked on our company's <code>#tech-creative-coding</code> channel, if anyone is familiar with making something like this, and my colleagues pointed out the term metaballs and <a href="https://en.m.wikipedia.org/wiki/Marching_cubes">marching cubes</a> algorithm.</p>
<h3 id="definition">Definition<a
  class="header-anchor"
  href="#definition" aria-label="Anchor link for: definition"
  title="Anchor link for: definition"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Wikipedia defines metaballs as:</p>
<blockquote>
<p>In computer graphics, metaballs are organic-looking n-dimensional isosurfaces, characterised by their ability to meld together when in close proximity to create single, contiguous objects.</p>
</blockquote>
<p>Which makes them perfect for what I had in mind - generating organic looking blobs.</p>
<h2 id="implementation">Implementation<a
  class="header-anchor"
  href="#implementation" aria-label="Anchor link for: implementation"
  title="Anchor link for: implementation"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<h3 id="the-first-try">The first try<a
  class="header-anchor"
  href="#the-first-try" aria-label="Anchor link for: the-first-try"
  title="Anchor link for: the-first-try"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Initially I wanted to implement it myself, but I didn't really know where to start. I had an idea to hack it by overlapping two spheres and calculate a curve between them. By rotating this curve, I would create a <em>tube</em> and merge everything together.</p>
<p><img src="/img/metaballs/2d.svg" alt="Visualization of connecting two spheres using a tube" /></p>
<p>It looks ok-ish for two spheres, but I wasn't completely satisfied. And it was impossible do it for more than two spheres. So I gave up early on this idea.</p>
<h3 id="marching-on">Marching on<a
  class="header-anchor"
  href="#marching-on" aria-label="Anchor link for: marching-on"
  title="Anchor link for: marching-on"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>So I went back to the marching cubes algorithm. After some research I found a <a href="http://jamie-wong.com/2014/08/19/metaballs-and-marching-squares/">wonderful
post</a>, which very thoroughly explains implementation of
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  marching squares.
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Marching squares are the same algorithm as marching cubes, but in 2D.<span class="sidenote__bracket">)</span></span>
</p>
<p>Now I understood how algorithm works, but I gave up on implementing it myself. I was more interested in being creative and playing with the shapes, rather than re-implementing a known algorithm. So I started searching for the existing solution. That's how I stumbled on <a href="https://www.clicktorelease.com/code/bumpy-metaballs/">this demo</a>.</p>
<p><code>MarchingCubes.js</code> was shamelessly copied and I started creating some blobs.</p>
<h2 id="tooling">Tooling<a
  class="header-anchor"
  href="#tooling" aria-label="Anchor link for: tooling"
  title="Anchor link for: tooling"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I love making tools. And for generative art, I love tooling that helps me fine tune the algorithm  with
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  immediate visual feedback.
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Bret Victor has a great talk on the subject - <a href="https://vimeo.com/36579366">Inventing on Principle</a><span class="sidenote__bracket">)</span></span>

Tools like this allow me to stay in the zone and see changes real time.</p>
<p>This is the tool I made for generating Metaballs, it is made using <a href="https://threejs.org/">three.js</a> and allows me to create shapes in 3D:</p>
<p><img src="/img/metaballs/tooling.png" alt="Screenshot of the custom tool I build using three.js" /></p>
<p>I start by playing with random number generator seeds, until I get something that looks interesting. Then I adjust the number and the size of the spheres. Once I love the shape and the point of view, I spend a lot of time finely tuning all other parameters, until I'm satisfied with the looks.</p>
<h3 id="blob-to-vector">Blob to vector<a
  class="header-anchor"
  href="#blob-to-vector" aria-label="Anchor link for: blob-to-vector"
  title="Anchor link for: blob-to-vector"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>As the final goal is to pen plot these, I had to convert them to vector files.</p>
<p>I wanted to have thick edges, and cel (a.k.a. toon) shading seemed like a good idea. Apply a shader to the model, grab an image and
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  trace it using Inkscape.
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Under the hood, Inkscape uses <a href="http://potrace.sourceforge.net/">Potrace</a> to convert raster to vector images.<span class="sidenote__bracket">)</span></span>

But it ended up being much harder to pull off then I thought it would, as I didn't have any prior experience with shaders.</p>
<p>And then it hit me! Why would I try to get fat edges in 3D, when I could just trace the object as it is and change edge width once I convert it to vector.</p>
<p>To pull this off, I paint the outer mesh black, and slice surfaces white. I take a screenshot, reverse the colors and take another screenshot. The result looks like this, and the high contrast makes tracing very precise.</p>
<p><img src="/img/metaballs/exports.png" alt="Images prepared for vector tracing" /></p>
<p>Once traced, I check and polish any rogue edges that appeared in the tracing process. And that gives me the final result:</p>
<p><a href="/metaballs/"><img src="/img/metaballs/05b.png" alt="&quot;Perspective&quot;, image generated using Metaballs" /></a></p>
<p>I can't wait for my plotter to arrive to
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  start printing
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Couple of my friends already asked for prints :blush:<span class="sidenote__bracket">)</span></span>

these.</p>
<h2 id="closing-thoughts">Closing thoughts<a
  class="header-anchor"
  href="#closing-thoughts" aria-label="Anchor link for: closing-thoughts"
  title="Anchor link for: closing-thoughts"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>When I read this post, it sounds like the whole process was smooth sailing. But in reality, I had a lot of back and forth moments and had to learn a lot about working with 3D objects. But it was worth it - it was a lot of fun and I can't be more satisfied with the result.</p>
<h2 id="plotted-version">Plotted version<a
  class="header-anchor"
  href="#plotted-version" aria-label="Anchor link for: plotted-version"
  title="Anchor link for: plotted-version"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p><small>Update, August 2020</small></p>
<p>I plotted this one long time ago, but never updated the post. Better late than never!</p>
<p><img src="/img/metaballs/plot.jpg" alt="Pen plotted image generated by Metaballs, white gel pen on black paper" /></p>
<p><img src="/img/metaballs/plot-framed.jpg" alt="Same plotted image in the white frame" /></p>
<p>If you want to see more of my generative art, check my <a href="https://www.instagram.com/muffinman_io/">Instagram account</a>.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Neon, a glowy vector field</title>
		<published>2020-01-22T00:00:00+00:00</published>
		<updated>2020-01-22T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/neon-generative-art-piece-made-using-2d-vector-field/" type="text/html"/>
		<id>https://muffinman.io/blog/neon-generative-art-piece-made-using-2d-vector-field/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Recently I started playing with <a href="https://en.wikipedia.org/wiki/Generative_art">generative art</a>. I'm new to the whole thing and I'm absolutely enjoying it. Today I want to show you the first generative art project I'm satisfied with.</p>
<p>It is called <strong>Neon</strong> and you can check it out <a href="https://neon.muffinman.io/">here</a> or by clicking on the image below.</p>

<a href="https:&#x2F;&#x2F;neon.muffinman.io&#x2F;#&#x2F;false&#x2F;14&#x2F;8&#x2F;60&#x2F;70&#x2F;200&#x2F;5&#x2F;r4rquxotz3q&#x2F;ouihz7hmsic&#x2F;0z5d8xa8yrd" class="image__link">

  <img
    class="image image--md   "
    src="&#x2F;img&#x2F;neon&#x2F;example.png"
    alt="Example image generated by Neon"
  />
  

</a>

<p>I will try to explain in detail how Neon works, however this won't be a coding tutorial. But it is an open source project, and code is available <a href="https://github.com/Stanko/neon">here</a>.</p>
<span id="continue-reading"></span><h2 id="my-first-attempts">My first attempts<a
  class="header-anchor"
  href="#my-first-attempts" aria-label="Anchor link for: my-first-attempts"
  title="Anchor link for: my-first-attempts"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>These were very simple and I was just exploring various concepts and tools:</p>
<ul>
<li><a href="https://codepen.io/stanko/pen/XWJeBqQ">Triangles</a></li>
<li><a href="https://codepen.io/stanko/pen/XWJVdBg">Perlin noise grid</a></li>
<li><a href="https://codepen.io/stanko/pen/rNavXvv">Untitled</a></li>
<li><a href="https://codepen.io/stanko/pen/dyPaZMq">Flow</a></li>
</ul>
<p>I'm sharing these to show that my initial work was pretty humble. The point is - don't be afraid to experiment with things like this. For me, it was easier than I thought it would be, and I enjoyed every minute of it.</p>
<h2 id="vector-fields">Vector fields<a
  class="header-anchor"
  href="#vector-fields" aria-label="Anchor link for: vector-fields"
  title="Anchor link for: vector-fields"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>After watching <a href="https://www.youtube.com/watch?v=NAil0DzclFA">Vladimir's talk</a> about his <a href="http://brutalism.rs/project/aesthetic-engine-2/">Aesthetic Engine 2</a>, I started experimenting with <a href="https://en.wikipedia.org/wiki/Vector_field">vector fields</a>.</p>
<p>This is an example of one randomly generated vector field:</p>
<p><img src="/img/neon/00.png" alt="Randomly generated 2d vector field" /></p>
<p>Think of it like it is an air or water flow. If this field was a river and you drop a leaf in it, these forces will take it and carry it around. If we plot the movement of the leaf, we'll get a line.</p>
<p>If we draw a lot of these lines, we will visualize the flow of the field. That is the core concept I used with Neon. But for a start let's see how can we draw a single line.</p>
<h2 id="drawing-a-line">Drawing a line<a
  class="header-anchor"
  href="#drawing-a-line" aria-label="Anchor link for: drawing-a-line"
  title="Anchor link for: drawing-a-line"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>To draw a line, we'll select a random point for its start (we are <em>dropping a leaf</em>).</p>
<p><img src="/img/neon/10.png" alt="Random point in the vector field" /></p>
<p>We need to define which vectors are applying &quot;force&quot; to our point. Let's use radial search radius of 1.5 times grid item size.</p>
<p><img src="/img/neon/11.png" alt="Showing search range around the point" /></p>
<p>We'll select only vectors that start in this area (nine in this specific scenario).</p>
<p>For each one we will calculate a new force vector with the same direction, but with intensity reciprocal to its distance from the point. Meaning that the closer the vector is to the point, it will apply more force to it.</p>
<p><img src="/img/neon/12.png" alt="Highlighted vectors in the search range" /></p>
<p>Adding up all of these newly calculated force vectors will give us a single vector pointing where our next point should be.</p>
<p><img src="/img/neon/13.png" alt="Newly calculated vector points where the next point will be" /></p>
<p>Let's draw the next point and apply the same steps to it.</p>
<p><img src="/img/neon/20.png" alt="Starting point and the first calculated one" /></p>
<p>Repeat the process recursively for each new point, until we are out of bounds or if we reach the limit of points we set (Neon uses maximum of 50 points).</p>
<p><img src="/img/neon/30.png" alt="All points drawn recursively" /></p>
<p>Now we can draw a
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  bezier curve
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>I followed the great <a href="https://medium.com/@francoisromain/smooth-a-svg-path-with-cubic-bezier-curves-e37b49d46c74">post by François Romain's</a> on SVG path smoothing.<span class="sidenote__bracket">)</span></span>

through these points.</p>
<p><img src="/img/neon/40.png" alt="Bezier curve drawn through the points" /></p>
<p>This process allows us to draw a line by only defining a starting point. We can draw as many lines as we want.</p>
<p><img src="/img/neon/50.png" alt="Multiple lines generated and drawn" /></p>
<p>I created a live example for you to try it out:</p>
<iframe
  height="420"
  
  scrolling="no"
  title="2d vector field"
  src="https://codepen.io/stanko/embed/rNavBvN?default-tab=result"
  frameborder="no"
  loading="lazy"
  allowtransparency="true"
  allowfullscreen="true"
>
  See the Pen <a href="https://codepen.io/stanko/pen/rNavBvN">
  2d vector field</a> by Stanko (<a href="https://codepen.io/stanko">@stanko</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
<h2 id="neon-vector-field">Neon vector field<a
  class="header-anchor"
  href="#neon-vector-field" aria-label="Anchor link for: neon-vector-field"
  title="Anchor link for: neon-vector-field"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Heart of Neon is one of these vector fields. I started with completely randomly generated vectors.
But I quickly realized that <em>real</em> randomness creates chaos. To get something visually pleasing, I had to put some constraints in. However, randomness is what gives these projects life and unpredictability.</p>
<p>Random vectors would often create a <em>spiral of doom</em>. Vectors would create a small <em>black hole</em> which would pull in any line that comes close.</p>
<p><img src="/img/neon/spiral-of-doom.png" alt="&quot;Spiral of doom&quot; produced by random vectors" /></p>
<p>To avoid that, I used a very simple solution - to each random vector I added a constant vector that
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  pulls to the right
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>That is why most of the images have more weight on the right side. I love the resulting visual asymmetry.<span class="sidenote__bracket">)</span></span>

. That reduced <em>black holes</em> to a minimum. You can still see them here and there, but the occurrences are rare.</p>
<h3 id="lines">Lines<a
  class="header-anchor"
  href="#lines" aria-label="Anchor link for: lines"
  title="Anchor link for: lines"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Lines are generated in the exact way I described above. Starting points are randomly selected, along with line's width and color.</p>
<p>All random values are created using a seeded random number generator. That means generator will output the same random numbers sequence if we input the same seed.</p>
<p>This makes it easy to replicate images based on input parameters. Some parameters are exposed to the user through UI controls. Others are hidden on purpose, as I spent a lot of time fine tuning them to get the right &quot;feel&quot; out of the images produced.</p>
<h3 id="colors">Colors<a
  class="header-anchor"
  href="#colors" aria-label="Anchor link for: colors"
  title="Anchor link for: colors"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>For color generation, I'm using HSL representation. It gives me an easy way of getting bright
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  neon
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>If it wasn't obvious enough where the name comes from.<span class="sidenote__bracket">)</span></span>

colors. Saturation and lightness are fixed to 70% and 60% respectively, while hue is randomly selected.</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#5c6370;">// I&#39;m passing pre-seeded random number generator
</span><span style="color:#5c6370;">// You can use Math.random instead
</span><span>
</span><span style="color:#c678dd;">export function </span><span style="color:#61afef;">generateRandomColor</span><span>(</span><span style="color:#e06c75;">rng</span><span>) {
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">h </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">rng</span><span>() </span><span style="color:#c678dd;">* </span><span style="color:#e5c07b;">360</span><span>;
</span><span>
</span><span>  </span><span style="color:#c678dd;">return </span><span style="color:#98c379;">`hsl(${ </span><span style="color:#e06c75;">h </span><span style="color:#98c379;">}, 70%, 60%)`</span><span>;
</span><span>}
</span></code></pre>
<h3 id="output">Output<a
  class="header-anchor"
  href="#output" aria-label="Anchor link for: output"
  title="Anchor link for: output"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Neon produces vector images, mainly because it enables printing large format without quality loss. Beside that I enjoy working with SVGs and I want to try pen plotting in the future.</p>
<h3 id="controls">Controls<a
  class="header-anchor"
  href="#controls" aria-label="Anchor link for: controls"
  title="Anchor link for: controls"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Initial version did only square images. Friend of mine really liked it and wants to print some out for his living room, but asked me if Neon could do different aspect ratios. He is the main reason I went back, added and polished UI controls.</p>
<h3 id="unique-urls">Unique URLs<a
  class="header-anchor"
  href="#unique-urls" aria-label="Anchor link for: unique-urls"
  title="Anchor link for: unique-urls"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Like I mentioned earlier, each image can be reproduced if we have parameters used. And playing with controls made it so easy to loose that one perfect image. That's why I added all of the parameters to the URL. Every URL is unique, and you can easily share image with anyone.</p>
<h3 id="logo-and-links">Logo and links<a
  class="header-anchor"
  href="#logo-and-links" aria-label="Anchor link for: logo-and-links"
  title="Anchor link for: logo-and-links"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>It is a minor detail, but it is dear one to me. On every change, logo and links change color using the same color function used for line color.</p>
<h2 id="please-share-your-creations">Please share your creations<a
  class="header-anchor"
  href="#please-share-your-creations" aria-label="Anchor link for: please-share-your-creations"
  title="Anchor link for: please-share-your-creations"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>If you end up using it in a project, printing it out, or just think you created a piece of art, please share it with me. I would love to see it. You can post a comment here, or open an issue on <a href="https://github.com/Stanko/neon">GitHub</a>.</p>

<a href="https:&#x2F;&#x2F;neon.muffinman.io&#x2F;#&#x2F;false&#x2F;15&#x2F;6&#x2F;60&#x2F;55&#x2F;140&#x2F;5&#x2F;2aybxq8tmqv&#x2F;crdmt2f7nn8&#x2F;i5g7i80cigf" class="image__link">

  <img
    class="image image--lg   "
    src="&#x2F;img&#x2F;neon&#x2F;example2.png"
    alt="Another image generated by Neon"
  />
  

</a>

<h2 id="plotted-version">Plotted version<a
  class="header-anchor"
  href="#plotted-version" aria-label="Anchor link for: plotted-version"
  title="Anchor link for: plotted-version"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p><small>Update, August 2020</small></p>
<p>All of my art is made with pen plotting in mind. Few days ago, I finally got my hands on some gel pens (Sakura's Gelly Roll Moonlight) and the first thing I plotted was my favorite Neon piece:</p>

  <img
    class="image image--lg   "
    src="&#x2F;art&#x2F;neon&#x2F;0.jpg"
    alt="Pen plotted image generated by Neon, gel pens on black paper"
  />
  

<p>It is really hard to take a good photo of it, as in person, colors are much more bright and vivid. On the photo below colors are more accurate, but still not quite as nice as in real life.</p>

  <img
    class="image image--lg   "
    src="&#x2F;art&#x2F;neon&#x2F;1.jpg"
    alt="Detail of the plotted image to show colors better"
  />
  

<p>If you want to see more of my generative art, check my <a href="https://www.instagram.com/muffinman_io/">Instagram profile</a>.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Into 2020</title>
		<published>2019-12-31T00:00:00+00:00</published>
		<updated>2019-12-31T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/into-2020/" type="text/html"/>
		<id>https://muffinman.io/blog/into-2020/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Last time I wrote one of these recaps was <a href="/blog/looking-forward-to-2017/">in 2016</a>. Not sure why I waited three years to write another, and from now on I'll try to do these annually.</p>
<p>2019 was a good year for me, and I want to highlight a couple of things.</p>
<span id="continue-reading"></span><h2 id="blog">Blog<a
  class="header-anchor"
  href="#blog" aria-label="Anchor link for: blog"
  title="Anchor link for: blog"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I'm really proud of my blog. And judging by the analytics, people are actually reading it - this year I had over 100k users visiting and ~85% of the traffic is coming from the organic search! This is not the first blog I had, but this is the one I'm sticking with.</p>

  <img
    class="image image--lg   "
    src="&#x2F;img&#x2F;2020&#x2F;analytics.png"
    alt="This year&#x27;s analytics, over 100k users"
  />
  

<p>I love how there is a dip every single weekend. People are finding my articles almost exclusively on work days, probably while searching for work related problems.</p>
<p>But the bounce rate is also high, almost 85%. After reading one article users are not sticking for long. That is something I want to improve in the next year.</p>
<h2 id="work-co">Work &amp; Co<a
  class="header-anchor"
  href="#work-co" aria-label="Anchor link for: work-co"
  title="Anchor link for: work-co"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>It has been a while since I started working with <a href="https://work.co/">Work &amp; Co</a>, and it continues to be a wonderful experience. I'm thrilled and proud to have the opportunity to collaborate with such talented people. To top it all, this October I was promoted to a Group Technology Director.</p>
<h3 id="mailchimp-presents">Mailchimp Presents<a
  class="header-anchor"
  href="#mailchimp-presents" aria-label="Anchor link for: mailchimp-presents"
  title="Anchor link for: mailchimp-presents"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>One of the projects I had a pleasure of working on this year was <a href="https://mailchimp.com/presents/">Mailchimp Presents</a>. We teamed up with Mailchimp to help them create a brand new media portal. It was a short timeline, but it was a breeze as people from Mailchimp were brilliant to work with. The fact my team crushed it helped as well.</p>
<p>It was built around mantra &quot;content is king&quot; and we dedicated a lot of attention to the content recirculation. All shows are Mailchimp originals, and they did incredible job with them. Production is world class, and content is in a short, <em>snackable</em> format for people on the go. You should definitely  check it out yourself.</p>

<a href="https:&#x2F;&#x2F;mailchimp.com&#x2F;presents" class="image__link">

  <img
    class="image image--lg   "
    src="&#x2F;img&#x2F;2020&#x2F;mcp.jpg"
    alt="Mailchimp Presents media portal"
  />
  

</a>

<p>We built it using
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  Gatsby
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>React static site generator<span class="sidenote__bracket">)</span></span>

and Contentful (using GraphQL API). The stack helped us to move fast and to ship the product in time. The reception was incredible, people love the shows, and conversion numbers are really high.</p>
<p>This September, in Copenhagen I gave a talk about Mailchimp Presents on the Contentful Meetup.</p>
<h3 id="ikea">IKEA<a
  class="header-anchor"
  href="#ikea" aria-label="Anchor link for: ikea"
  title="Anchor link for: ikea"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>We have ongoing collaboration with IKEA on multiple fronts. I lead one track, on the new web experience. Like with Mailchimp, working with people from IKEA is a productive and pleasant experience.</p>
<p>We are extremely proud of our work and collaboration with IKEA. I hope I will be able to share more about it soon.</p>
<h2 id="side-projects">Side projects<a
  class="header-anchor"
  href="#side-projects" aria-label="Anchor link for: side-projects"
  title="Anchor link for: side-projects"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<h3 id="vertigo">Vertigo<a
  class="header-anchor"
  href="#vertigo" aria-label="Anchor link for: vertigo"
  title="Anchor link for: vertigo"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>This is one of the things I've created this year, but haven't written about. I lost a
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  huge post draft
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>while replacing keybord on MacBook, Apple support killed my disk, and I lost everything on it.<span class="sidenote__bracket">)</span></span>
 on it.
Anyway, I'm talking about <a href="https://muffinman.io/vertigo/">Vertigo</a>.</p>
<p>Vertigo takes an image, processes it and renders it on radial dot grid or as a spiral of a variable width. Sounds confusing but just check the example below.
This was so fun to make, and I learned about canvas and SVG things I never touched before. I plan to do a full write up, and a nicer landing page for it. If you end up using it please share your work, I would love to see it.</p>

<a href="https:&#x2F;&#x2F;muffinman.io&#x2F;vertigo&#x2F;" class="image__link">

  <img
    class="image image--lg   "
    src="&#x2F;img&#x2F;2020&#x2F;vertigo.png"
    alt="Hollow Knight image processed using Vertigo"
  />
  

</a>

<h3 id="npm-packages">npm packages<a
  class="header-anchor"
  href="#npm-packages" aria-label="Anchor link for: npm-packages"
  title="Anchor link for: npm-packages"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>There has been a big increase in number of downloads of my npm packages. I was thrilled when it <a href="/blog/one-million-npm-downloads/">surpassed 1 million last year</a>, and didn't expect it to go over 4 millions this year! react-animate-height is still at the first place, but I'm really happy to see react-plx getting some traction too.</p>
<p><a href="https://npm-stat.com/charts.html?author=stanko&amp;from=2019-01-01&amp;to=2019-12-31"><img src="/img/2020/npm.png" alt="Stats for my npm packages in 2019" /></a></p>
<h3 id="redux-spark">Redux Spark<a
  class="header-anchor"
  href="#redux-spark" aria-label="Anchor link for: redux-spark"
  title="Anchor link for: redux-spark"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>One library I hoped would gain more traction is <a href="https://github.com/Stanko/redux-spark">redux-spark</a>.
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  We
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>I wrote it together with my friend Radoš.<span class="sidenote__bracket">)</span></span>

haven't marketed it at all, but we think it is a nifty little thing, as it significantly reduces boilerplate when working with redux and sagas.</p>
<p>It seems that people are experimenting with other state management libraries, but if you are still using redux, I recommend you try Spark. We are already using it on multiple projects in production and people generally love it.</p>
<h2 id="personal-life">Personal life<a
  class="header-anchor"
  href="#personal-life" aria-label="Anchor link for: personal-life"
  title="Anchor link for: personal-life"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>My girlfriend and I had a fantastic trip to Australia and New Zealand. We went scuba diving on the Great Coral Reef (where we saw sharks), visited Hobbiton, seen glowing worms cave, petted kangaroos and much more. It was a really action packed vacation. People in both Australia and New Zealand are incredibly kind and warm hearted, and I wouldn't mind visiting again.</p>
<p>Not everything was great this year. I lost a dear family member. It was a really big hit for my family and myself. We are slowly learning to cope with it. I can't emphasize how much my girlfriend helped me, and carried me through the worst. To honor the memory, I'm working on a small project and I will unveil it in 2020.</p>
<h2 id="goals-for-2020">Goals for 2020<a
  class="header-anchor"
  href="#goals-for-2020" aria-label="Anchor link for: goals-for-2020"
  title="Anchor link for: goals-for-2020"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<ul>
<li><a href="/blog/consume-less-create-more/">Create</a> even more stuff.</li>
<li>Continue working on my blog. That includes both writing and improving the experience.</li>
<li>Read more books. I haven't read that many books this year and that has to change.</li>
<li>Play guitar more. This one is long overdue.</li>
<li>Last but not the least, travel.</li>
</ul>
<hr />
<p>Anyway, thank you for reading my blog, see you next year!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Three.js extrude SVG path</title>
		<published>2019-12-18T00:00:00+00:00</published>
		<updated>2019-12-18T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/three-js-extrude-svg-path/" type="text/html"/>
		<id>https://muffinman.io/blog/three-js-extrude-svg-path/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>These days I'm playing with <a href="https://threejs.org/">three.js</a> again. I'm not an expert but I enjoy playing with graphics.</p>
<p>Conveniently, a friend of mine sent me this <a href="https://dribbble.com/shots/8907229-Urban-Planners-Mobile-Animation">Dribble</a>, and I thought it would be a perfect exercise to try making it. I still haven't done it, but I did some exploration on how to built it.</p>
<span id="continue-reading"></span>
<p>My plan was to draw the parallaxing layers as vectors, import it in three.js and use <code>ExtrudeGeometry</code> to give them a third dimension. To three.js ninjas this might be funny, but it took me some time.</p>
<p>I haven't found well documented way, plus there are a couple of gotchas. And that is the reason I want to share this process with you.</p>
<h2 id="before-we-start">Before we start<a
  class="header-anchor"
  href="#before-we-start" aria-label="Anchor link for: before-we-start"
  title="Anchor link for: before-we-start"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I'll assume you have a basic understanding of three.js, and how to setup a scene. If you are just starting with it, I recommend going through their excellent <a href="https://threejs.org/docs/index.html#manual/en/introduction/Creating-a-scene">Getting Started</a> guide first.</p>
<p>If you just want to see the end result, feel free to jump to the <a href="https://muffinman.io/blog/three-js-extrude-svg-path/#code">code</a> or the <a href="https://muffinman.io/blog/three-js-extrude-svg-path/#live-demo">live demo</a>.</p>
<h2 id="svgloader">SVGLoader<a
  class="header-anchor"
  href="#svgloader" aria-label="Anchor link for: svgloader"
  title="Anchor link for: svgloader"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Three.js provides us with <a href="https://threejs.org/docs/#examples/en/loaders/SVGLoader">SVGLoader</a>, but it is not the part of the main library. It is an extra, you have to include yourself.</p>
<p>If you are using three.js script file directly, make sure you include <a href="https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/SVGLoader.js">this file</a> as well.</p>
<p>However if you are using <code>npm</code> module, you can import it like this:</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#c678dd;">import </span><span>{ </span><span style="color:#e06c75;">SVGLoader </span><span>} </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&quot;three/examples/jsm/loaders/SVGLoader&quot;</span><span>;
</span></code></pre>
<p>Like it's name suggest this class loads SVG from an URL and parses it into three.js entries. If you already have SVG markup as a string, it is easy to parse it, but it is also easy to miss how to do it in the documentation.</p>
<p><code>SVGLoader</code> extends base <code>Loader</code> class, which contains <code>.parse()</code> method. That means we can do this:</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#5c6370;">// Get SVG&#39;s markup
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">svgMarkup </span><span style="color:#c678dd;">= </span><span>document.</span><span style="color:#61afef;">querySelector</span><span>(</span><span style="color:#98c379;">&#39;svg&#39;</span><span>).</span><span style="color:#e06c75;">outerHTML</span><span>;
</span><span>
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">loader </span><span style="color:#c678dd;">= new </span><span>THREE.SVGLoader();
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">svgData </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">loader</span><span>.</span><span style="color:#61afef;">parse</span><span>(</span><span style="color:#e06c75;">svgMarkup</span><span>);
</span></code></pre>
<p>Now when we know how to get SVG data to three.js, let's try to extrude it.</p>
<h2 id="extrude">Extrude<a
  class="header-anchor"
  href="#extrude" aria-label="Anchor link for: extrude"
  title="Anchor link for: extrude"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>You'll need a SVG, I used my logo:</p>
<svg width="202px" height="202px" viewBox="0 0 202 202" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" class="image">
  <path fill="none" d="M201,1 L201,201 L1,201 L1,1 L201,1 Z M53.27053,71 L37.6666667,71 L37.6666667,134.333333 L53.27053,134.333333 L53.27053,86.6038647 C59.2367133,86.879227 66.1207733,91.1014493 66.1207733,99.9130433 L66.1207733,134.333333 L80.4396133,134.333333 L80.4396133,99.9130433 C80.4396133,91.1014493 87.32367,86.879227 93.2898567,86.6038647 L93.2898567,134.333333 L110.63768,134.333333 L110.63768,86.6038647 C116.603863,86.879227 123.487923,91.1014493 123.487923,99.9130433 L123.487923,134.333333 L137.806763,134.333333 L137.806763,99.9130433 C137.806763,91.1014493 144.69082,86.879227 150.657003,86.6038647 L150.657003,134.333333 L166.26087,134.333333 L166.26087,71 L150.657003,71 C142.120773,71 133.859903,75.589372 130.647343,80.178744 C127.434783,75.589372 119.173913,71 110.63768,71 L93.2898567,71 C84.7536233,71 76.4927533,75.589372 73.2801933,80.178744 C70.0676333,75.589372 61.8067633,71 53.27053,71 Z" stroke="#979797"></path>
</svg>
<p>To get to the shapes we can extrude, we need to parse the SVG. Get paths' data by calling <code>.paths()</code> method. It will return an array of <a href="https://threejs.org/docs/#api/en/extras/core/ShapePath">ShapePaths</a>. Each of these has <code>.toShapes(true)</code> method. Which will return another array,
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  which in our case will always include only one item.
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>If you set second parameter <code>noHoles</code> to <code>true</code> it will return all holes as separate shapes. Read more in <a href="https://threejs.org/docs/#api/en/extras/core/ShapePath.toShapes">toShapes documention</a>.<span class="sidenote__bracket">)</span></span>
</p>
<p>Finally we got to the shapes
{{ sidenote(text=&quot;we can use <code>ExtrudeGeometry</code> on.&quot;, note=&quot;
You'll notice that every geometry in three.js has a &quot;Buffer&quot; version (e.g. <code>ExtrudeBufferGeometry</code>). Those are more optimized versions you should use on complex projects. If performance is not an issue (e.g. while learning), we can use more user friendly non-buffer versions.
&quot;) }}</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#c678dd;">const </span><span style="color:#e06c75;">svgMarkup </span><span style="color:#c678dd;">= </span><span>document.</span><span style="color:#61afef;">querySelector</span><span>(</span><span style="color:#98c379;">&#39;svg&#39;</span><span>).</span><span style="color:#e06c75;">outerHTML</span><span>;
</span><span>
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">loader </span><span style="color:#c678dd;">= new </span><span>THREE.SVGLoader();
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">svgData </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">loader</span><span>.</span><span style="color:#61afef;">parse</span><span>(</span><span style="color:#e06c75;">svgMarkup</span><span>);
</span><span>
</span><span style="color:#5c6370;">// Group that will contain all of our paths
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">svgGroup </span><span style="color:#c678dd;">= new </span><span>THREE.Group();
</span><span>
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">material </span><span style="color:#c678dd;">= new </span><span>THREE.MeshNormalMaterial();
</span><span>
</span><span style="color:#5c6370;">// Loop through all of the parsed paths
</span><span style="color:#e06c75;">svgData</span><span>.</span><span style="color:#e06c75;">paths</span><span>.</span><span style="color:#61afef;">forEach</span><span>((</span><span style="color:#e06c75;">path</span><span>, </span><span style="color:#e06c75;">i</span><span>) </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">shapes </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">toShapes</span><span>(</span><span style="color:#e5c07b;">true</span><span>);
</span><span>
</span><span>  </span><span style="color:#5c6370;">// Each path has array of shapes
</span><span>  </span><span style="color:#e06c75;">shapes</span><span>.</span><span style="color:#61afef;">forEach</span><span>((</span><span style="color:#e06c75;">shape</span><span>, </span><span style="color:#e06c75;">j</span><span>) </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>    </span><span style="color:#5c6370;">// Finally we can take each shape and extrude it
</span><span>    </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">geometry </span><span style="color:#c678dd;">= new </span><span>THREE.ExtrudeGeometry(</span><span style="color:#e06c75;">shape</span><span>, {
</span><span>      depth: </span><span style="color:#e5c07b;">20</span><span>,
</span><span>      bevelEnabled: </span><span style="color:#e5c07b;">false
</span><span>    });
</span><span>
</span><span>    </span><span style="color:#5c6370;">// Create a mesh and add it to the group
</span><span>    </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">mesh </span><span style="color:#c678dd;">= new </span><span>THREE.Mesh(</span><span style="color:#e06c75;">geometry</span><span>, </span><span style="color:#e06c75;">material</span><span>);
</span><span>
</span><span>    </span><span style="color:#e06c75;">svgGroup</span><span>.</span><span style="color:#61afef;">add</span><span>(</span><span style="color:#e06c75;">mesh</span><span>);
</span><span>  });
</span><span>});
</span><span>
</span><span style="color:#5c6370;">// Add our group to the scene (you&#39;ll need to create a scene)
</span><span style="color:#e06c75;">scene</span><span>.</span><span style="color:#61afef;">add</span><span>(</span><span style="color:#e06c75;">svgGroup</span><span>);
</span></code></pre>
<p><img src="/img/extrude-svg/step-one.png" alt="SVG path rendered in 3d space, but inverted" /></p>
<p>Our progress will look something like this, and we got to our first gotcha:</p>
<h2 id="svg-paths-are-inverted-on-y-axis">SVG paths are inverted on Y axis<a
  class="header-anchor"
  href="#svg-paths-are-inverted-on-y-axis" aria-label="Anchor link for: svg-paths-are-inverted-on-y-axis"
  title="Anchor link for: svg-paths-are-inverted-on-y-axis"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Our image is rendered upside down! This happens in the process of mapping SVG's 2d to three.js' 3d coordinate system. SVG coordinate system has a center in the top left corner and positive values on Y axis are drawn downwards.</p>
<p>Three.js renderer draws paths using values from SVG paths. But in 3d space, positive Y values are drawn upwards and our image gets inverted.</p>
<p>We can fix this by simply inverting the group that contain our objects:</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#e06c75;">svgGroup</span><span>.</span><span style="color:#e06c75;">scale</span><span>.y </span><span style="color:#c678dd;">*= -</span><span style="color:#e5c07b;">1</span><span>;
</span></code></pre>
<p><img src="/img/extrude-svg/step-two.png" alt="SVG path rendered in 3d space, this time in correct orientation" /></p>
<h2 id="every-object-has-0-0-0-position">Every object has (0, 0, 0) position<a
  class="header-anchor"
  href="#every-object-has-0-0-0-position" aria-label="Anchor link for: every-object-has-0-0-0-position"
  title="Anchor link for: every-object-has-0-0-0-position"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Shapes we got from SVG are rendered in correct positions, but for some reason they all have position set to (0, 0, 0), meaning each object is relative to itself. If you log <code>mesh.position</code> you'll get:</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#e06c75;">Vector3 </span><span>{ x: </span><span style="color:#e5c07b;">0</span><span>, y: </span><span style="color:#e5c07b;">0</span><span>, z: </span><span style="color:#e5c07b;">0 </span><span>}
</span></code></pre>
<p>What confuses me is that they are obviously not at position (0, 0, 0) in the scene. If you can explain this and how to get their actual position in the scene, please leave a comment.</p>
<h2 id="rotating-object-around-it-s-center">Rotating object around it's center<a
  class="header-anchor"
  href="#rotating-object-around-it-s-center" aria-label="Anchor link for: rotating-object-around-it-s-center"
  title="Anchor link for: rotating-object-around-it-s-center"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>To show our object in it's full 3d glory let's add a rotation around Y axis. But it doesn't look good. It is rotating around its left edge (top left corner to be exact) instead of it's center.</p>
<p><img src="/img/extrude-svg/step-three.png" alt="Our element rotates around it's corner and it's center" /></p>
<p><strong>September 2020 update</strong>: if you have only one path in the SVG you can use the tip from tuseroni's comment. Basically you just need to call <code>geometry.center()</code> before creating the mesh, to center it based on the bounding box. Unfortunately if you have multiple paths, this won't work.</p>
<hr />
<p>Usual way of changing the rotation pivot is by offsetting the object's geometry. We can't do that, as <code>Group</code> class doesn't have geometry, but we can offset all of it's children. Now it comes handy that children are relative to themselves. We are just going to offset each child object for the half of the width and height of the whole group.</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#5c6370;">// Meshes we got are all relative to themselves
</span><span style="color:#5c6370;">// meaning they have position set to (0, 0, 0)
</span><span style="color:#5c6370;">// which makes centering them in the group easy
</span><span>
</span><span style="color:#5c6370;">// Get group&#39;s size
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">box </span><span style="color:#c678dd;">= new </span><span>THREE.Box3().</span><span style="color:#61afef;">setFromObject</span><span>(</span><span style="color:#e06c75;">svgGroup</span><span>);
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">size </span><span style="color:#c678dd;">= new </span><span>THREE.Vector3();
</span><span style="color:#e06c75;">box</span><span>.</span><span style="color:#61afef;">getSize</span><span>(</span><span style="color:#e06c75;">size</span><span>);
</span><span>
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">yOffset </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">size</span><span>.y </span><span style="color:#c678dd;">/ -</span><span style="color:#e5c07b;">2</span><span>;
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">xOffset </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">size</span><span>.x </span><span style="color:#c678dd;">/ -</span><span style="color:#e5c07b;">2</span><span>;
</span><span>
</span><span style="color:#5c6370;">// Offset all of group&#39;s elements, to center them
</span><span style="color:#e06c75;">svgGroup</span><span>.</span><span style="color:#e06c75;">children</span><span>.</span><span style="color:#61afef;">forEach</span><span>(</span><span style="color:#e06c75;">item </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>  </span><span style="color:#e06c75;">item</span><span>.</span><span style="color:#e06c75;">position</span><span>.x </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">xOffset</span><span>;
</span><span>  </span><span style="color:#e06c75;">item</span><span>.</span><span style="color:#e06c75;">position</span><span>.y </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">yOffset</span><span>;
</span><span>});
</span><span>
</span></code></pre>
<p>Finally, we got what we wanted, so let's wrap things up.</p>
<p><img src="/img/extrude-svg/final.png" alt="Our element now rotates around it's center" /></p>
<h2 id="putting-it-all-together">Putting it all together<a
  class="header-anchor"
  href="#putting-it-all-together" aria-label="Anchor link for: putting-it-all-together"
  title="Anchor link for: putting-it-all-together"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>This post ended up longer than I expected, and I hope it wasn't too slow of a write up.</p>
<h3 id="code">Code<a
  class="header-anchor"
  href="#code" aria-label="Anchor link for: code"
  title="Anchor link for: code"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Here is the code used, and beneath it you'll find the <a href="https://muffinman.io/blog/three-js-extrude-svg-path/#live-demo">live demo</a>.</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#5c6370;">// You&#39;ll need to create a three.js scene yourself
</span><span>
</span><span style="color:#5c6370;">// Get SVG markup from DOM
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">svgMarkup </span><span style="color:#c678dd;">= </span><span>document.</span><span style="color:#61afef;">querySelector</span><span>(</span><span style="color:#98c379;">&#39;svg&#39;</span><span>).</span><span style="color:#e06c75;">outerHTML</span><span>;
</span><span>
</span><span style="color:#5c6370;">// SVG Loader is not a part of the main three.js bundle
</span><span style="color:#5c6370;">// we need to load it by hand from:
</span><span style="color:#5c6370;">// https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/SVGLoader.js
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">loader </span><span style="color:#c678dd;">= new </span><span>THREE.SVGLoader();
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">svgData </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">loader</span><span>.</span><span style="color:#61afef;">parse</span><span>(</span><span style="color:#e06c75;">svgMarkup</span><span>);
</span><span>
</span><span style="color:#5c6370;">// Group we&#39;ll use for all SVG paths
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">svgGroup </span><span style="color:#c678dd;">= new </span><span>THREE.Group();
</span><span style="color:#5c6370;">// When importing SVGs paths are inverted on Y axis
</span><span style="color:#5c6370;">// it happens in the process of mapping from 2d to 3d coordinate system
</span><span style="color:#e06c75;">svgGroup</span><span>.</span><span style="color:#e06c75;">scale</span><span>.y </span><span style="color:#c678dd;">*= -</span><span style="color:#e5c07b;">1</span><span>;
</span><span>
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">material </span><span style="color:#c678dd;">= new </span><span>THREE.MeshNormalMaterial();
</span><span>
</span><span style="color:#5c6370;">// Loop through all of the parsed paths
</span><span style="color:#e06c75;">svgData</span><span>.</span><span style="color:#e06c75;">paths</span><span>.</span><span style="color:#61afef;">forEach</span><span>((</span><span style="color:#e06c75;">path</span><span>, </span><span style="color:#e06c75;">i</span><span>) </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">shapes </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">toShapes</span><span>(</span><span style="color:#e5c07b;">true</span><span>);
</span><span>
</span><span>  </span><span style="color:#5c6370;">// Each path has array of shapes
</span><span>  </span><span style="color:#e06c75;">shapes</span><span>.</span><span style="color:#61afef;">forEach</span><span>((</span><span style="color:#e06c75;">shape</span><span>, </span><span style="color:#e06c75;">j</span><span>) </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>    </span><span style="color:#5c6370;">// Finally we can take each shape and extrude it
</span><span>    </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">geometry </span><span style="color:#c678dd;">= new </span><span>THREE.ExtrudeGeometry(</span><span style="color:#e06c75;">shape</span><span>, {
</span><span>      depth: </span><span style="color:#e5c07b;">20</span><span>,
</span><span>      bevelEnabled: </span><span style="color:#e5c07b;">false
</span><span>    });
</span><span>
</span><span>    </span><span style="color:#5c6370;">// Create a mesh and add it to the group
</span><span>    </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">mesh </span><span style="color:#c678dd;">= new </span><span>THREE.Mesh(</span><span style="color:#e06c75;">geometry</span><span>, </span><span style="color:#e06c75;">material</span><span>);
</span><span>
</span><span>    </span><span style="color:#e06c75;">svgGroup</span><span>.</span><span style="color:#61afef;">add</span><span>(</span><span style="color:#e06c75;">mesh</span><span>);
</span><span>  });
</span><span>});
</span><span>
</span><span style="color:#5c6370;">// Meshes we got are all relative to themselves
</span><span style="color:#5c6370;">// meaning they have position set to (0, 0, 0)
</span><span style="color:#5c6370;">// which makes centering them in the group easy
</span><span>
</span><span style="color:#5c6370;">// Get group&#39;s size
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">box </span><span style="color:#c678dd;">= new </span><span>THREE.Box3().</span><span style="color:#61afef;">setFromObject</span><span>(</span><span style="color:#e06c75;">svgGroup</span><span>);
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">size </span><span style="color:#c678dd;">= new </span><span>THREE.Vector3();
</span><span style="color:#e06c75;">box</span><span>.</span><span style="color:#61afef;">getSize</span><span>(</span><span style="color:#e06c75;">size</span><span>);
</span><span>
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">yOffset </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">size</span><span>.y </span><span style="color:#c678dd;">/ -</span><span style="color:#e5c07b;">2</span><span>;
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">xOffset </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">size</span><span>.x </span><span style="color:#c678dd;">/ -</span><span style="color:#e5c07b;">2</span><span>;
</span><span>
</span><span style="color:#5c6370;">// Offset all of group&#39;s elements, to center them
</span><span style="color:#e06c75;">svgGroup</span><span>.</span><span style="color:#e06c75;">children</span><span>.</span><span style="color:#61afef;">forEach</span><span>(</span><span style="color:#e06c75;">item </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>  </span><span style="color:#e06c75;">item</span><span>.</span><span style="color:#e06c75;">position</span><span>.x </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">xOffset</span><span>;
</span><span>  </span><span style="color:#e06c75;">item</span><span>.</span><span style="color:#e06c75;">position</span><span>.y </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">yOffset</span><span>;
</span><span>});
</span><span>
</span><span style="color:#5c6370;">// Finally we add svg group to the scene
</span><span style="color:#e06c75;">scene</span><span>.</span><span style="color:#61afef;">add</span><span>(</span><span style="color:#e06c75;">svgGroup</span><span>);
</span></code></pre>
<h3 id="live-demo">Live demo<a
  class="header-anchor"
  href="#live-demo" aria-label="Anchor link for: live-demo"
  title="Anchor link for: live-demo"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<iframe
  height="420"
  
  scrolling="no"
  title="three.js extrude SVG path"
  src="https://codepen.io/stanko/embed/gObMepb?default-tab=result"
  frameborder="no"
  loading="lazy"
  allowtransparency="true"
  allowfullscreen="true"
>
  See the Pen <a href="https://codepen.io/stanko/pen/gObMepb">
  three.js extrude SVG path</a> by Stanko (<a href="https://codepen.io/stanko">@stanko</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>MacOS Catalina, ruby bad interpreter error</title>
		<published>2019-12-11T00:00:00+00:00</published>
		<updated>2019-12-11T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/macos-catalina-ruby-bad-interpreter-error/" type="text/html"/>
		<id>https://muffinman.io/blog/macos-catalina-ruby-bad-interpreter-error/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Another Catalina rant, this time about Ruby. As far as I know, on MacOS, it is advisable to
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  leave system Ruby version to the OS
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>For example users don't have write permission on the system's gems folder.<span class="sidenote__bracket">)</span></span>

, and install a separate version for development. I had one installed via <a href="https://brew.sh/">Homebrew</a>, and never had any issues with it.</p>
<span id="continue-reading"></span>
<p>But after Catalina upgrade, I couldn't run Jekyll. Every time it would fail with the following error:</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>$ jekyll
</span><span>  -bash: /usr/local/bin/jekyll: /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/bin/ruby:
</span><span>  bad interpreter: No such file or directory
</span></code></pre>
<p>I checked my bash profile and run <code>which ruby</code> to make sure I'm using the one installed by brew, and everything seemed to be in order.</p>
<pre data-lang="bash" style="background-color:#282c34;color:#dcdfe4;" class="language-bash "><code class="language-bash" data-lang="bash"><span style="color:#5c6370;"># .bash_profile
</span><span style="color:#c678dd;">export </span><span style="color:#e06c75;">PATH</span><span style="color:#c678dd;">=</span><span style="color:#98c379;">&quot;/usr/local/opt/ruby/bin:$</span><span style="color:#e06c75;">PATH</span><span style="color:#98c379;">&quot;
</span><span>
</span><span style="color:#5c6370;"># bash
</span><span style="color:#e06c75;">$</span><span> which ruby
</span><span style="color:#e06c75;">/usr/local/opt/ruby/bin/ruby
</span></code></pre>
<p>After quick internet search I learned a lot of people are having similar problems after system upgrade, but I couldn't find the solution.</p>
<p>I've tried reinstalling ruby, setting <code>GEM_HOME</code>, altering <code>PATH</code> in <code>/etc/profile</code> and <code>/etc/bashrc</code>, removing and reinstalling gems, but nothing worked.</p>
<p>Then I tried to see which Jekyll binary is used and realized - for some reason gems were installed using the correct ruby version, but binaries weren't linked properly.</p>

  <img
    class="image image--md   "
    src="&#x2F;img&#x2F;catalina-ruby-bad-interpreter.png"
    alt="Jekyll binary wasn&#x27;t coming from brew ruby installation"
  />
  

<p>So the solution was pretty easy at the end, all I had to do is to find <code>gems/bin</code> folder and add it to my path.</p>
<pre data-lang="bash" style="background-color:#282c34;color:#dcdfe4;" class="language-bash "><code class="language-bash" data-lang="bash"><span style="color:#5c6370;"># Use ruby installed by brew
</span><span style="color:#c678dd;">export </span><span style="color:#e06c75;">PATH</span><span style="color:#c678dd;">=</span><span style="color:#98c379;">&quot;/usr/local/opt/ruby/bin:/usr/local/lib/ruby/gems/2.6.0/bin/:$</span><span style="color:#e06c75;">PATH</span><span style="color:#98c379;">&quot;
</span></code></pre>
<p>It looks like a common sense, but it took me a couple of hours to figure it out. Hopefully this will save time people facing the same issue.</p>
<hr />
<h2 id="big-sur-update-december-2020">Big Sur update (December 2020)<a
  class="header-anchor"
  href="#big-sur-update-december-2020" aria-label="Anchor link for: big-sur-update-december-2020"
  title="Anchor link for: big-sur-update-december-2020"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I got the same error after updating to Big Sur, but this time I couldn't solve it. I still don't know what I was doing wrong. In the end I started using <a href="https://github.com/rbenv/rbenv">rbenv</a> to manage ruby installations, and it works flawlessly.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Remove MacOS Catalina zsh nagging</title>
		<published>2019-12-10T00:00:00+00:00</published>
		<updated>2019-12-10T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/remove-macos-catalina-zsh-nagging/" type="text/html"/>
		<id>https://muffinman.io/blog/remove-macos-catalina-zsh-nagging/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Yesterday I
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  updated my work laptop to MacOS Catalina.
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>To be able to <a href="https://support.apple.com/en-us/HT208718">use AirPods Pro with it</a> :/<span class="sidenote__bracket">)</span></span>

Apple made a change and switched the default shell to zsh (instead of bash). From what I have read, the reason is <a href="https://thenextweb.com/dd/2019/06/04/why-does-macos-catalina-use-zsh-instead-of-bash-licensing/">a licensing issue</a>.</p>
<span id="continue-reading"></span>
<p>Bash is not gone and everything will work like it used to. But every time you open a terminal, you will be greeted by this message:</p>

  <img
    class="image image--md   "
    src="&#x2F;img&#x2F;zsh-nagging.png"
    alt="Every time I open a terminal MacOS Catalina is telling me to switch to zsh"
  />
  

<p>If you are like me, and not ready to make the switch to zsh, you can silence this warning by putting this into your <code>.bash_profile</code> (or <code>.bashrc</code>).</p>
<pre data-lang="bash" style="background-color:#282c34;color:#dcdfe4;" class="language-bash "><code class="language-bash" data-lang="bash"><span style="color:#c678dd;">export </span><span style="color:#e06c75;">BASH_SILENCE_DEPRECATION_WARNING</span><span style="color:#c678dd;">=</span><span style="color:#98c379;">1
</span></code></pre>
<h2 id="why-i-don-t-want-to-switch">Why I don't want to switch?<a
  class="header-anchor"
  href="#why-i-don-t-want-to-switch" aria-label="Anchor link for: why-i-don-t-want-to-switch"
  title="Anchor link for: why-i-don-t-want-to-switch"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Everything in my workflow is heavily customized and I'm really used to it. For example, I'm using <a href="https://github.com/Bash-it/bash-it">bash-it</a> with a custom theme for years now. It is heavily inspired by <a href="https://github.com/ohmyzsh/ohmyzsh">Oh My Zsh</a>, similar zsh <em>framework</em>. Still, it will take me some time to migrate everything.</p>
<p>I will eventually switch to zsh, but at the moment it is not high on my list of priorities.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>JavaScript keyboard easter egg</title>
		<published>2019-12-01T00:00:00+00:00</published>
		<updated>2019-12-01T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/javascript-keyboard-easter-egg/" type="text/html"/>
		<id>https://muffinman.io/blog/javascript-keyboard-easter-egg/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>I love <a href="https://en.wikipedia.org/wiki/Easter_egg_(media)#Software">easter eggs</a> in software.</p>
<p>You may have noticed the keyboard image in the background of my blog. This thing on the right side of the screen. Those with a keen eye figured out it highlights keys as you are typing. It has been here for some time now, and on my colleague's request, I'll explain how it works.</p>
<span id="continue-reading"></span>
<p>Let's break it down.</p>
<h2 id="vector-image">Vector image<a
  class="header-anchor"
  href="#vector-image" aria-label="Anchor link for: vector-image"
  title="Anchor link for: vector-image"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>First I needed a vector (SVG) keyboard image. SVG images are easy to manipulate using JavaScript. I ended making <a href="https://github.com/Stanko/Stanko.github.io/blob/master/_includes/svg/keyboard.svg">one</a> myself, by drawing over an image of the mac keyboard.</p>
<p>To target keys easily I added <code>id</code> to every key, and it looks something like this:</p>
<pre data-lang="html" style="background-color:#282c34;color:#dcdfe4;" class="language-html "><code class="language-html" data-lang="html"><span>&lt;</span><span style="color:#e06c75;">rect </span><span style="color:#e5c07b;">class</span><span>=</span><span style="color:#98c379;">&quot;Key&quot; </span><span style="color:#e5c07b;">id</span><span>=</span><span style="color:#98c379;">&quot;Key--q&quot; </span><span style="color:#e5c07b;">x</span><span>=</span><span style="color:#98c379;">&quot;52&quot; </span><span style="color:#e5c07b;">y</span><span>=</span><span style="color:#98c379;">&quot;70&quot; </span><span style="color:#e5c07b;">width</span><span>=</span><span style="color:#98c379;">&quot;36&quot; </span><span style="color:#e5c07b;">height</span><span>=</span><span style="color:#98c379;">&quot;37&quot; </span><span style="color:#e5c07b;">rx</span><span>=</span><span style="color:#98c379;">&quot;6&quot; </span><span>/&gt;
</span><span>&lt;</span><span style="color:#e06c75;">rect </span><span style="color:#e5c07b;">class</span><span>=</span><span style="color:#98c379;">&quot;Key&quot; </span><span style="color:#e5c07b;">id</span><span>=</span><span style="color:#98c379;">&quot;Key--w&quot; </span><span style="color:#e5c07b;">x</span><span>=</span><span style="color:#98c379;">&quot;95&quot; </span><span style="color:#e5c07b;">y</span><span>=</span><span style="color:#98c379;">&quot;70&quot; </span><span style="color:#e5c07b;">width</span><span>=</span><span style="color:#98c379;">&quot;36&quot; </span><span style="color:#e5c07b;">height</span><span>=</span><span style="color:#98c379;">&quot;37&quot; </span><span style="color:#e5c07b;">rx</span><span>=</span><span style="color:#98c379;">&quot;6&quot; </span><span>/&gt;
</span><span>&lt;</span><span style="color:#e06c75;">rect </span><span style="color:#e5c07b;">class</span><span>=</span><span style="color:#98c379;">&quot;Key&quot; </span><span style="color:#e5c07b;">id</span><span>=</span><span style="color:#98c379;">&quot;Key--e&quot; </span><span style="color:#e5c07b;">x</span><span>=</span><span style="color:#98c379;">&quot;138&quot; </span><span style="color:#e5c07b;">y</span><span>=</span><span style="color:#98c379;">&quot;70&quot; </span><span style="color:#e5c07b;">width</span><span>=</span><span style="color:#98c379;">&quot;36&quot; </span><span style="color:#e5c07b;">height</span><span>=</span><span style="color:#98c379;">&quot;37&quot; </span><span style="color:#e5c07b;">rx</span><span>=</span><span style="color:#98c379;">&quot;6&quot; </span><span>/&gt;
</span><span>&lt;</span><span style="color:#e06c75;">rect </span><span style="color:#e5c07b;">class</span><span>=</span><span style="color:#98c379;">&quot;Key&quot; </span><span style="color:#e5c07b;">id</span><span>=</span><span style="color:#98c379;">&quot;Key--r&quot; </span><span style="color:#e5c07b;">x</span><span>=</span><span style="color:#98c379;">&quot;182&quot; </span><span style="color:#e5c07b;">y</span><span>=</span><span style="color:#98c379;">&quot;70&quot; </span><span style="color:#e5c07b;">width</span><span>=</span><span style="color:#98c379;">&quot;36&quot; </span><span style="color:#e5c07b;">height</span><span>=</span><span style="color:#98c379;">&quot;37&quot; </span><span style="color:#e5c07b;">rx</span><span>=</span><span style="color:#98c379;">&quot;6&quot; </span><span>/&gt;
</span><span>&lt;</span><span style="color:#e06c75;">rect </span><span style="color:#e5c07b;">class</span><span>=</span><span style="color:#98c379;">&quot;Key&quot; </span><span style="color:#e5c07b;">id</span><span>=</span><span style="color:#98c379;">&quot;Key--t&quot; </span><span style="color:#e5c07b;">x</span><span>=</span><span style="color:#98c379;">&quot;225&quot; </span><span style="color:#e5c07b;">y</span><span>=</span><span style="color:#98c379;">&quot;70&quot; </span><span style="color:#e5c07b;">width</span><span>=</span><span style="color:#98c379;">&quot;36&quot; </span><span style="color:#e5c07b;">height</span><span>=</span><span style="color:#98c379;">&quot;37&quot; </span><span style="color:#e5c07b;">rx</span><span>=</span><span style="color:#98c379;">&quot;6&quot; </span><span>/&gt;
</span><span>&lt;</span><span style="color:#e06c75;">rect </span><span style="color:#e5c07b;">class</span><span>=</span><span style="color:#98c379;">&quot;Key&quot; </span><span style="color:#e5c07b;">id</span><span>=</span><span style="color:#98c379;">&quot;Key--y&quot; </span><span style="color:#e5c07b;">x</span><span>=</span><span style="color:#98c379;">&quot;269&quot; </span><span style="color:#e5c07b;">y</span><span>=</span><span style="color:#98c379;">&quot;70&quot; </span><span style="color:#e5c07b;">width</span><span>=</span><span style="color:#98c379;">&quot;36&quot; </span><span style="color:#e5c07b;">height</span><span>=</span><span style="color:#98c379;">&quot;37&quot; </span><span style="color:#e5c07b;">rx</span><span>=</span><span style="color:#98c379;">&quot;6&quot; </span><span>/&gt;
</span></code></pre>
<h2 id="key-codes">Key codes<a
  class="header-anchor"
  href="#key-codes" aria-label="Anchor link for: key-codes"
  title="Anchor link for: key-codes"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>You probably already know this, but <code>KeyboardEvent</code> has
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode">keyCode</a> property.
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>I just learned <code>keyCode</code> is deprecated in favor of <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code">code</a>. It is much better as it is not altered by keyboard layout or the state of the modifier keys. But it is not supported in Edge and IE, so I'll stick to <code>keyCode</code> in this post.<span class="sidenote__bracket">)</span></span>

We are going to use this property to map physical key presses to keys in our image.</p>
<p>I found a detailed list of key codes, and created a large mapper based on it. Object keys are <code>keyCode</code> values and each one is mapped to the html <code>id</code> I set. For keys that exist on both side of the keyboard (shift, ctrl, cmd...) I added <code>checkSide</code> property. This property tells us to check which of the two is pressed, so we can highlight the correct one.</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#c678dd;">const </span><span style="color:#e06c75;">keyCodes </span><span style="color:#c678dd;">= </span><span>{
</span><span>  </span><span style="color:#e5c07b;">8</span><span>: {
</span><span>    id: </span><span style="color:#98c379;">&#39;delete&#39;</span><span>,
</span><span>  },
</span><span>  </span><span style="color:#e5c07b;">9</span><span>: {
</span><span>    id: </span><span style="color:#98c379;">&#39;tab&#39;</span><span>,
</span><span>  },
</span><span>  </span><span style="color:#e5c07b;">13</span><span>: {
</span><span>    id: </span><span style="color:#98c379;">&#39;enter&#39;</span><span>,
</span><span>  },
</span><span>  </span><span style="color:#e5c07b;">16</span><span>: {
</span><span>    id: </span><span style="color:#98c379;">&#39;shift&#39;</span><span>,
</span><span>    checkSide: </span><span style="color:#e5c07b;">true</span><span>,
</span><span>  },
</span><span>  </span><span style="color:#5c6370;">// ...
</span><span>  </span><span style="color:#5c6370;">// all the way to key code 255
</span><span>};
</span></code></pre>
<h2 id="logic">Logic<a
  class="header-anchor"
  href="#logic" aria-label="Anchor link for: logic"
  title="Anchor link for: logic"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>On both <code>keydown</code> and <code>keyup</code> we need to find the corresponding element on our vector keyboard, and add or remove the active class.</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span>document.</span><span style="color:#61afef;">addEventListener</span><span>(</span><span style="color:#98c379;">&#39;keydown&#39;</span><span>, </span><span style="color:#c678dd;">function</span><span>(</span><span style="color:#e06c75;">e</span><span>) {
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">keyElement </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">getKeyElement</span><span>(</span><span style="color:#e06c75;">e</span><span>);
</span><span>
</span><span>  </span><span style="color:#5c6370;">// If element is found add the active class
</span><span>  </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#e06c75;">keyElement</span><span>) {
</span><span>    </span><span style="color:#5c6370;">// I&#39;m using setAttribute because IE doesn&#39;t support classList on SVG elements
</span><span>    </span><span style="color:#e06c75;">keyElement</span><span>.</span><span style="color:#61afef;">setAttribute</span><span>(</span><span style="color:#98c379;">&#39;class&#39;</span><span>, </span><span style="color:#98c379;">&#39;Key Key--active&#39;</span><span>);
</span><span>  }
</span><span>});
</span><span>
</span><span>document.</span><span style="color:#61afef;">addEventListener</span><span>(</span><span style="color:#98c379;">&#39;keyup&#39;</span><span>, </span><span style="color:#c678dd;">function</span><span>(</span><span style="color:#e06c75;">e</span><span>) {
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">keyElement </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">getKeyElement</span><span>(</span><span style="color:#e06c75;">e</span><span>);
</span><span>
</span><span>  </span><span style="color:#5c6370;">// If element is found remove the active class
</span><span>  </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#e06c75;">keyElement</span><span>) {
</span><span>    </span><span style="color:#5c6370;">// I&#39;m using setAttribute because IE doesn&#39;t support classList on SVG elements
</span><span>    </span><span style="color:#e06c75;">keyElement</span><span>.</span><span style="color:#61afef;">setAttribute</span><span>(</span><span style="color:#98c379;">&#39;class&#39;</span><span>, </span><span style="color:#98c379;">&#39;Key&#39;</span><span>);
</span><span>  }
</span><span>});
</span></code></pre>
<p>This is the function used for both events. It queries for the element based on the mapper and html <code>id</code>. It also takes in consideration <code>checkSide</code> flag to make sure key on the correct side is returned.</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#c678dd;">function </span><span style="color:#61afef;">getKeyElement</span><span>(</span><span style="color:#e06c75;">e</span><span>) {
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">key </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">keyCodes</span><span>[</span><span style="color:#e06c75;">e</span><span>.</span><span style="color:#e06c75;">keyCode</span><span>];
</span><span>
</span><span>  </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#e06c75;">key </span><span style="color:#c678dd;">&amp;&amp; </span><span style="color:#e06c75;">key</span><span>.id) {
</span><span>    </span><span style="color:#c678dd;">let </span><span style="color:#e06c75;">keySelector </span><span style="color:#c678dd;">= </span><span style="color:#98c379;">`#Key--${ </span><span style="color:#e06c75;">key</span><span style="color:#98c379;">.id }`</span><span>;
</span><span>
</span><span>    </span><span style="color:#5c6370;">// Check which key is pressed if key exists on the both sides
</span><span>    </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#e06c75;">key</span><span>.</span><span style="color:#e06c75;">checkSide </span><span style="color:#c678dd;">&amp;&amp; </span><span style="color:#e5c07b;">KeyboardEvent</span><span>) {
</span><span>      </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#e06c75;">e</span><span>.location </span><span style="color:#c678dd;">=== </span><span style="color:#e5c07b;">KeyboardEvent</span><span>.</span><span style="color:#e06c75;">DOM_KEY_LOCATION_LEFT</span><span>) {
</span><span>        </span><span style="color:#e06c75;">keySelector </span><span style="color:#c678dd;">+= </span><span style="color:#98c379;">&#39;Left&#39;</span><span>;
</span><span>      } </span><span style="color:#c678dd;">else if </span><span>(</span><span style="color:#e06c75;">e</span><span>.location </span><span style="color:#c678dd;">=== </span><span style="color:#e5c07b;">KeyboardEvent</span><span>.</span><span style="color:#e06c75;">DOM_KEY_LOCATION_RIGHT</span><span>) {
</span><span>        </span><span style="color:#e06c75;">keySelector </span><span style="color:#c678dd;">+= </span><span style="color:#98c379;">&#39;Right&#39;</span><span>;
</span><span>      }
</span><span>    }
</span><span>
</span><span>    </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">keyElement </span><span style="color:#c678dd;">= </span><span>document.</span><span style="color:#61afef;">querySelector</span><span>(</span><span style="color:#e06c75;">keySelector</span><span>);
</span><span>
</span><span>    </span><span style="color:#c678dd;">return </span><span style="color:#e06c75;">keyElement</span><span>;
</span><span>  }
</span><span>}
</span></code></pre>
<p>When window loses focus, keys would stay highlighted. To make sure that doesn't happen, on window blur we are going to remove all active classes from our keys.</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#c678dd;">function </span><span style="color:#61afef;">removeActiveKeyClass</span><span>() {
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">keyElements </span><span style="color:#c678dd;">= </span><span>document.</span><span style="color:#61afef;">querySelectorAll</span><span>(</span><span style="color:#98c379;">&#39;.Key--active&#39;</span><span>);
</span><span>
</span><span>  </span><span style="color:#c678dd;">for </span><span>(</span><span style="color:#c678dd;">let </span><span style="color:#e06c75;">i </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">0</span><span>; </span><span style="color:#e06c75;">i </span><span style="color:#c678dd;">&lt; </span><span style="color:#e06c75;">keyElements</span><span>.length; </span><span style="color:#e06c75;">i</span><span style="color:#c678dd;">++</span><span>) {
</span><span>    </span><span style="color:#e06c75;">keyElements</span><span>[</span><span style="color:#e06c75;">i</span><span>].</span><span style="color:#61afef;">setAttribute</span><span>(</span><span style="color:#98c379;">&#39;class&#39;</span><span>, </span><span style="color:#98c379;">&#39;Key&#39;</span><span>);
</span><span>  }
</span><span>}
</span><span>
</span><span>window.</span><span style="color:#61afef;">addEventListener</span><span>(</span><span style="color:#98c379;">&#39;blur&#39;</span><span>, </span><span style="color:#e06c75;">removeActiveKeyClass</span><span>);
</span></code></pre>
<p>Actual code used on this page is identical and you can find it <a href="https://github.com/Stanko/Stanko.github.io/blob/master/js/keyboard.js">here</a>.</p>
<h2 id="conclusion">Conclusion<a
  class="header-anchor"
  href="#conclusion" aria-label="Anchor link for: conclusion"
  title="Anchor link for: conclusion"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>When I initially decided to add an easter egg to my website, I was thinking of  using <a href="https://en.wikipedia.org/wiki/Konami_Code">Konami Code</a> or even creating a tiny video game. But in the end, I really loved the keyboard one, as it was easy to find and fun to play with.</p>
<p>And for the end, to see how everything fits together, I created a demo for you to play with:</p>
<iframe
  height="450"
  
  scrolling="no"
  title="Keyboard easter egg"
  src="https://codepen.io/stanko/embed/KKwPJvL?default-tab=result"
  frameborder="no"
  loading="lazy"
  allowtransparency="true"
  allowfullscreen="true"
>
  See the Pen <a href="https://codepen.io/stanko/pen/KKwPJvL">
  Keyboard easter egg</a> by Stanko (<a href="https://codepen.io/stanko">@stanko</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Disable Cmd + Mouse Wheel (or Ctrl + Mouse Wheel) zoom in Firefox</title>
		<published>2019-10-25T00:00:00+00:00</published>
		<updated>2019-10-25T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/disable-cmd-mouse-wheel-zoom-in-firefox/" type="text/html"/>
		<id>https://muffinman.io/blog/disable-cmd-mouse-wheel-zoom-in-firefox/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Short Firefox tip to disable <code>Cmd + MouseWheel</code> zoom. There is a weird interaction with it. Therefore I decided to turn it off completely (I never used it anyway).</p>
<p>When I scroll a page using a trackpad and start switching tabs via <code>Cmd + Tab</code>, inertia scrolling would still be active, and the page I switched to gets zoomed in a lot (as I'm still holding <code>Cmd</code>). It really got on my nerves.</p>
<span id="continue-reading"></span>
<p>To disable it, you'll need to type <code>about:config</code> in your address bar. A
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  warning page
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>This page will allow you to change hidden browser settings, so be careful with it.<span class="sidenote__bracket">)</span></span>

may appear. Continue like the hacker you are, and search for <code>mousewheel.with_meta</code>. You should see something like this:</p>
<p><img src="/img/ff-about-config.png" alt="Firefox about:config page" /></p>
<p>We need to change <code>mousewheel.with_meta.action</code>, from <code>3</code> to <code>0</code>. To change it, click on the edit button (or just double click the value). And that is it!</p>
<p>For people who are not on Mac and want to disable <code>Control + Mouse Wheel</code>, follow the same procedure and change <code>mousewheel.with_control.action</code> from <code>3</code> to <code>0</code>.</p>
<p>If you ever want to switch it back on, find the same option, and change it back to <code>3</code>. Once you change a value, Firefox will give you a small reset button, just in case you forgot the default value.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Back to Firefox (Nightly)</title>
		<published>2019-09-26T00:00:00+00:00</published>
		<updated>2019-09-26T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/back-to-firefox/" type="text/html"/>
		<id>https://muffinman.io/blog/back-to-firefox/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Two years ago I wrote <a href="/blog/firefox-57-cpu-usage-is-insane/">this rant</a>. Firefox had a problem on MacOS on scaled resolutions, resulting in insanely high CPU usage and battery drain.</p>
<p>Issue is <a href="https://www.mozilla.org/en-US/firefox/70.0beta/releasenotes/">finally fixed</a>, and I'm happy to say I'm using it again. The fix is expected to land in the stable version in late October 2019, with the release of Firefox 70.</p>
<p>Meanwhile you can download <a href="https://www.mozilla.org/en-US/firefox/channel/desktop/#nightly">Firefox Nightly</a>, which is the freshest (and sometimes unstable) version of Firefox.</p>
<p><a href="https://www.mozilla.org/en-US/firefox/channel/desktop/#nightly"><img src="/img/ff-nightly.png" alt="Firefox Nightly" /></a></p>
<p>I'm really happy to be using Firefox again, and I think you should try it as well.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Running Staticman on Heroku</title>
		<published>2019-09-12T00:00:00+00:00</published>
		<updated>2019-09-12T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/running-staticman-on-heroku/" type="text/html"/>
		<id>https://muffinman.io/blog/running-staticman-on-heroku/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>I'm using <a href="https://github.com/eduardoboucas/staticman/issues/222">Staticman</a> as a comment system on this blog. Unfortunately public instance <a href="https://github.com/eduardoboucas/staticman/issues/294">can't handle</a> all of the requests coming in. That resulted in some readers being unable to post a comment.</p>
<p>That is why I decided to run my own instance on Heroku. It was easy to find this <a href="https://vincenttam.gitlab.io/post/2018-09-16-staticman-powered-gitlab-pages/2/">great article</a> describing the process thoroughly. But after following it and deploying Statamic to Heroku, I just couldn't make it work.</p>
<p>It took me a while until I found <a href="https://networkhobo.com/staticman-the-journey-continues">another article with a workaround</a>. Long story short, you need to use a specific version instead of the latest one.</p>
<p>In the first article in &quot;Stage 2&quot; in &quot;Step 7&quot; replace this:</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>git checkout -b production origin/dev
</span></code></pre>
<p>with this:</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>git checkout -b production 55d1430
</span></code></pre>
<p>That should be it. Now I have my own instance (running on a Heroku's free tier) and hopefully there will be no further issues with posting comments.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Three web development bookmarklets</title>
		<published>2019-08-17T00:00:00+00:00</published>
		<updated>2019-08-17T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/three-web-development-bookmarklets/" type="text/html"/>
		<id>https://muffinman.io/blog/three-web-development-bookmarklets/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Today I want to share three bookmarklets I love to use in development. You can add them to your browser, by creating a new bookmark and entering bookmarklet code instead of URL.
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  Clicking on a bookmarklet
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>I usually keep them in the bookmarks bar to make them easier to find.<span class="sidenote__bracket">)</span></span>

, will run the code snippet on the page you are currently on.</p>
<p>For each bookmarklet I added a button to try it on this page.</p>
<span id="continue-reading"></span><h2 id="find-elements-causing-horizontal-scroll">Find elements causing horizontal scroll<a
  class="header-anchor"
  href="#find-elements-causing-horizontal-scroll" aria-label="Anchor link for: find-elements-causing-horizontal-scroll"
  title="Anchor link for: find-elements-causing-horizontal-scroll"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I found this one long time ago, and I have been copy-pasting it to every new machine since. It is super practical and it will highlight and log all elements that are causing pesky horizontal page scroll.</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span>javascript:</span><span style="color:#c678dd;">void</span><span>(</span><span style="color:#c678dd;">function </span><span>() {
</span><span>  </span><span style="color:#c678dd;">var </span><span style="color:#e06c75;">documentWidth </span><span style="color:#c678dd;">= </span><span>document.documentElement.</span><span style="color:#e06c75;">offsetWidth</span><span>;
</span><span>  </span><span style="color:#c678dd;">var </span><span style="color:#e06c75;">treeWalker </span><span style="color:#c678dd;">= </span><span>document.</span><span style="color:#61afef;">createTreeWalker</span><span>(document.body, </span><span style="color:#e5c07b;">NodeFilter</span><span>.</span><span style="color:#e06c75;">SHOW_ELEMENT</span><span>);
</span><span>
</span><span>  </span><span style="color:#c678dd;">while </span><span>(</span><span style="color:#e06c75;">treeWalker</span><span>.</span><span style="color:#61afef;">nextNode</span><span>()) {
</span><span>    </span><span style="color:#c678dd;">var </span><span style="color:#e06c75;">rect </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">treeWalker</span><span>.</span><span style="color:#e06c75;">currentNode</span><span>.</span><span style="color:#61afef;">getBoundingClientRect</span><span>();
</span><span>
</span><span>    </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#e06c75;">rect</span><span>.right </span><span style="color:#c678dd;">&gt; </span><span style="color:#e06c75;">documentWidth </span><span style="color:#c678dd;">|| </span><span style="color:#e06c75;">rect</span><span>.left </span><span style="color:#c678dd;">&lt; </span><span style="color:#e5c07b;">0</span><span>) {
</span><span>      </span><span style="color:#e06c75;">treeWalker</span><span>.</span><span style="color:#e06c75;">currentNode</span><span>.style.</span><span style="color:#61afef;">setProperty</span><span>(</span><span style="color:#98c379;">&#39;outline&#39;</span><span>, </span><span style="color:#98c379;">&#39;1px dotted red&#39;</span><span>, </span><span style="color:#98c379;">&#39;important&#39;</span><span>);
</span><span>      </span><span style="color:#e5c07b;">console</span><span>.</span><span style="color:#61afef;">log</span><span>(</span><span style="color:#e06c75;">treeWalker</span><span>.</span><span style="color:#e06c75;">currentNode</span><span>);
</span><span>    }
</span><span>  };
</span><span>}());
</span></code></pre>
<p>One line version:</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span>javascript:</span><span style="color:#c678dd;">void</span><span>(</span><span style="color:#c678dd;">function </span><span>() { </span><span style="color:#c678dd;">var </span><span style="color:#e06c75;">documentWidth </span><span style="color:#c678dd;">= </span><span>document.documentElement.</span><span style="color:#e06c75;">offsetWidth</span><span>; </span><span style="color:#c678dd;">var </span><span style="color:#e06c75;">treeWalker </span><span style="color:#c678dd;">= </span><span>document.</span><span style="color:#61afef;">createTreeWalker</span><span>(document.body, </span><span style="color:#e5c07b;">NodeFilter</span><span>.</span><span style="color:#e06c75;">SHOW_ELEMENT</span><span>); </span><span style="color:#c678dd;">while </span><span>(</span><span style="color:#e06c75;">treeWalker</span><span>.</span><span style="color:#61afef;">nextNode</span><span>()) { </span><span style="color:#c678dd;">var </span><span style="color:#e06c75;">rect </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">treeWalker</span><span>.</span><span style="color:#e06c75;">currentNode</span><span>.</span><span style="color:#61afef;">getBoundingClientRect</span><span>(); </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#e06c75;">rect</span><span>.right </span><span style="color:#c678dd;">&gt; </span><span style="color:#e06c75;">documentWidth </span><span style="color:#c678dd;">|| </span><span style="color:#e06c75;">rect</span><span>.left </span><span style="color:#c678dd;">&lt; </span><span style="color:#e5c07b;">0</span><span>) { </span><span style="color:#e06c75;">treeWalker</span><span>.</span><span style="color:#e06c75;">currentNode</span><span>.style.</span><span style="color:#61afef;">setProperty</span><span>(</span><span style="color:#98c379;">&#39;outline&#39;</span><span>, </span><span style="color:#98c379;">&#39;1px dotted red&#39;</span><span>, </span><span style="color:#98c379;">&#39;important&#39;</span><span>); </span><span style="color:#e5c07b;">console</span><span>.</span><span style="color:#61afef;">log</span><span>(</span><span style="color:#e06c75;">treeWalker</span><span>.</span><span style="color:#e06c75;">currentNode</span><span>); } }; }());
</span></code></pre>
<p><button class="btn btn--sm btn--empty" onclick="javascript:void(function () { var documentWidth = document.documentElement.offsetWidth; var treeWalker = document.createTreeWalker(document.body, NodeFilter.SHOW_ELEMENT); while (treeWalker.nextNode()) { var rect = treeWalker.currentNode.getBoundingClientRect(); if (rect.right &gt; documentWidth || rect.left &lt; 0) { treeWalker.currentNode.style.setProperty('outline', '1px dotted red', 'important'); console.log(treeWalker.currentNode); } }; }());">Horizontal scroll detection</button></p>
<p><small>Please note that my site has <code>overflow-x: hidden</code> on the content area.</small></p>
<h2 id="make-page-editable">Make page editable<a
  class="header-anchor"
  href="#make-page-editable" aria-label="Anchor link for: make-page-editable"
  title="Anchor link for: make-page-editable"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>This will set <code>contenteditable</code> to true, allowing you to edit any text on the page. You can do the same thing using developer tools, but this one is just a little bit faster (and easier for non-developers).</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span>javascript:</span><span style="color:#c678dd;">void</span><span>(</span><span style="color:#c678dd;">function </span><span>() {
</span><span>  document.body.</span><span style="color:#e06c75;">contentEditable </span><span style="color:#c678dd;">= </span><span style="color:#98c379;">&#39;true&#39;</span><span>;
</span><span>  document.</span><span style="color:#e06c75;">designMode </span><span style="color:#c678dd;">= </span><span style="color:#98c379;">&#39;on&#39;</span><span>;
</span><span>}());
</span></code></pre>
<p>One line version:</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span>javascript:</span><span style="color:#c678dd;">void</span><span>(</span><span style="color:#c678dd;">function </span><span>() { document.body.</span><span style="color:#e06c75;">contentEditable </span><span style="color:#c678dd;">= </span><span style="color:#98c379;">&#39;true&#39;</span><span>; document.</span><span style="color:#e06c75;">designMode </span><span style="color:#c678dd;">= </span><span style="color:#98c379;">&#39;on&#39;</span><span>; }());
</span></code></pre>
<p><button class="btn btn--sm btn--empty" onclick="javascript:void(function () { document.body.contentEditable = 'true'; document.designMode = 'on'; }());">Edit page</button></p>
<h2 id="toggle-between-rtl-and-ltr-direction">Toggle between RTL and LTR direction<a
  class="header-anchor"
  href="#toggle-between-rtl-and-ltr-direction" aria-label="Anchor link for: toggle-between-rtl-and-ltr-direction"
  title="Anchor link for: toggle-between-rtl-and-ltr-direction"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Our QA team was doing this by hand when they wanted to test layouts for languages written from right to left. So I wrote them a tiny script to make it easier.</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span>javascript:</span><span style="color:#c678dd;">void</span><span>(</span><span style="color:#c678dd;">function </span><span>() {
</span><span>  </span><span style="color:#c678dd;">var </span><span style="color:#e06c75;">html </span><span style="color:#c678dd;">= </span><span>document.</span><span style="color:#61afef;">querySelector</span><span>(</span><span style="color:#98c379;">&#39;html&#39;</span><span>);
</span><span>  </span><span style="color:#c678dd;">var </span><span style="color:#e06c75;">dir </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">html</span><span>.</span><span style="color:#61afef;">getAttribute</span><span>(</span><span style="color:#98c379;">&#39;dir&#39;</span><span>);
</span><span>
</span><span>  </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#c678dd;">!</span><span style="color:#e06c75;">dir </span><span style="color:#c678dd;">|| </span><span style="color:#e06c75;">dir </span><span style="color:#c678dd;">== </span><span style="color:#98c379;">&#39;ltr&#39;</span><span>) {
</span><span>    </span><span style="color:#e06c75;">html</span><span>.</span><span style="color:#61afef;">setAttribute</span><span>(</span><span style="color:#98c379;">&#39;dir&#39;</span><span>, </span><span style="color:#98c379;">&#39;rtl&#39;</span><span>);
</span><span>  } </span><span style="color:#c678dd;">else </span><span>{
</span><span>    </span><span style="color:#e06c75;">html</span><span>.</span><span style="color:#61afef;">setAttribute</span><span>(</span><span style="color:#98c379;">&#39;dir&#39;</span><span>, </span><span style="color:#98c379;">&#39;ltr&#39;</span><span>);
</span><span>  }
</span><span>}());
</span></code></pre>
<p>One line version:</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span>javascript:</span><span style="color:#c678dd;">void</span><span>(</span><span style="color:#c678dd;">function </span><span>() { </span><span style="color:#c678dd;">var </span><span style="color:#e06c75;">html </span><span style="color:#c678dd;">= </span><span>document.</span><span style="color:#61afef;">querySelector</span><span>(</span><span style="color:#98c379;">&#39;html&#39;</span><span>); </span><span style="color:#c678dd;">var </span><span style="color:#e06c75;">dir </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">html</span><span>.</span><span style="color:#61afef;">getAttribute</span><span>(</span><span style="color:#98c379;">&#39;dir&#39;</span><span>); </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#c678dd;">!</span><span style="color:#e06c75;">dir </span><span style="color:#c678dd;">|| </span><span style="color:#e06c75;">dir </span><span style="color:#c678dd;">== </span><span style="color:#98c379;">&#39;ltr&#39;</span><span>) { </span><span style="color:#e06c75;">html</span><span>.</span><span style="color:#61afef;">setAttribute</span><span>(</span><span style="color:#98c379;">&#39;dir&#39;</span><span>, </span><span style="color:#98c379;">&#39;rtl&#39;</span><span>); } </span><span style="color:#c678dd;">else </span><span>{ </span><span style="color:#e06c75;">html</span><span>.</span><span style="color:#61afef;">setAttribute</span><span>(</span><span style="color:#98c379;">&#39;dir&#39;</span><span>, </span><span style="color:#98c379;">&#39;ltr&#39;</span><span>); } }());
</span></code></pre>
<p><button class="btn btn--sm btn--empty" onclick="javascript:void(function () { var html = document.querySelector('html'); var dir = html.getAttribute('dir'); if (!dir || dir == 'ltr') { html.setAttribute('dir', 'rtl'); } else { html.setAttribute('dir', 'ltr'); } }());">Toggle between RTL and LTR</button></p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Xiaomi AirDots review</title>
		<published>2019-08-16T00:00:00+00:00</published>
		<updated>2019-08-16T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/xiaomi-airdots-review/" type="text/html"/>
		<id>https://muffinman.io/blog/xiaomi-airdots-review/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Two weeks ago I got a pair of cheap Xiaomi's wireless earphones. This was an experiment to see if I like true wireless concept before buying something more expensive.</p>
<p><img src="/img/airdots.jpg" alt="Xiaomi AirDots earphones" /></p>
<span id="continue-reading"></span><h2 id="sound">Sound<a
  class="header-anchor"
  href="#sound" aria-label="Anchor link for: sound"
  title="Anchor link for: sound"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Most of the reviews out there are saying AirDots are lacking bass, but that sound is good overall.</p>
<p>Long story short - sound is bad. I don't like strong bass, but these earphones have no bass at all. Mid and high are acceptable, but lack of bass is really bad. I never thought I'll have to turn on “Bass Booster” equalizer preset, but I had to. Bass boosting eq makes them barely usable, but sound is still far from perfect.</p>
<p>Additionally Google Music on iOS has no equalizer setting nor does it use the system one. That makes Google Music with these earphones unusable for me.</p>
<h2 id="fit">Fit<a
  class="header-anchor"
  href="#fit" aria-label="Anchor link for: fit"
  title="Anchor link for: fit"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>They are pretty light and sit comfortable in my ear. If I use them for a longer period of time, they can get a little uncomfortable, but this is more of a personal feel. I don't like in-ear earphones, and this happens to me with almost any in-ear ones.</p>
<p>To me they are discrete enough and look good.</p>
<h2 id="conclusion">Conclusion<a
  class="header-anchor"
  href="#conclusion" aria-label="Anchor link for: conclusion"
  title="Anchor link for: conclusion"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>These earphones are really cheap (I got them for $17 on AliExpress), still I don't think they are worth buying. Sound is just not good. I would rather have decent wired earphones for the same price.</p>
<p>But the true wireless concept (plus a charging case) is brilliant. I'm definitely getting myself a pair of
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  better sounding ones.
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Probably AirPods because they are pretty much the only non in-ear ones. But I'm open to suggestions.<span class="sidenote__bracket">)</span></span>
</p>
<p>If true wireless is your main goal and you literally don't care about the sound, that might be the only reason to try them.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>CSS only sprite animations</title>
		<published>2019-07-05T00:00:00+00:00</published>
		<updated>2019-07-05T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/css-only-sprite-animations/" type="text/html"/>
		<id>https://muffinman.io/blog/css-only-sprite-animations/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>I haven't published anything in a while, which is a shame because I have a couple of good things to write about. That said, today's post is going to be a short one. I wasn't sure if theme is interesting enough. But in the end I decided to write it anyway. And it will help me get back in the writing shape.</p>
<p>While setting up a new project on Netlify, I was going through the logs and noticed they are using
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  old school
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>As far as I know people started using it back in the 80s.<span class="sidenote__bracket">)</span></span>

text only loader. It is a very simple animation swapping between four text characters (<code>—</code>, <code>\</code>, <code>|</code>, <code>/</code>).</p>
<p><img src="/img/retro-loader.gif" alt="Text loader animation" /></p>
<span id="continue-reading"></span>
<p>Haven't even checked if they are using gif or not, but immediately tried recreating it using CSS only.</p>
<h2 id="the-first-version">The first version<a
  class="header-anchor"
  href="#the-first-version" aria-label="Anchor link for: the-first-version"
  title="Anchor link for: the-first-version"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>The first thing I tried was to stack frames one of top of the other, and then animate every frame separately.</p>
<p>Animation will make element visible only for the duration of one frame. Then using <code>animation-delay</code> we can adjust each frame. Code for four frames looked something like this:</p>
<pre data-lang="scss" style="background-color:#282c34;color:#dcdfe4;" class="language-scss "><code class="language-scss" data-lang="scss"><span style="color:#e06c75;">$frame-duration</span><span>: </span><span style="color:#e5c07b;">125</span><span style="color:#c678dd;">ms</span><span>;
</span><span>
</span><span style="color:#c678dd;">@keyframes </span><span>frame-animation {
</span><span>  </span><span style="color:#e5c07b;">0</span><span style="color:#c678dd;">%</span><span>,
</span><span>  </span><span style="color:#e5c07b;">25</span><span style="color:#c678dd;">% </span><span>{
</span><span>    opacity: </span><span style="color:#e5c07b;">1</span><span>;
</span><span>  }
</span><span>  </span><span style="color:#5c6370;">// Make opacity transition from 1 to 0 as short as possible
</span><span>  </span><span style="color:#e5c07b;">25.01</span><span style="color:#c678dd;">% </span><span>{
</span><span>    opacity: </span><span style="color:#e5c07b;">0</span><span>;
</span><span>  }
</span><span>}
</span><span>
</span><span style="color:#5c6370;">// Add delay for each frame
</span><span style="color:#c678dd;">@for </span><span style="color:#e06c75;">$i </span><span style="color:#c678dd;">from </span><span style="color:#e5c07b;">1 </span><span style="color:#c678dd;">through </span><span style="color:#e5c07b;">4 </span><span>{
</span><span style="color:#c678dd;">  </span><span style="color:#e5c07b;">.Animation-frame:</span><span style="color:#c678dd;">nth-child(#{ $i }) </span><span>{
</span><span>    animation-delay: </span><span style="color:#e5c07b;">250</span><span style="color:#c678dd;">ms * </span><span>(</span><span style="color:#e06c75;">$i </span><span style="color:#c678dd;">- </span><span style="color:#e5c07b;">1</span><span>);
</span><span>  }
</span><span>}
</span></code></pre>
<p>This worked well for our retro loader with four frames. Then I tried to animate images in the same way and again it worked fine.</p>
<p>But if tab went to background, once you focus it back, animation would flicker before normalizing. My guess it happens because browsers optimize timers in background tabs. Plus I used twelve frames, and having twelve animations in a perfect sync sounds expensive.</p>
<p>Applying common hacks to activate hardware acceleration didn't help, so I went back to the drawing board.</p>
<h2 id="animation-steps-to-the-rescue">Animation steps to the rescue<a
  class="header-anchor"
  href="#animation-steps-to-the-rescue" aria-label="Anchor link for: animation-steps-to-the-rescue"
  title="Anchor link for: animation-steps-to-the-rescue"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>First order of business was to try to remove animations for individual frames, and use only one on the parent element. And to do it without JavaScript. Something like a slider, where slides are swapped without animation.</p>
<p>Then it hit me! I remembered seeing that CSS animations can use steps. So I searched for it and found out the syntax:</p>
<pre data-lang="scss" style="background-color:#282c34;color:#dcdfe4;" class="language-scss "><code class="language-scss" data-lang="scss"><span>  animation-timing-function: </span><span style="color:#61afef;">steps</span><span>(</span><span style="color:#e5c07b;">4</span><span>);
</span></code></pre>
<p>What MDN says about steps:</p>
<blockquote>
<p>Displays an animation iteration along n stops along the transition, displaying each stop for equal lengths of time.</p>
</blockquote>
<p>In other words, it allows us to create frame-by-frame animation by chopping down the animation to exact number of steps and switching between them.</p>
<p>This allows to apply only one animation on the wrapper element and cut it down to frames. You can see the code below, but I also created a <a href="https://codepen.io/stanko/pen/zVJvLa">template on codepen</a> you can play with. If you create something fun, please share it in the comments.</p>
<pre data-lang="scss" style="background-color:#282c34;color:#dcdfe4;" class="language-scss "><code class="language-scss" data-lang="scss"><span style="color:#e06c75;">$time</span><span>: </span><span style="color:#e5c07b;">1000</span><span style="color:#c678dd;">ms</span><span>;
</span><span style="color:#e06c75;">$number-of-frames</span><span>: </span><span style="color:#e5c07b;">10</span><span>;
</span><span style="color:#e06c75;">$frame-duration</span><span>: </span><span style="color:#e06c75;">$time </span><span style="color:#c678dd;">/ </span><span style="color:#e06c75;">$number-of-frames</span><span>;
</span><span>
</span><span style="color:#c678dd;">@keyframes </span><span>frame-animation {
</span><span>  </span><span style="color:#e5c07b;">100</span><span style="color:#c678dd;">% </span><span>{
</span><span>    transform: </span><span style="color:#61afef;">translateX</span><span>(</span><span style="color:#e5c07b;">-100</span><span style="color:#c678dd;">%</span><span>);
</span><span>  }
</span><span>}
</span><span>
</span><span style="color:#e5c07b;">.Animation </span><span>{
</span><span>  overflow: hidden;
</span><span>}
</span><span>
</span><span style="color:#e5c07b;">.Animation-frames </span><span>{
</span><span>  animation: </span><span style="color:#98c379;">frame-animation </span><span style="color:#e06c75;">$time </span><span>infinite;
</span><span>  animation-timing-function: </span><span style="color:#61afef;">steps</span><span>(</span><span style="color:#e06c75;">$number-of-frames</span><span>);
</span><span>  display: flex;
</span><span>  </span><span style="color:#5c6370;">// Frames wrapper is $number-of-frames wider than the animation itself
</span><span>  width: </span><span style="color:#e06c75;">$number-of-frames </span><span style="color:#c678dd;">* </span><span style="color:#e5c07b;">100</span><span style="color:#c678dd;">%</span><span>;
</span><span>}
</span><span>
</span><span style="color:#e5c07b;">.Animation-frame </span><span>{
</span><span>  display: block;
</span><span>  </span><span style="color:#5c6370;">// Frame should be same width as the animation, so we need to divide with $number-of-frames
</span><span>  flex-basis: </span><span style="color:#e5c07b;">100</span><span style="color:#c678dd;">% / </span><span style="color:#e06c75;">$number-of-frames</span><span>;
</span><span>  max-width: </span><span style="color:#e5c07b;">100</span><span style="color:#c678dd;">% / </span><span style="color:#e06c75;">$number-of-frames</span><span>;
</span><span>  width: </span><span style="color:#e5c07b;">100</span><span style="color:#c678dd;">% / </span><span style="color:#e06c75;">$number-of-frames</span><span>;
</span><span>}
</span></code></pre>
<h2 id="final-result">Final result<a
  class="header-anchor"
  href="#final-result" aria-label="Anchor link for: final-result"
  title="Anchor link for: final-result"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Retro loader I tried to replicate in the first place:</p>
<iframe
  height="300"
  
  scrolling="no"
  title="CSS only retro CLI loader"
  src="https://codepen.io/stanko/embed/XLYRQV?default-tab=result"
  frameborder="no"
  loading="lazy"
  allowtransparency="true"
  allowfullscreen="true"
>
  See the Pen <a href="https://codepen.io/stanko/pen/XLYRQV">
  CSS only retro CLI loader</a> by Stanko (<a href="https://codepen.io/stanko">@stanko</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
<p>After I've done the retro loader, I thought it would be fun to animate some images, preferably
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  pixel art
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>I loooove pixel art<span class="sidenote__bracket">)</span></span>
.
So I found this nifty <a href="https://www.artstation.com/artwork/YEJeY">Rick and Morty animation</a> and animated it in CSS.</p>
<iframe
  height="500"
  
  scrolling="no"
  title="CSS Frame animation (Rick and Morty)"
  src="https://codepen.io/stanko/embed/GbBqwZ?default-tab=result"
  frameborder="no"
  loading="lazy"
  allowtransparency="true"
  allowfullscreen="true"
>
  See the Pen <a href="https://codepen.io/stanko/pen/GbBqwZ">
  CSS Frame animation (Rick and Morty)</a> by Stanko (<a href="https://codepen.io/stanko">@stanko</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
<h2 id="conclusion">Conclusion<a
  class="header-anchor"
  href="#conclusion" aria-label="Anchor link for: conclusion"
  title="Anchor link for: conclusion"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Primarily I did it for fun and to challenge myself.</p>
<p>And you are probably not going to use it on a daily basis, but this method can actually be useful. Cool thing is that animation frame can be
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  anything
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Well, anything you can create in HTML :)<span class="sidenote__bracket">)</span></span>

, not just images or text. Although if you want to use images, it might be smarter to use a sprite instead of individual frames.</p>
<p>If you end up using it, I would love to see the results.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Accessible range slider</title>
		<published>2019-05-01T00:00:00+00:00</published>
		<updated>2019-05-01T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/accessible-range-slider/" type="text/html"/>
		<id>https://muffinman.io/blog/accessible-range-slider/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>This time I want to share a small range slider (progress bar) I built. Check the <a href="http://muffinman.io/aria-progress-range-slider/">demo</a>. Code and documentation are available <a href="https://github.com/Stanko/aria-progress-range-slider">here</a>.</p>
<p><a href="http://muffinman.io/aria-progress-range-slider/"><img src="/img/range-slider.png" alt="Range slider screenshot" /></a></p>
<p>Same story again, on a React project we needed a media progress bar, and I ended up writing one myself.</p>
<p>Why I didn't like anything I found? Well, everything I tried was missing one of the things we considered mandatory - good touch support, accessibility (aria attributes, keyboard control), callbacks or easy styling.</p>
<span id="continue-reading"></span>
<p>On this specific project we went with <a href="https://material-ui.com/lab/slider/">Material-UI's slider</a>, but it is still in their beta (lab) phase and it has couple of glitches. Soon we are going to replace it with the one I built.</p>
<h2 id="accessibility">Accessibility<a
  class="header-anchor"
  href="#accessibility" aria-label="Anchor link for: accessibility"
  title="Anchor link for: accessibility"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>This range slider is the first library I wrote with accessibility-first mindset. That is something that I want to pursue and promote more. If you start with basic accessibility and build features around it, it will be much easier than just adding accessibility stuff
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  when library is complete.
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Similar like it goes with tests. I do it myself, too - I get excited about the problem, start hacking, and couple of hours later I have a decent codebase and zero tests.<span class="sidenote__bracket">)</span></span>
</p>
<h2 id="features">Features<a
  class="header-anchor"
  href="#features" aria-label="Anchor link for: features"
  title="Anchor link for: features"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I started using <a href="https://www.w3.org/TR/wai-aria-practices/examples/slider/slider-1.html">this example</a> and added more features. And I would love to mention a few:</p>
<ul>
<li>Fully accessible (aria attributes and keyboard control)</li>
<li>Great touch support, actual hitbox area is bigger than track and handle</li>
<li>Two tooltips, one for the current value, and the other shown on hover which shows the value that will be set on click</li>
<li>Additional &quot;buffer bar&quot; that is controlled by the user (great for media players)</li>
<li>Callback system</li>
<li>Easy to style (I plan to add more themes)</li>
</ul>
<p>At the moment, only plain JavaScript version is available, but I plan to add a React wrapper. And while we are talking about accessible React libraries, you should check David Clark's work:</p>
<ul>
<li><a href="https://github.com/davidtheclark/react-aria-modal">react-aria-modal</a></li>
<li><a href="https://github.com/davidtheclark/react-aria-menubutton">react-aria-menubutton</a></li>
<li><a href="https://github.com/davidtheclark/react-aria-tabpanel">react-aria-tabpanel</a></li>
</ul>
<p>He has a bunch of other great libraries, be sure to check them out.</p>
<hr />
<p>As usual it is released under MIT license and code is available on <a href="https://github.com/Stanko/aria-progress-range-slider">GitHub</a>. Let me know what you think and feel free to open an issue or submit a pull request.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Hiding body scrollbars using CSS</title>
		<published>2019-03-02T00:00:00+00:00</published>
		<updated>2019-03-02T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/hiding-body-scrollbars-using-css/" type="text/html"/>
		<id>https://muffinman.io/blog/hiding-body-scrollbars-using-css/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Let me start with a little disclaimer. Just because you can, doesn't mean you should use it. Hiding scrollbars can be bad for accessibility and user experience.</p>
<p>But there are rare cases where it makes sense, usually when you have scrolling effects or when modal is opened. So use it wisely.</p>
<p>Check <a href="/demos/hide-body-scrollbars/">the demo</a>. And find the cross browser code below:</p>
<span id="continue-reading"></span><pre data-lang="scss" style="background-color:#282c34;color:#dcdfe4;" class="language-scss "><code class="language-scss" data-lang="scss"><span style="color:#e06c75;">html</span><span style="color:#c678dd;">,
</span><span style="color:#e06c75;">body </span><span>{
</span><span>  </span><span style="color:#5c6370;">/* Firefox */
</span><span>  scrollbar-width: none;
</span><span>  </span><span style="color:#5c6370;">/* IE 10+ */
</span><span>  -ms-overflow-style: none;
</span><span>}
</span><span>
</span><span style="color:#5c6370;">/* WebKit - Safari, Chrome, Opera */
</span><span style="color:#e06c75;">body</span><span style="color:#e5c07b;">::</span><span style="color:#c678dd;">-webkit-scrollbar </span><span>{
</span><span>  width: </span><span style="color:#e5c07b;">0</span><span>;
</span><span>  height: </span><span style="color:#e5c07b;">0</span><span>;
</span><span>}
</span></code></pre>
<p>Don't forget you can style scrollbars in webkit based browsers. Also you can use this code on any other element, not just body. Happy coding.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Internet Explorer 6 hacks, ten years after</title>
		<published>2019-02-25T00:00:00+00:00</published>
		<updated>2019-02-25T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/ie6-hacks-ten-years-after/" type="text/html"/>
		<id>https://muffinman.io/blog/ie6-hacks-ten-years-after/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Exactly ten years ago, on my <a href="http://rand.rs/">my friend</a>'s blog I published a blog post about Internet Explorer 6 CSS hacks. I remembered it recently, and thought it would be really cool if I republished that same post, on it's 10th anniversary.</p>
<p>I added comments about the hacks from today's perspective to give you some context. Cited parts are from the original post. Younger developers may find some things unbelievable, because browsers came a long way in the last ten years :)</p>
<p>So here it is.</p>
<span id="continue-reading"></span><h2 id="calculating-width-and-height">Calculating <code>width</code> and <code>height</code><a
  class="header-anchor"
  href="#calculating-width-and-height" aria-label="Anchor link for: calculating-width-and-height"
  title="Anchor link for: calculating-width-and-height"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<blockquote>
<p>All browsers (but IE) are calculating element's width (and height) using the following formula:</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>width + padding + border-width
</span></code></pre>
<p>While IE is using <code>width</code> and subtracts border width and padding from it. Which actually makes sense.
There are lot of different solutions to normalize this, and this is the one I'm using:</p>
<pre data-lang="css" style="background-color:#282c34;color:#dcdfe4;" class="language-css "><code class="language-css" data-lang="css"><span style="color:#e5c07b;">.element </span><span>{
</span><span>  border: </span><span style="color:#e5c07b;">2</span><span style="color:#c678dd;">px </span><span>solid black;
</span><span>  padding: </span><span style="color:#e5c07b;">8</span><span style="color:#c678dd;">px</span><span>;
</span><span>
</span><span>  </span><span style="color:#5c6370;">/* this line will be read by all browsers */
</span><span>  width: </span><span style="color:#e5c07b;">400</span><span style="color:#c678dd;">px</span><span>;
</span><span>  </span><span style="color:#5c6370;">/* but this one, due to inline comments will be skipped by IE */
</span><span>  width</span><span style="color:#5c6370;">/**/</span><span>:</span><span style="color:#5c6370;">/**/</span><span style="color:#e5c07b;">380</span><span style="color:#c678dd;">px</span><span>;
</span><span>}
</span></code></pre>
<p>Internet Explorer will
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  skip the last line
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Note that my syntax highlighter didn't highlight <code>380px</code> as well.<span class="sidenote__bracket">)</span></span>
,
and use <code>400px</code> while everyone else will use <code>380px</code>.</p>
</blockquote>
<p>This was before <code>box-sizing</code> was supported, and only browser using <code>border-box</code> was IE while other browsers were using <code>content-box</code>.
Today, I think literally everyone are using <code>border-box</code> in their CSS reset.</p>
<h2 id="disappearing-text-and-images">Disappearing text and images<a
  class="header-anchor"
  href="#disappearing-text-and-images" aria-label="Anchor link for: disappearing-text-and-images"
  title="Anchor link for: disappearing-text-and-images"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<blockquote>
<p>This is one of the weirdest IE bugs. I never found out why it is happening. Randomly content will disappear, poof, and it is gone. Luckily, just add <code>position: relative</code> to the unfortunate element.</p>
</blockquote>
<p>To this day I don't know why this used to happen, and how <code>position: relative</code> fixes it.</p>
<h2 id="min-height-and-min-width"><code>min-height</code> and <code>min-width</code><a
  class="header-anchor"
  href="#min-height-and-min-width" aria-label="Anchor link for: min-height-and-min-width"
  title="Anchor link for: min-height-and-min-width"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<blockquote>
<p>IE doesn't support these attributes, but you can use this hacky quick fix:</p>
<pre data-lang="css" style="background-color:#282c34;color:#dcdfe4;" class="language-css "><code class="language-css" data-lang="css"><span style="color:#e5c07b;">.element </span><span>{
</span><span>  min-height: </span><span style="color:#e5c07b;">500</span><span style="color:#c678dd;">px</span><span>;
</span><span>  height: auto </span><span style="color:#c678dd;">!important</span><span>;
</span><span>  height: </span><span style="color:#e5c07b;">500</span><span style="color:#c678dd;">px</span><span>;
</span><span>}
</span></code></pre>
</blockquote>
<p>To be honest, I was looking at this one today, and I have no idea why and how this works.</p>
<h2 id="png-alpha-transparency">PNG Alpha transparency<a
  class="header-anchor"
  href="#png-alpha-transparency" aria-label="Anchor link for: png-alpha-transparency"
  title="Anchor link for: png-alpha-transparency"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>To understand this hack you'll need to read about <a href="https://stackoverflow.com/a/10767123">.htc</a> scripts.</p>
<blockquote>
<p>There are a bunch of scripts for this problem, and after trying a lot of them,
I have been using
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  TwinHelix script
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Page is <a href="https://www.twinhelix.com/css/iepngfix/">still online</a> &lt;3<span class="sidenote__bracket">)</span></span>

for quite some time.</p>
<p>Now I'm using
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  this one
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Unfortunately the link is dead.<span class="sidenote__bracket">)</span></span>

It is enough to include it on you page. Only drawback is that it doesn't support background images. SO you'll need to stick with jpegs and gifs for backgrounds.</p>
<p>UPDATE: try <a href="https://web.archive.org/web/20101021190007/http://labs.unitinteractive.com/unitpngfix.php">this solution</a> as well, it seems the best so far.</p>
</blockquote>
<p>Back then alpha transparency wasn't working in
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  IE
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Nor did CSS border radius, shadows, gradiends, transforms...<span class="sidenote__bracket">)</span></span>

.</p>
<h2 id="hover-problem"><code>:hover</code> problem<a
  class="header-anchor"
  href="#hover-problem" aria-label="Anchor link for: hover-problem"
  title="Anchor link for: hover-problem"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<blockquote>
<p><a href="https://peterned.home.xs4all.nl/csshover.html">Here</a> you can find a script which solves this problem. You'll need to include it on the page, and add this to your CSS file:</p>
<pre data-lang="css" style="background-color:#282c34;color:#dcdfe4;" class="language-css "><code class="language-css" data-lang="css"><span style="color:#e06c75;">body </span><span>{
</span><span>  behavior: </span><span style="color:#61afef;">url</span><span>(</span><span style="color:#98c379;">&quot;csshover3.htc&quot;</span><span>);
</span><span>}
</span></code></pre>
<p>If you can't find your way around it, the page has a detailed explanation.</p>
</blockquote>
<p>IE6 did not support <code>:hover</code> behavior on all elements. But only on elements like links and buttons.</p>
<h2 id="double-margins">Double margins<a
  class="header-anchor"
  href="#double-margins" aria-label="Anchor link for: double-margins"
  title="Anchor link for: double-margins"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>In some cases, you would just end up with double margins on elements, with no particular reason.</p>
<blockquote>
<p>When IE6 double your margins on an element, just apply <code>display: inline</code> to the element.</p>
</blockquote>
<p>This is not the best hack, because it will influence your layout. But it was either that or having double margins.</p>
<p>Hopefully you enjoyed this little time travel with me. Although it was hard browser to develop for, reading my old post have put a smile on my face. It is a great reminder how lucky we are today - how much browsers evolved and how good today's frontend tooling is.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Fake audio spectrum, using perlin noise</title>
		<published>2019-02-09T00:00:00+00:00</published>
		<updated>2019-02-09T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/fake-audio-spectrum-using-perlin-noise/" type="text/html"/>
		<id>https://muffinman.io/blog/fake-audio-spectrum-using-perlin-noise/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Few days ago, I was chatting with our design team, and we were wondering how hard would be to create a fake audio spectrum (that mimics human speech) and visualize it. I immediately said it should be easy, and that I will play with it over the weekend. Of course, I didn't wait for the weekend, but wrote it the same evening. It was fairly straightforward, but it had few gotchas.</p>
<h2 id="result">Result<a
  class="header-anchor"
  href="#result" aria-label="Anchor link for: result"
  title="Anchor link for: result"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Before you start playing with the checkboxes I advise you to read the rest of this post.</p>
<div class="Spectrum"></div>
<label style="display: block; display: flex; align-items: center; font-size: 0.8em">
  <input type="checkbox" class="Spectrum-checkbox Spectrum-checkbox--random" checked="true" style="margin-right: 0.2em" />
  Use random value
</label>
<label style="display: block; display: flex; align-items: center; font-size: 0.8em">
  <input type="checkbox" class="Spectrum-checkbox Spectrum-checkbox--sample" checked="true" style="margin-right: 0.2em" />
  Use static sample
</label>
<label style="display: block; display: flex; align-items: center; font-size: 0.8em">
  <input type="checkbox" class="Spectrum-checkbox Spectrum-checkbox--perlin" checked="true" style="margin-right: 0.2em" />
  Use perlin noise value
</label>
<style>
.Spectrum {
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  height: 300px;
}

.Spectrum-segment {
  background: #345;
  margin: 0 2px;
  height: 100%;
  transition: transform 125ms linear;
  width: 4px;
}
</style>
<script src="/examples/audio-spectrum.js"></script>
<span id="continue-reading"></span><h2 id="implementation">Implementation<a
  class="header-anchor"
  href="#implementation" aria-label="Anchor link for: implementation"
  title="Anchor link for: implementation"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>My initial idea was to analyze couple of audio files to extract the
{{ sidenote(text=&quot;average values&quot;, note=&quot;
Try disabling all checkboxes but &quot;static&quot;.
&quot;) }}
for the spectrum. Then combine it with the data from this great post about <a href="https://erikbern.com/2017/02/01/language-pitch.html">language pitch</a>. At the end, I ended up tweaking values to make it &quot;look better&quot;, based only on my personal feel.</p>
<p>Only thing left was to multiple the values I got with the
{{ sidenote(text=&quot;randomly generated value.&quot;, note=&quot;
Enable &quot;random&quot; and &quot;static&quot; checkboxes and disable the &quot;perlin&quot; one to see how it looks. It kinda works, but it feel too random.
&quot;) }}</p>
<h3 id="perlin-noise">Perlin noise<a
  class="header-anchor"
  href="#perlin-noise" aria-label="Anchor link for: perlin-noise"
  title="Anchor link for: perlin-noise"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>But before I started, I asked my colleagues for ideas, and I got some great feedback. One of the suggestions was to use <a href="https://en.wikipedia.org/wiki/Perlin_noise">Perlin noise</a>. I've never heard of it, so I did some reading.</p>
<blockquote>
<p>Perlin Noise is a technique used to produce natural appearing textures on computer generated surfaces for motion picture visual effects.</p>
</blockquote>
<p>Ken Perlin was frustrated by machine-like look of computer graphics at the time, and created a gradient noise algorithm.  It is basically a pseudo-random generator which outputs more
{{ sidenote(text=&quot;nature like patterns&quot;, note=&quot;
Disable &quot;random&quot; and play with the other two checkboxes to see how it feels.
&quot;) }}.</p>
<p>That seemed like a great way to improve my random only solution.</p>
<p>There are multiple JavaScript implementations, but I ended using <a href="https://codepen.io/anon/pen/vaRdGp">this one</a> as it was really simple and I didn't need 2D or 3D noise.</p>
<h3 id="putting-everything-together">Putting everything together<a
  class="header-anchor"
  href="#putting-everything-together" aria-label="Anchor link for: putting-everything-together"
  title="Anchor link for: putting-everything-together"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Now when I had everything I needed, it was easy to write the actual code. Working demo was done really quickly. Then I started playing with values and tweaking them. Finally I was satisfied with the result. It still feels a little bit too smooth and unnatural. But I didn't mind it that much, I left it as something that can be improved, along with different speed for jumps and drops.</p>
<p>To animate things I ended up using CSS transforms plus flexbox, as it was the easiest way I could think of. Using canvas probably could probably improve performance, but this was a proof of concept and I didn't bother with it.</p>
<p>Code can be found on <a href="https://codepen.io/stanko/pen/mvprzX">Codepen</a>. Have fun!</p>
<hr />
<p>We probably won't use this one on the real project, but it's about the journey, not the destination. I had a lot of fun and I learned new things. And that is the main reason I enjoy research and proof of concepts so much.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>One million npm downloads</title>
		<published>2018-12-04T00:00:00+00:00</published>
		<updated>2018-12-04T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/one-million-npm-downloads/" type="text/html"/>
		<id>https://muffinman.io/blog/one-million-npm-downloads/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>I want to brag a little - my npm packages have been downloaded more than
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  1 million times
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Stats are coming from <a href="https://npm-stat.com/charts.html?author=stanko&amp;from=2018-01-01&amp;to=2018-12-31">npm-stat.com</a>.<span class="sidenote__bracket">)</span></span>

this year!</p>
<p><img src="/img/1m.png" alt="Image showing yearly download stats of my npm packages" /></p>
<p>And I finally got a real domain:</p>
<p><a href="https://muffinman.io/">https://muffinman.io/</a></p>
<p>I've been quiet for the last couple of months. Mostly because I was busy with other things, both work and personal. But I do have a few small side projects I will be sharing soon.</p>
<p>Stay tuned!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>You can fix lumpy Joy-Con using hair dryer</title>
		<published>2018-11-10T00:00:00+00:00</published>
		<updated>2018-11-10T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/fix-lumpy-joy-con-using-hair-dryer/" type="text/html"/>
		<id>https://muffinman.io/blog/fix-lumpy-joy-con-using-hair-dryer/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>I love my
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  Nintendo Switch
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>I have a huge draft about Switch, and how it have put the fun back in gaming for me. It takes me forever to publish it.<span class="sidenote__bracket">)</span></span>

Unfortunately, tonight I noticed that one of my Joy-Cons has weird lumps on it.</p>
<p><img src="/img/joycon.jpg" alt="Lumpy Nintendo Switch Joy-Con" /></p>
<p>(This is the image from the internet, not mine.)</p>
<p>On multiple forum threads, people suggested using hair dryer to fix it. But nobody did explain how. I tried it, and in couple of minutes I managed to get it, and here is how I did it.</p>
<p>There are tiny inserts in the cap, and they need to go in to the tiny holes on the joystick. I had three of them fall out. To fix it, just heat it with the hair dryer (I did it for about ten seconds), carefully adjust one insert and rub it a little bit until it falls in. Repeat for each insert.</p>
<p>It was much easier than I thought it would be (before heating it felt impossible). Hopefully they won't fall again, but I will probably get thumb grips to be sure.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>JSON.stringify removes undefined, how to keep it</title>
		<published>2018-10-01T00:00:00+00:00</published>
		<updated>2018-10-01T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/json-stringify-removes-undefined/" type="text/html"/>
		<id>https://muffinman.io/blog/json-stringify-removes-undefined/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>This is something I keep rediscovering, because I keep forgetting it. <code>JSON.stringify</code> will omit all object attributes that are <code>undefined</code>.</p>
<p>In most cases, it doesn't really matter, because if we parse that string back, and try to access that attribute - it will be <code>undefined</code> by design. Check the example below:</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#c678dd;">const </span><span style="color:#e06c75;">user </span><span style="color:#c678dd;">= </span><span>{ name: </span><span style="color:#98c379;">&#39;Stanko&#39;</span><span>, phone: </span><span style="color:#e5c07b;">undefined </span><span>};
</span><span style="color:#e06c75;">user</span><span>.</span><span style="color:#e06c75;">phone</span><span>; </span><span style="color:#5c6370;">// -&gt; undefined
</span><span>
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">stringifiedUser </span><span style="color:#c678dd;">= </span><span>JSON.</span><span style="color:#61afef;">stringify</span><span>(</span><span style="color:#e06c75;">user</span><span>); </span><span style="color:#5c6370;">// -&gt; &quot;{\&quot;name\&quot;:\&quot;Stanko\&quot;}&quot;
</span><span>
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">parsedUser </span><span style="color:#c678dd;">= </span><span>JSON.</span><span style="color:#61afef;">parse</span><span>(</span><span style="color:#e06c75;">stringifiedUser</span><span>) </span><span style="color:#5c6370;">// -&gt; { name: &quot;Stanko&quot; }
</span><span>
</span><span style="color:#5c6370;">// At the end it behaves the same
</span><span style="color:#e06c75;">parsedUser</span><span>.</span><span style="color:#e06c75;">phone</span><span>; </span><span style="color:#5c6370;">// -&gt; undefined
</span></code></pre>
<span id="continue-reading"></span><h3 id="why-should-we-care-then">Why should we care then?<a
  class="header-anchor"
  href="#why-should-we-care-then" aria-label="Anchor link for: why-should-we-care-then"
  title="Anchor link for: why-should-we-care-then"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>In most scenarios you shouldn't. But for me, one case keeps popping up - sending http requests. Request body is a string, so we need to stringify our data.</p>
<p>In certain cases we want server to be aware that some data has been explicitly removed, so it can be removed from the database as well. This is where dropping <code>undefined</code> can cause problems.</p>
<p>Few days ago, one of my clients had a question about <a href="https://github.com/final-form/react-final-form">React Final Form</a>. Problem was that Final Form returns <code>undefined</code> for the values that have been removed by the user. As you can imagine, this was a problem, when they stringified form values <code>undefined</code> fields were omitted and server wasn't aware that the field was removed.</p>
<h2 id="using-replacer-parameter">Using <code>replacer</code> parameter<a
  class="header-anchor"
  href="#using-replacer-parameter" aria-label="Anchor link for: using-replacer-parameter"
  title="Anchor link for: using-replacer-parameter"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Luckily <code>JSON.stringify</code> accepts  <code>replacer</code> function as a
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  second parameter
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Third one is <code>space</code>, number of spaces or a string to be used for indentation<span class="sidenote__bracket">)</span></span>
.
Function accepts two parameters, current <code>key</code> and <code>value</code> being stringified. This allows us to replace any value, in our case <code>undefined</code>.</p>
<p>We just need to check if the value is <code>undefined</code> and return <code>null</code>:</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#c678dd;">const </span><span style="color:#e06c75;">user </span><span style="color:#c678dd;">= </span><span>{ name: </span><span style="color:#98c379;">&#39;Stanko&#39;</span><span>, phone: </span><span style="color:#e5c07b;">undefined </span><span>};
</span><span>
</span><span style="color:#c678dd;">const </span><span style="color:#61afef;">replacer </span><span style="color:#c678dd;">= </span><span>(</span><span style="color:#e06c75;">key</span><span>, </span><span style="color:#e06c75;">value</span><span>) </span><span style="color:#c678dd;">=&gt;
</span><span>  </span><span style="color:#c678dd;">typeof </span><span style="color:#e06c75;">value </span><span style="color:#c678dd;">=== </span><span style="color:#98c379;">&#39;undefined&#39; </span><span style="color:#c678dd;">? </span><span style="color:#e5c07b;">null </span><span style="color:#c678dd;">: </span><span style="color:#e06c75;">value</span><span>;
</span><span>
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">stringified </span><span style="color:#c678dd;">= </span><span>JSON.</span><span style="color:#61afef;">stringify</span><span>(</span><span style="color:#e06c75;">user</span><span>, </span><span style="color:#e06c75;">replacer</span><span>); </span><span style="color:#5c6370;">// -&gt; &quot;{\&quot;name\&quot;:\&quot;Stanko\&quot;,\&quot;phone\&quot;:null}&quot;
</span></code></pre>
<p>This is one example where replacer comes in handy. It can also be practical when stringifying complex objects and getting <code>TypeError: Converting circular structure to JSON</code>. It this case, we need to write custom replacer which will take care of circular references.</p>
<hr />
<p>This post ended up being a bit longer than I planned, but I hope it was useful.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Flex justify content equally distanced items</title>
		<published>2018-09-07T00:00:00+00:00</published>
		<updated>2018-09-07T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/flex-justify-content-equally-distanced-items/" type="text/html"/>
		<id>https://muffinman.io/blog/flex-justify-content-equally-distanced-items/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>I want to share a hack (or a trick if you prefer) my colleague Marko showed me today.</p>
<p>What is the problem? We want our flex items to be equally distanced between each other and from the parent's edge. Unforunately
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  <code>space-evenly</code> 
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>I wasn't aware of this property, thanks Marc for mentioning it in the comment below.<span class="sidenote__bracket">)</span></span>

is <a href="https://caniuse.com/#search=space-evenly">not supported in IE and Edge</a>. And <code>space-around</code> or <code>space-between</code> won't work.</p>
<p>You can see what we are trying to achieve in the first row, and how the latter two are behaving.</p>
<p><img src="/img/flex-justify-content.png" alt="Flex justify content examples" /></p>
<span id="continue-reading"></span>
<p>Trick is really simple, use <code>space-between</code> and add empty pseudo elements (<code>::before</code> and <code>::after</code>) to the parent element. Pseudo elements have no width, but they are still &quot;pushing&quot; real elements from themselves.</p>
<pre data-lang="scss" style="background-color:#282c34;color:#dcdfe4;" class="language-scss "><code class="language-scss" data-lang="scss"><span style="color:#e5c07b;">.wrapper </span><span>{
</span><span>  display: flex;
</span><span>  justify-content: space-between;
</span><span>}
</span><span>
</span><span style="color:#e5c07b;">.wrapper::</span><span style="color:#c678dd;">before,
</span><span style="color:#e5c07b;">.wrapper::</span><span style="color:#c678dd;">after </span><span>{
</span><span>  content: </span><span style="color:#98c379;">&#39;&#39;</span><span>;
</span><span>}
</span></code></pre>
<p>This hack works with dynamic number of elements, dynamic widths and for any flex direction.</p>
<p>You can see it in the action below:</p>
<iframe
  height="400"
  
  scrolling="no"
  title="Flex items equally distanced from each other, as well from the parent&#x27;s edge"
  src="https://codepen.io/stanko/embed/XPzmqg?default-tab=result"
  frameborder="no"
  loading="lazy"
  allowtransparency="true"
  allowfullscreen="true"
>
  See the Pen <a href="https://codepen.io/stanko/pen/XPzmqg">
  Flex items equally distanced from each other, as well from the parent&#x27;s edge</a> by Stanko (<a href="https://codepen.io/stanko">@stanko</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>CSS and SVG input animations</title>
		<published>2018-08-22T00:00:00+00:00</published>
		<updated>2018-08-22T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/css-and-svg-input-animations/" type="text/html"/>
		<id>https://muffinman.io/blog/css-and-svg-input-animations/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Yesterday, one of my colleagues shared <a href="https://uimovement.com/">UI Movement</a> website. It resulted in me playing with random animations trying to replicate mockups I liked.</p>
<p>Here are the results:</p>
<iframe
  height="300"
  
  scrolling="no"
  title="Fancy input, CSS animation"
  src="https://codepen.io/stanko/embed/PdwGEy?default-tab=result"
  frameborder="no"
  loading="lazy"
  allowtransparency="true"
  allowfullscreen="true"
>
  See the Pen <a href="https://codepen.io/stanko/pen/PdwGEy">
  Fancy input, CSS animation</a> by Stanko (<a href="https://codepen.io/stanko">@stanko</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
<iframe
  height="300"
  
  scrolling="no"
  title="Kick input, SVG animation"
  src="https://codepen.io/stanko/embed/KxwLpd?default-tab=result"
  frameborder="no"
  loading="lazy"
  allowtransparency="true"
  allowfullscreen="true"
>
  See the Pen <a href="https://codepen.io/stanko/pen/KxwLpd">
  Kick input, SVG animation</a> by Stanko (<a href="https://codepen.io/stanko">@stanko</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Fix for Chrome not rendering 1px borders</title>
		<published>2018-07-16T00:00:00+00:00</published>
		<updated>2018-07-16T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/fix-for-chrome-not-rendering-borders/" type="text/html"/>
		<id>https://muffinman.io/blog/fix-for-chrome-not-rendering-borders/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>This happened to me couple of times - borders would just randomly disappear in Chrome. All other browsers render them normally, but they just vanish in Chrome, on some screen sizes. Resizing helps sometimes, but I never was able to catch real pattern for reproducing.</p>
<p>If this ever happens to you, there is a (hacky) solution.
Change border width from <code>1px</code> to <code>thin</code>.</p>
<pre data-lang="css" style="background-color:#282c34;color:#dcdfe4;" class="language-css "><code class="language-css" data-lang="css"><span style="color:#c678dd;">border: 1px solid #000;
</span><span style="color:#5c6370;">/* change it to: */
</span><span style="color:#c678dd;">border: thin solid #000;
</span></code></pre>
<p>Although I don't like it, as it is a hacky workaround and I don't really understand why it works, it does solve the issue.</p>
<p>It seems that I'm not the only one having <a href="https://productforums.google.com/forum/#!topic/chrome/r1neUxqo5Gc">this problem</a>.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Add git version tag after publishing to npm</title>
		<published>2018-07-12T00:00:00+00:00</published>
		<updated>2018-07-12T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/add-git-version-tag-after-publishing-to-npm/" type="text/html"/>
		<id>https://muffinman.io/blog/add-git-version-tag-after-publishing-to-npm/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><h2 id="tl-dr">TL;DR<a
  class="header-anchor"
  href="#tl-dr" aria-label="Anchor link for: tl-dr"
  title="Anchor link for: tl-dr"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>If you just want to add git version tag after <code>npm publish</code> add this to your <code>package.json</code>:</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>&quot;postpublish&quot; : &quot;PACKAGE_VERSION=$(cat package.json | grep \\\&quot;version\\\&quot; | head -1 | awk -F: &#39;{ print $2 }&#39; | sed &#39;s/[\&quot;,]//g&#39; | tr -d &#39;[[:space:]]&#39;) &amp;&amp; git tag v$PACKAGE_VERSION &amp;&amp; git push --tags&quot;,
</span></code></pre>
<p>I advise you to read rest of the post to see what this code does. Because blindly coping code from the internet is probably not the smartest thing to do.</p>
<p><img src="/img/tags-on-github.png" alt="Git tags are used as releases on GitHub" /></p>
<span id="continue-reading"></span><h2 id="detailed-explanation">Detailed explanation<a
  class="header-anchor"
  href="#detailed-explanation" aria-label="Anchor link for: detailed-explanation"
  title="Anchor link for: detailed-explanation"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I maintain couple of npm packages, and I wanted to add git tags for every version I publish to npm. It makes things easier to find, and GitHub lists all of them on &quot;Releases&quot; page.</p>
<p>First thing to solve was to extract current version from <code>package.json</code>. I found a snippet on the internet and modified it slightly.</p>
<p>This piece of bash code prints out
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  version
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>e.g. <code>1.0.0</code> or <code>0.1.15</code><span class="sidenote__bracket">)</span></span>

from <code>package.json</code>.
It looks complicated, but don't worry, I explained everything bellow.</p>
<pre data-lang="sh" style="background-color:#282c34;color:#dcdfe4;" class="language-sh "><code class="language-sh" data-lang="sh"><span style="color:#e06c75;">PACKAGE_VERSION</span><span style="color:#c678dd;">=</span><span style="color:#98c379;">$(</span><span style="color:#e06c75;">cat</span><span style="color:#98c379;"> package.json \
</span><span style="color:#98c379;">  </span><span style="color:#c678dd;">| </span><span style="color:#e06c75;">grep </span><span style="color:#56b6c2;">\&quot;</span><span style="color:#98c379;">version</span><span style="color:#56b6c2;">\&quot; </span><span style="color:#98c379;">\
</span><span style="color:#98c379;">  </span><span style="color:#c678dd;">| </span><span style="color:#e06c75;">head -1 </span><span style="color:#98c379;">\
</span><span style="color:#98c379;">  </span><span style="color:#c678dd;">| </span><span style="color:#e06c75;">awk -F</span><span style="color:#98c379;">: &#39;{ print $2 }&#39; \
</span><span style="color:#98c379;">  </span><span style="color:#c678dd;">| </span><span style="color:#e06c75;">sed </span><span style="color:#98c379;">&#39;s/[&quot;,]//g&#39; \
</span><span style="color:#98c379;">  </span><span style="color:#c678dd;">| </span><span style="color:#e06c75;">tr -d </span><span style="color:#98c379;">&#39;[[:space:]]&#39;)
</span><span>
</span><span style="color:#61afef;">echo </span><span>$</span><span style="color:#e06c75;">PACKAGE_VERSION
</span></code></pre>
<p>I wasn't sure what certain lines do, so I did
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  some research
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Again, I don't like blindly pasting code snippets I find on the internet. You should be careful with that.<span class="sidenote__bracket">)</span></span>

and here is code explained.</p>
<pre data-lang="sh" style="background-color:#282c34;color:#dcdfe4;" class="language-sh "><code class="language-sh" data-lang="sh"><span style="color:#5c6370;"># prints whole package json
</span><span style="color:#e06c75;">cat</span><span> package.json
</span><span>
</span><span style="color:#5c6370;"># filters lines with &quot;version&quot; in them (can be multiple lines)
</span><span style="color:#e06c75;">grep </span><span style="color:#56b6c2;">\&quot;</span><span>version</span><span style="color:#56b6c2;">\&quot;
</span><span>
</span><span style="color:#5c6370;"># pulls only the first line (leaves us with &quot;version&quot;: &quot;2.0.3&quot;,)
</span><span style="color:#e06c75;">head -1
</span><span>
</span><span style="color:#5c6370;"># splits string by &quot;:&quot; and prints the second part (leaves us with &quot;2.0.3&quot;,)
</span><span style="color:#e06c75;">awk -F</span><span>: </span><span style="color:#98c379;">&#39;{ print $2 }&#39;
</span><span>
</span><span style="color:#5c6370;"># removes &quot; and , (leaves us with 2.0.3)
</span><span style="color:#e06c75;">sed </span><span style="color:#98c379;">&#39;s/[&quot;,]//g&#39;
</span><span>
</span><span style="color:#5c6370;"># removes any leftover spaces and new lines
</span><span style="color:#e06c75;">tr -d </span><span style="color:#98c379;">&#39;[[:space:]]&#39;
</span></code></pre>
<h2 id="add-it-to-package-json">Add it to package.json<a
  class="header-anchor"
  href="#add-it-to-package-json" aria-label="Anchor link for: add-it-to-package-json"
  title="Anchor link for: add-it-to-package-json"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>To automate this and add tag after every publish to npm, we'll use <code>postpublish</code> script. It is supported by npm, and it will be executed after every <code>npm publish</code>.</p>
<p>Only thing left to do is to add tag and push it to origin. I added letter <code>v</code> in front of version number (to make tag prettier).</p>
<pre data-lang="sh" style="background-color:#282c34;color:#dcdfe4;" class="language-sh "><code class="language-sh" data-lang="sh"><span style="color:#e06c75;">git</span><span> tag v$</span><span style="color:#e06c75;">PACKAGE_VERSION
</span><span style="color:#e06c75;">git</span><span> push</span><span style="color:#e06c75;"> --tags
</span></code></pre>
<p>After we put everything to one line (and escape quotes) it looks like this:</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>&quot;postpublish&quot; : &quot;PACKAGE_VERSION=$(cat package.json | grep \\\&quot;version\\\&quot; | head -1 | awk -F: &#39;{ print $2 }&#39; | sed &#39;s/[\&quot;,]//g&#39; | tr -d &#39;[[:space:]]&#39;) &amp;&amp; git tag v$PACKAGE_VERSION &amp;&amp; git push --tags&quot;,
</span></code></pre>
<p>Add it to <code>&quot;scripts&quot;</code> in you your <code>package.json</code>. And that's it, every time you do <code>npm publish</code> this script will add version tag and push it to origin.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>iOS Safari window.scrollTo &#x2F; getBoundingClientRect bug</title>
		<published>2018-06-01T00:00:00+00:00</published>
		<updated>2018-06-01T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/ios-safari-get-bounding-client-rect-bug/" type="text/html"/>
		<id>https://muffinman.io/blog/ios-safari-get-bounding-client-rect-bug/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>This is a weird one, and not something you will stumble into every day. But it is a bug nonetheless.</p>
<p>On iOS safari, if you use <code>window.scrollTo(0, y)</code> and <code>y</code> <em>is larger than document's maximum scroll</em>, any immediate call to <code>getBoundingClientRect</code> will return
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  incorrect <code>top</code> value.
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Same will happen for horizontal scroll and <code>left</code> value.<span class="sidenote__bracket">)</span></span>
</p>
<span id="continue-reading"></span>
<p>What happens is that browser thinks it actually scrolled to <code>y</code> and calculates element's position based on that scroll position. This happens only if <code>scrollTo</code> and <code>getBoundingClientRect</code> are executed one right after the other.</p>
<p>Not even <code>requestAnimationFrame</code> will save you. Adding a small timeout will, but that is not a viable solution.</p>
<p>Check the <a href="/demos/ios-safari-get-bounding-client-rect-bug/">demo</a>
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  to see it yourself.
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Unfortunately I couldn't include the iframe with the demo, because of the <a href="https://bugs.webkit.org/show_bug.cgi?id=172854">other bug</a>. Today's your lucky day, you got two bugs by the price of one!<span class="sidenote__bracket">)</span></span>
</p>
<p>I've tested it only on iOS 11, but I guess other versions are affected as well.</p>
<h2 id="solution">Solution<a
  class="header-anchor"
  href="#solution" aria-label="Anchor link for: solution"
  title="Anchor link for: solution"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Solution is easy, we need to determine maximum possible scroll and to cap our <code>y</code> value.</p>
<p>Helper method:</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#c678dd;">function </span><span style="color:#61afef;">getPageMaxScroll</span><span>() {
</span><span>  </span><span style="color:#5c6370;">// Cross browser page height detection is ugly
</span><span>  </span><span style="color:#c678dd;">return </span><span>Math.</span><span style="color:#61afef;">max</span><span>(
</span><span>    document.body.</span><span style="color:#e06c75;">scrollHeight</span><span>,
</span><span>    document.body.</span><span style="color:#e06c75;">offsetHeight</span><span>,
</span><span>    document.documentElement.</span><span style="color:#e06c75;">clientHeight</span><span>,
</span><span>    document.documentElement.</span><span style="color:#e06c75;">scrollHeight</span><span>,
</span><span>    document.documentElement.</span><span style="color:#e06c75;">offsetHeight
</span><span>  ) </span><span style="color:#c678dd;">- </span><span>window.innerHeight; </span><span style="color:#5c6370;">// Subtract viewport height
</span><span>}
</span></code></pre>
<p>Usage:</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#c678dd;">let </span><span style="color:#e06c75;">top </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">1000000</span><span>; </span><span style="color:#5c6370;">// Value larger than maximum scroll
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">maxScroll </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">getPageMaxScroll</span><span>();
</span><span>
</span><span style="color:#5c6370;">// Fix for bug on iOS devices
</span><span style="color:#5c6370;">// When top was larger than maximum page scroll
</span><span style="color:#5c6370;">// &quot;getBoundingClientRect&quot; would take that value into calculations
</span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#e06c75;">top </span><span style="color:#c678dd;">&gt; </span><span style="color:#e06c75;">maxScroll</span><span>) {
</span><span>  </span><span style="color:#e06c75;">top </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">maxScroll</span><span>;
</span><span>}
</span><span>
</span><span style="color:#5c6370;">// Scroll the window to the new position
</span><span>window.</span><span style="color:#61afef;">scrollTo</span><span>(</span><span style="color:#e5c07b;">0</span><span>, </span><span style="color:#e06c75;">top</span><span>);
</span><span>
</span><span style="color:#5c6370;">// Get the new position
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">rect </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">this</span><span>.</span><span style="color:#e06c75;">contentWrapperElement</span><span>.</span><span style="color:#61afef;">getBoundingClientRect</span><span>();
</span></code></pre>
<p>Hope that helps!</p>
<p>P.S. There is <a href="https://openradar.appspot.com/radar?id=6668472289329152">another bug</a> on iOS Safari with <code>getBoundingClientRect</code> and <code>position: fixed</code>, but that one is documented and tracked.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Small Mac apps I love</title>
		<published>2018-05-09T00:00:00+00:00</published>
		<updated>2018-05-09T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/small-mac-apps-i-love/" type="text/html"/>
		<id>https://muffinman.io/blog/small-mac-apps-i-love/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Recently I switched to a new laptop and had to set it up
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  to my likings.
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span><a href="https://xkcd.com/1806/">This comic</a> describes my setup pretty accurately.<span class="sidenote__bracket">)</span></span>

My setup includes a bunch of small apps I found over the years.
It seems that most people are not aware of these,
so I decided to share a list.</p>
<p>All of them are free (with the exception of TotalFinder),
and if you like them, consider donating to authors.</p>
<span id="continue-reading"></span>
<p>So here they are in the alphabetical order:</p>
<h3 id="appcleaner">AppCleaner<a
  class="header-anchor"
  href="#appcleaner" aria-label="Anchor link for: appcleaner"
  title="Anchor link for: appcleaner"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p><a href="https://freemacsoft.net/appcleaner/">AppCleaner website</a></p>
<blockquote>
<p>AppCleaner is a small application which allows you to thoroughly uninstall unwanted apps.</p>
</blockquote>
<p><img src="/img/mac-utils/appcleaner.png" alt="AppCleaner window" /></p>
<h3 id="copyclip">CopyClip<a
  class="header-anchor"
  href="#copyclip" aria-label="Anchor link for: copyclip"
  title="Anchor link for: copyclip"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p><a href="https://itunes.apple.com/us/app/copyclip-clipboard-history-manager/id595191960">CopyClip website</a></p>
<p>Simple clipboard manager, stores what you copied allowing you to quickly find it.</p>
<p><img src="/img/mac-utils/copyclip.png" alt="CopyClip clipboard history" /></p>
<h3 id="haptickey">HapticKey<a
  class="header-anchor"
  href="#haptickey" aria-label="Anchor link for: haptickey"
  title="Anchor link for: haptickey"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p><a href="https://github.com/niw/HapticKey">HapticKey website</a></p>
<p>This is a weird one.
I already ranted about the touch bar, and this app makes it a little bit more bearable.
Tapping on touch bar will make your trackpad vibrate(?!) to give you haptic feedback.
Give it a try and decide for yourself.</p>
<p><img src="/img/mac-utils/haptickey.png" alt="HapticKey" /></p>
<h3 id="itsycal">Itsycal<a
  class="header-anchor"
  href="#itsycal" aria-label="Anchor link for: itsycal"
  title="Anchor link for: itsycal"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p><a href="https://www.mowglii.com/itsycal/">Itsycal website</a></p>
<p>If you ever were annoyed by the fact Mac has no built-in calendar in the menu bar, you'll love Itsycal.
It is a tiny calendar with option to show your calendar events.</p>
<p>By default it displays small calendar icon, with current date in it.</p>
<p><img src="/img/mac-utils/itsycal-icon.png" alt="Itsycal with default date icon" /></p>
<p>Custom date formats are supported as well, allowing you replace Mac's clock completely.</p>
<p><img src="/img/mac-utils/itsycal.png" alt="Itsycal using custom date format" /></p>
<h3 id="spectacle">Spectacle<a
  class="header-anchor"
  href="#spectacle" aria-label="Anchor link for: spectacle"
  title="Anchor link for: spectacle"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p><a href="https://www.spectacleapp.com/">Spectacle website</a></p>
<p>Simple window manager - move windows around, across workspaces, resize them.
All that by using using customizable global shortcuts.</p>
<p><img src="/img/mac-utils/spectacle.png" alt="Spectacle main window" /></p>
<h3 id="the-unarchiver">The Unarchiver<a
  class="header-anchor"
  href="#the-unarchiver" aria-label="Anchor link for: the-unarchiver"
  title="Anchor link for: the-unarchiver"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p><a href="https://theunarchiver.com/">The Unarchiver website</a></p>
<p>Well, this is probably the
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  most popular
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>I just realized Unarchiver was acquired by MacPaw,
hopefully they'll keep it free and simple.<span class="sidenote__bracket">)</span></span>

on this list.
Unarchiver does exactly what it's name suggests.
It supports all of the archive formats you'll ever need.</p>
<h3 id="totalfinder-12-00">TotalFinder ($12.00)<a
  class="header-anchor"
  href="#totalfinder-12-00" aria-label="Anchor link for: totalfinder-12-00"
  title="Anchor link for: totalfinder-12-00"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p><a href="https://totalfinder.binaryage.com/">TotalFinder website</a></p>
<p>I always felt Finder is missing a lot of features.
TotalFinder and XtraFinder both fix that to an extent,
by adding things like tabs, dual mode, cut and more.</p>
<p><img src="/img/mac-utils/totalfinder.png" alt="TotalFinder dual mode" /></p>
<p>There is a catch - both application require <a href="https://totalfinder.binaryage.com/sip">system tweak</a>
to install. You need to disable System Integrity Protection
(don't worry, you can enable it once app is installed).</p>
<h3 id="xtrafinder">XtraFinder<a
  class="header-anchor"
  href="#xtrafinder" aria-label="Anchor link for: xtrafinder"
  title="Anchor link for: xtrafinder"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p><a href="https://www.trankynam.com/xtrafinder/">XtraFinder website</a></p>
<p>Pretty similar to TotalFinder, but free. I had some problems with it long ago
(can't remember what it was) so I switched to TotalFinder.
Haven't used in a long time, but you may want to give it a try.</p>
<p>Requires same <a href="https://www.trankynam.com/xtrafinder/sip.html">system tweak</a> as TotalFinder.</p>
<hr />
<h2 id="bash">Bash<a
  class="header-anchor"
  href="#bash" aria-label="Anchor link for: bash"
  title="Anchor link for: bash"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>As a bonus here are my two favorite bash tools.</p>
<h3 id="bash-it">Bash-it<a
  class="header-anchor"
  href="#bash-it" aria-label="Anchor link for: bash-it"
  title="Anchor link for: bash-it"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p><a href="https://github.com/Bash-it/bash-it">Bash-it website</a></p>
<p>This is a clone of oh-my-zsh for bash. Includes autocompletion, themes, aliases, custom functions and more.
I have been using for a few years now and migrating my config to every new machine I use.</p>
<h3 id="autojump">autojump<a
  class="header-anchor"
  href="#autojump" aria-label="Anchor link for: autojump"
  title="Anchor link for: autojump"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p><a href="https://github.com/wting/autojump">autojump website</a></p>
<p>This is pure awesomeness.</p>
<blockquote>
<p>autojump is a faster way to navigate your filesystem. It works by maintaining a database of the directories you use the most from the command line.</p>
</blockquote>
<p>Using provided <code>j</code> command, you can jump around filesystem using fuzzy search.
Autojump is smart, and it will favorize directories you visit more frequently.</p>
<p>For example <code>j stanko</code> will take me to my blog directory (<code>/Users/stanko/stanko.github.io</code>)
instead of my home folder (<code>/Users/stanko</code>) because I navigate to the prior one more often.</p>
<p>Note that directories must be visited first before they can be jumped to.</p>
<hr />
<p>Hopefully some of these will make your daily workflow easier.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>CSS only elastic hover effect</title>
		<published>2018-03-19T00:00:00+00:00</published>
		<updated>2018-03-19T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/elastic-hover-effect/" type="text/html"/>
		<id>https://muffinman.io/blog/elastic-hover-effect/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Some CSS fun. Lately I've stumbled upon couple of websites with elastic hover effect on buttons.
Each one was using SVG morphing, which is fine, but I was wondering how hard would it be to implement it in CSS.</p>
<p>It ended up up being pretty easy.</p>
<iframe
  height="500"
  
  scrolling="no"
  title="Elastic hover effect (CSS only)"
  src="https://codepen.io/stanko/embed/VXPeoP?default-tab=result"
  frameborder="no"
  loading="lazy"
  allowtransparency="true"
  allowfullscreen="true"
>
  See the Pen <a href="https://codepen.io/stanko/pen/VXPeoP">
  Elastic hover effect (CSS only)</a> by Stanko (<a href="https://codepen.io/stanko">@stanko</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
<span id="continue-reading"></span>
<p>I created four
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  pseudo elements
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Only two pseudo elements (<code>::before</code> and <code>::after</code>) can be created per element,
therefore each button has one additional div inside it.<span class="sidenote__bracket">)</span></span>
.
Each of these is ellipse, running along one edge of the button.
By default these are scaled to zero by relevant axis.
On hover, they scale back to their full size.</p>
<p>For effect, whole button zoom in a little bit.
Combine all of that with custom elastic bezier easing, and it looks quite convincing.
Wireframe version is included as well, to make it easier to see how it works.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Uploading files using &#x27;fetch&#x27; and &#x27;FormData&#x27;</title>
		<published>2018-03-19T00:00:00+00:00</published>
		<updated>2018-03-19T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/uploading-files-using-fetch-multipart-form-data/" type="text/html"/>
		<id>https://muffinman.io/blog/uploading-files-using-fetch-multipart-form-data/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Today I learned:</p>
<p>To upload files using <code>fetch</code> and
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  <code>FormData</code>
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span><code>FormData</code> is supported in IE10+.<span class="sidenote__bracket">)</span></span>

you <strong>must not</strong> set <code>Content-Type</code> header.</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#c678dd;">const </span><span style="color:#e06c75;">fileInput </span><span style="color:#c678dd;">= </span><span>document.</span><span style="color:#61afef;">querySelector</span><span>(</span><span style="color:#98c379;">&#39;#your-file-input&#39;</span><span>) ;
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">formData </span><span style="color:#c678dd;">= new </span><span>FormData();
</span><span>
</span><span style="color:#e06c75;">formData</span><span>.</span><span style="color:#61afef;">append</span><span>(</span><span style="color:#98c379;">&#39;file&#39;</span><span>, </span><span style="color:#e06c75;">fileInput</span><span>.</span><span style="color:#e06c75;">files</span><span>[</span><span style="color:#e5c07b;">0</span><span>]);
</span><span>
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">options </span><span style="color:#c678dd;">= </span><span>{
</span><span>  method: </span><span style="color:#98c379;">&#39;POST&#39;</span><span>,
</span><span>  body: </span><span style="color:#e06c75;">formData</span><span>,
</span><span>  </span><span style="color:#5c6370;">// If you add this, upload won&#39;t work
</span><span>  </span><span style="color:#5c6370;">// headers: {
</span><span>  </span><span style="color:#5c6370;">//   &#39;Content-Type&#39;: &#39;multipart/form-data&#39;,
</span><span>  </span><span style="color:#5c6370;">// }
</span><span>};
</span><span>
</span><span style="color:#61afef;">fetch</span><span>(</span><span style="color:#98c379;">&#39;your-upload-url&#39;</span><span>, </span><span style="color:#e06c75;">options</span><span>);
</span></code></pre>
<span id="continue-reading"></span><h2 id="problem-i-had">Problem I had<a
  class="header-anchor"
  href="#problem-i-had" aria-label="Anchor link for: problem-i-had"
  title="Anchor link for: problem-i-had"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>My API wrapper class has default content type header set to:</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>&#39;Content-Type&#39;: &#39;application/json&#39;
</span></code></pre>
<p>So I thought, to upload files using <code>FormData</code>, it would be enough to override it with:</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>&#39;Content-Type&#39;: &#39;multipart/form-data&#39;
</span></code></pre>
<p>But alas, it didn't work, server couldn't parse the files I was uploading.
I've wasted about half an hour, and then noticed that simple HTML form was setting something else:</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryIn312MOjBWdkffIM
</span></code></pre>
<p>It had this <code>boundary</code> thing I didn't know anything about.</p>
<p>Then I started searching around the internet and found the solution.
To set the correct boundary, I had to explicitly delete <code>Content-Type</code> header.
In that case browser will set the correct <code>boundary</code> itself.</p>
<p>Adding this line solved it.</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#5c6370;">// Remove &#39;Content-Type&#39; header to allow browser to add
</span><span style="color:#5c6370;">// along with the correct &#39;boundary&#39;
</span><span style="color:#c678dd;">delete </span><span style="color:#e06c75;">options</span><span>.headers[</span><span style="color:#98c379;">&#39;Content-Type&#39;</span><span>];
</span></code></pre>
<h2 id="explanation">Explanation<a
  class="header-anchor"
  href="#explanation" aria-label="Anchor link for: explanation"
  title="Anchor link for: explanation"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>What is <code>boundary</code> and why I had to <code>delete</code> the header?</p>
<p>Multipart form allow transfer of binary data,
therefore server needs a way to know where one field's data ends and where the next one starts.</p>
<p>That's where <code>boundary</code> comes in.
It defines a delimiter between fields we are sending in our request (similar to <code>&amp;</code> for GET requests).
You can define it yourself, but it is much easier to let browser do it for you.</p>
<p>Example payload:</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>------WebKitFormBoundaryIn312MOjBWdkffIM
</span><span>Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;my-image.jpg&quot;
</span><span>Content-Type: image/jpeg
</span><span>
</span><span>
</span><span>------WebKitFormBoundaryIn312MOjBWdkffIM
</span><span>Content-Disposition: form-data; name=&quot;field&quot;
</span><span>
</span><span>imagePortrait
</span><span>------WebKitFormBoundaryIn312MOjBWdkffIM--
</span></code></pre>
<p>That's why I had to manually delete existing header, as it didn't contain boundary,
and server was unable to parse the file correctly.</p>
<p>Read more about it on this <a href="https://stackoverflow.com/questions/3508338/what-is-the-boundary-in-multipart-form-data">StackOverflow question</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition">MDN</a>.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>JavaScript animation loop</title>
		<published>2018-03-18T00:00:00+00:00</published>
		<updated>2018-03-18T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/javascript-animation-loop/" type="text/html"/>
		<id>https://muffinman.io/blog/javascript-animation-loop/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>I've been really busy lately, doing both work and pet projects.
At the moment I'm playing with <a href="https://threejs.org/">three.js</a> trying to
<a href="https://codepen.io/stanko/full/jZROmX/">clone old DOS game</a> to JavaScript.
Games (and animations in general) need animation loop in which we are going to update the scene and re-render it.</p>
<p>Example animations are simplified and they just move a box 60px per second.
But the concepts applied are universal and can be used for more complicated real life cases.</p>
<span id="continue-reading"></span><h2 id="timing-problem">Timing problem<a
  class="header-anchor"
  href="#timing-problem" aria-label="Anchor link for: timing-problem"
  title="Anchor link for: timing-problem"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>We all know that animating should be done using <code>requestAnimationFrame</code>.
My first attempt ended up being naive and it looked something like this:</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#c678dd;">const </span><span style="color:#e06c75;">box </span><span style="color:#c678dd;">= </span><span>document.</span><span style="color:#61afef;">querySelector</span><span>(</span><span style="color:#98c379;">&#39;.Box&#39;</span><span>);
</span><span style="color:#5c6370;">// Initial position
</span><span style="color:#c678dd;">let </span><span style="color:#e06c75;">position </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">0</span><span>;
</span><span>
</span><span style="color:#c678dd;">function </span><span style="color:#61afef;">animate</span><span>() {
</span><span>  </span><span style="color:#5c6370;">// Updating scene logic
</span><span>  </span><span style="color:#5c6370;">// moving box for one pixel per frame
</span><span>  </span><span style="color:#5c6370;">// &quot;requestAnimationFrame&quot; is optimized for 60fps
</span><span>  </span><span style="color:#5c6370;">// so we should get smooth movement of 60px per second
</span><span>  </span><span style="color:#e06c75;">position </span><span style="color:#c678dd;">+= </span><span style="color:#e5c07b;">1</span><span>;
</span><span>
</span><span>  </span><span style="color:#5c6370;">// Render updated scene
</span><span>  </span><span style="color:#e06c75;">box</span><span>.style.</span><span style="color:#e06c75;">transform </span><span style="color:#c678dd;">= </span><span style="color:#98c379;">`translateX(${ </span><span style="color:#e06c75;">position </span><span style="color:#98c379;">}px)`</span><span>;
</span><span>
</span><span>  </span><span style="color:#5c6370;">// Start next frame
</span><span>  </span><span style="color:#61afef;">requestAnimationFrame</span><span>(</span><span style="color:#e06c75;">animate</span><span>);
</span><span>}
</span><span>
</span><span style="color:#5c6370;">// Start animation
</span><span style="color:#61afef;">animate</span><span>();
</span></code></pre>
<iframe
  height="280"
  
  scrolling="no"
  title="JavaScript animation loop - step 1"
  src="https://codepen.io/stanko/embed/GxjLmE?default-tab=result"
  frameborder="no"
  loading="lazy"
  allowtransparency="true"
  allowfullscreen="true"
>
  See the Pen <a href="https://codepen.io/stanko/pen/GxjLmE">
  JavaScript animation loop - step 1</a> by Stanko (<a href="https://codepen.io/stanko">@stanko</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
<p>At the first glance this looks fine. But it has one major problem.
<code>requestAnimationFrame</code> is usually triggered 60 times per second, but often this is not the case.
For example, the most browsers will pause it if tab goes to background.
Busy (or low-end) CPU will also slow it down.</p>
<p>Imagine for some reason that is does get triggered only
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  10 times per second.
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>In the example bellow I faked it by using 100ms <code>setTimeout</code>.<span class="sidenote__bracket">)</span></span>

In that case our box will be moved by 1px every 100ms, ending up on 10px per second.</p>
<iframe
  height="280"
  
  scrolling="no"
  title="JavaScript animation loop - step 2"
  src="https://codepen.io/stanko/embed/ZxpZyZ?default-tab=result"
  frameborder="no"
  loading="lazy"
  allowtransparency="true"
  allowfullscreen="true"
>
  See the Pen <a href="https://codepen.io/stanko/pen/ZxpZyZ">
  JavaScript animation loop - step 2</a> by Stanko (<a href="https://codepen.io/stanko">@stanko</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
<p>This means our animation speed is relative to how many times <code>requestAnimationFrame</code> is called per second.</p>
<p>That is the big timing problem we are trying to solve.
Our animation should calculate the right position based on time passed,
rather then just incrementing it by 1px each update.</p>
<h2 id="delta-time-to-the-rescue">Delta time to the rescue<a
  class="header-anchor"
  href="#delta-time-to-the-rescue" aria-label="Anchor link for: delta-time-to-the-rescue"
  title="Anchor link for: delta-time-to-the-rescue"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Now we know what to do - adjust the position based on time passed between two updates.
Every time we are doing the update, we are going to calculate how much time has passed
since the last update.</p>
<p>To get movement of 60px per second, we need to move our box by 1px every ~16.66ms
(single frame duration for 60fps).
Number of frames passed is calculated by dividing delta time by a frame duration.</p>
<p>If we apply it to the previous 100ms (10fps) example, we'll get delta time of 100ms.
Dividing it by 16.66 gives us delta frame of 6 (100ms / 16.66ms),
meaning that 6 frames has passed since we last updated the scene.</p>
<p>Only thing left to do is to adjust the position of our box,
by multiplying 1px by delta frame.
This will give us movement of 6px per 100ms,
which is the exactly what we are trying to achieve (60px per second).</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#c678dd;">const </span><span style="color:#e06c75;">FRAME_DURATION </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">1000 </span><span style="color:#c678dd;">/ </span><span style="color:#e5c07b;">60</span><span>; </span><span style="color:#5c6370;">// 60fps frame duration ~16.66ms
</span><span style="color:#5c6370;">// If available we are using native &quot;performance&quot; API instead of &quot;Date&quot;
</span><span style="color:#5c6370;">// Read more about it on MDN:
</span><span style="color:#5c6370;">// https://developer.mozilla.org/en-US/docs/Web/API/Performance
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">getTime </span><span style="color:#c678dd;">= typeof </span><span>performance </span><span style="color:#c678dd;">=== </span><span style="color:#98c379;">&#39;function&#39; </span><span style="color:#c678dd;">? </span><span>performance.</span><span style="color:#e06c75;">now </span><span style="color:#c678dd;">: </span><span style="color:#e5c07b;">Date</span><span>.</span><span style="color:#e06c75;">now</span><span>;
</span><span>
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">box </span><span style="color:#c678dd;">= </span><span>document.</span><span style="color:#61afef;">querySelector</span><span>(</span><span style="color:#98c379;">&#39;.Box&#39;</span><span>);
</span><span style="color:#5c6370;">// Initial position
</span><span style="color:#c678dd;">let </span><span style="color:#e06c75;">position </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">0</span><span>;
</span><span style="color:#5c6370;">// Initial time
</span><span style="color:#c678dd;">let </span><span style="color:#e06c75;">lastUpdate </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">getTime</span><span>();
</span><span>
</span><span style="color:#c678dd;">function </span><span style="color:#61afef;">animate</span><span>() {
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">now </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">getTime</span><span>();
</span><span>  </span><span style="color:#5c6370;">// This is the main part
</span><span>  </span><span style="color:#5c6370;">// We are checking how much time has passed since the last update
</span><span>  </span><span style="color:#5c6370;">// and translating that to frames
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">delta </span><span style="color:#c678dd;">= </span><span>(</span><span style="color:#e06c75;">now </span><span style="color:#c678dd;">- </span><span style="color:#e06c75;">lastUpdate</span><span>) </span><span style="color:#c678dd;">/ </span><span style="color:#e06c75;">FRAME_DURATION</span><span>;
</span><span>
</span><span>  </span><span style="color:#5c6370;">// Updating scene logic
</span><span>  </span><span style="color:#5c6370;">// We want to move the box 1px per each 16.66ms (60fps)
</span><span>  </span><span style="color:#5c6370;">// so we are multipling 1px with the number of frames passed
</span><span>  </span><span style="color:#e06c75;">position </span><span style="color:#c678dd;">+= </span><span style="color:#e5c07b;">1 </span><span style="color:#c678dd;">* </span><span style="color:#e06c75;">delta</span><span>;
</span><span>
</span><span>  </span><span style="color:#5c6370;">// Render updated scene
</span><span>  </span><span style="color:#e06c75;">box</span><span>.style.</span><span style="color:#e06c75;">transform </span><span style="color:#c678dd;">= </span><span style="color:#98c379;">`translateX(${ </span><span style="color:#e06c75;">position </span><span style="color:#98c379;">}px)`</span><span>;
</span><span>
</span><span>  </span><span style="color:#5c6370;">// Update last updated time
</span><span>  </span><span style="color:#e06c75;">lastUpdate </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">now</span><span>;
</span><span>
</span><span>  </span><span style="color:#5c6370;">// Fake 10fps using &quot;setTimeout&quot;
</span><span>  </span><span style="color:#61afef;">setTimeout</span><span>(</span><span style="color:#e06c75;">animate</span><span>, </span><span style="color:#e5c07b;">100</span><span>);
</span><span>}
</span><span>
</span><span style="color:#61afef;">animate</span><span>();
</span></code></pre>
<iframe
  height="280"
  
  scrolling="no"
  title="JavaScript animation loop - step 3"
  src="https://codepen.io/stanko/embed/zWKXRY?default-tab=result"
  frameborder="no"
  loading="lazy"
  allowtransparency="true"
  allowfullscreen="true"
>
  See the Pen <a href="https://codepen.io/stanko/pen/zWKXRY">
  JavaScript animation loop - step 3</a> by Stanko (<a href="https://codepen.io/stanko">@stanko</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
<p>We fixed the timing problem, and our box is moving 60px per second.
Now we can put back <code>requestAnimationFrame</code> instead of <code>setTimeout</code>,
and we will get smooth animation without timing problems.</p>
<p>Check all examples side by side comparison:</p>
<iframe
  height="500"
  
  scrolling="no"
  title="JavaScript animation loop - step 4 (all examples combined)"
  src="https://codepen.io/stanko/embed/pLEYEw?default-tab=result"
  frameborder="no"
  loading="lazy"
  allowtransparency="true"
  allowfullscreen="true"
>
  See the Pen <a href="https://codepen.io/stanko/pen/pLEYEw">
  JavaScript animation loop - step 4 (all examples combined)</a> by Stanko (<a href="https://codepen.io/stanko">@stanko</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
<p>Hopefully you learned something reading this.
I'm going to write more posts about three.js and JavaScript game development.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>JavaScript &#x27;time ago&#x27; function</title>
		<published>2018-02-28T00:00:00+00:00</published>
		<updated>2018-02-28T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/javascript-time-ago-function/" type="text/html"/>
		<id>https://muffinman.io/blog/javascript-time-ago-function/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Snippet for a rather popular requirement.
Formatting a date in a nice way, using infamous &quot;time ago&quot; function.
This is the basic version which I adapt to fit a specific project.
To keep it easily customizable to your needs, I haven't packaged it up.</p>
<p>Just pass a date to it, and function will return one of the seven possible formats:</p>
<span id="continue-reading"></span>
<ul>
<li><code>now</code> - if no more than five seconds elapsed</li>
<li><code>about a minute ago</code> - in no more than ninety seconds elapsed</li>
<li><code>24 minutes ago</code> - for anything in the last hour</li>
<li><code>Today at 11:19</code> - for today</li>
<li><code>Yesterday at 7:32</code> - for yesterday</li>
<li><code>15. February at 17:45</code> - for dates in the current year</li>
<li><code>23. October 2017. at 0:59</code> - for anything else</li>
</ul>
<p>Feel free to play with it and add more cases if you need them.</p>
<h2 id="code">Code<a
  class="header-anchor"
  href="#code" aria-label="Anchor link for: code"
  title="Anchor link for: code"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#c678dd;">const </span><span style="color:#e06c75;">MONTH_NAMES </span><span style="color:#c678dd;">= </span><span>[
</span><span>  </span><span style="color:#98c379;">&#39;January&#39;</span><span>, </span><span style="color:#98c379;">&#39;February&#39;</span><span>, </span><span style="color:#98c379;">&#39;March&#39;</span><span>, </span><span style="color:#98c379;">&#39;April&#39;</span><span>, </span><span style="color:#98c379;">&#39;May&#39;</span><span>, </span><span style="color:#98c379;">&#39;June&#39;</span><span>,
</span><span>  </span><span style="color:#98c379;">&#39;July&#39;</span><span>, </span><span style="color:#98c379;">&#39;August&#39;</span><span>, </span><span style="color:#98c379;">&#39;September&#39;</span><span>, </span><span style="color:#98c379;">&#39;October&#39;</span><span>, </span><span style="color:#98c379;">&#39;November&#39;</span><span>, </span><span style="color:#98c379;">&#39;December&#39;
</span><span>];
</span><span>
</span><span>
</span><span style="color:#c678dd;">function </span><span style="color:#61afef;">getFormattedDate</span><span>(</span><span style="color:#e06c75;">date</span><span>, </span><span style="color:#e06c75;">prefomattedDate </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">false</span><span>, </span><span style="color:#e06c75;">hideYear </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">false</span><span>) {
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">day </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">date</span><span>.</span><span style="color:#61afef;">getDate</span><span>();
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">month </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">MONTH_NAMES</span><span>[</span><span style="color:#e06c75;">date</span><span>.</span><span style="color:#61afef;">getMonth</span><span>()];
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">year </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">date</span><span>.</span><span style="color:#61afef;">getFullYear</span><span>();
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">hours </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">date</span><span>.</span><span style="color:#61afef;">getHours</span><span>();
</span><span>  </span><span style="color:#c678dd;">let </span><span style="color:#e06c75;">minutes </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">date</span><span>.</span><span style="color:#61afef;">getMinutes</span><span>();
</span><span>
</span><span>  </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#e06c75;">minutes </span><span style="color:#c678dd;">&lt; </span><span style="color:#e5c07b;">10</span><span>) {
</span><span>    </span><span style="color:#5c6370;">// Adding leading zero to minutes
</span><span>    </span><span style="color:#e06c75;">minutes </span><span style="color:#c678dd;">= </span><span style="color:#98c379;">`0${ </span><span style="color:#e06c75;">minutes </span><span style="color:#98c379;">}`</span><span>;
</span><span>  }
</span><span>
</span><span>  </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#e06c75;">prefomattedDate</span><span>) {
</span><span>    </span><span style="color:#5c6370;">// Today at 10:20
</span><span>    </span><span style="color:#5c6370;">// Yesterday at 10:20
</span><span>    </span><span style="color:#c678dd;">return </span><span style="color:#98c379;">`${ </span><span style="color:#e06c75;">prefomattedDate </span><span style="color:#98c379;">} at ${ </span><span style="color:#e06c75;">hours </span><span style="color:#98c379;">}:${ </span><span style="color:#e06c75;">minutes </span><span style="color:#98c379;">}`</span><span>;
</span><span>  }
</span><span>
</span><span>  </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#e06c75;">hideYear</span><span>) {
</span><span>    </span><span style="color:#5c6370;">// 10. January at 10:20
</span><span>    </span><span style="color:#c678dd;">return </span><span style="color:#98c379;">`${ </span><span style="color:#e06c75;">day </span><span style="color:#98c379;">}. ${ </span><span style="color:#e06c75;">month </span><span style="color:#98c379;">} at ${ </span><span style="color:#e06c75;">hours </span><span style="color:#98c379;">}:${ </span><span style="color:#e06c75;">minutes </span><span style="color:#98c379;">}`</span><span>;
</span><span>  }
</span><span>
</span><span>  </span><span style="color:#5c6370;">// 10. January 2017. at 10:20
</span><span>  </span><span style="color:#c678dd;">return </span><span style="color:#98c379;">`${ </span><span style="color:#e06c75;">day </span><span style="color:#98c379;">}. ${ </span><span style="color:#e06c75;">month </span><span style="color:#98c379;">} ${ </span><span style="color:#e06c75;">year </span><span style="color:#98c379;">}. at ${ </span><span style="color:#e06c75;">hours </span><span style="color:#98c379;">}:${ </span><span style="color:#e06c75;">minutes </span><span style="color:#98c379;">}`</span><span>;
</span><span>}
</span><span>
</span><span>
</span><span style="color:#5c6370;">// --- Main function
</span><span style="color:#c678dd;">function </span><span style="color:#61afef;">timeAgo</span><span>(</span><span style="color:#e06c75;">dateParam</span><span>) {
</span><span>  </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#c678dd;">!</span><span style="color:#e06c75;">dateParam</span><span>) {
</span><span>    </span><span style="color:#c678dd;">return </span><span style="color:#e5c07b;">null</span><span>;
</span><span>  }
</span><span>
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">date </span><span style="color:#c678dd;">= typeof </span><span style="color:#e06c75;">dateParam </span><span style="color:#c678dd;">=== </span><span style="color:#98c379;">&#39;object&#39; </span><span style="color:#c678dd;">? </span><span style="color:#e06c75;">dateParam </span><span style="color:#c678dd;">: new </span><span>Date(</span><span style="color:#e06c75;">dateParam</span><span>);
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">DAY_IN_MS </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">86400000</span><span>; </span><span style="color:#5c6370;">// 24 * 60 * 60 * 1000
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">today </span><span style="color:#c678dd;">= new </span><span>Date();
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">yesterday </span><span style="color:#c678dd;">= new </span><span>Date(</span><span style="color:#e06c75;">today </span><span style="color:#c678dd;">- </span><span style="color:#e06c75;">DAY_IN_MS</span><span>);
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">seconds </span><span style="color:#c678dd;">= </span><span>Math.</span><span style="color:#61afef;">round</span><span>((</span><span style="color:#e06c75;">today </span><span style="color:#c678dd;">- </span><span style="color:#e06c75;">date</span><span>) </span><span style="color:#c678dd;">/ </span><span style="color:#e5c07b;">1000</span><span>);
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">minutes </span><span style="color:#c678dd;">= </span><span>Math.</span><span style="color:#61afef;">round</span><span>(</span><span style="color:#e06c75;">seconds </span><span style="color:#c678dd;">/ </span><span style="color:#e5c07b;">60</span><span>);
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">isToday </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">today</span><span>.</span><span style="color:#61afef;">toDateString</span><span>() </span><span style="color:#c678dd;">=== </span><span style="color:#e06c75;">date</span><span>.</span><span style="color:#61afef;">toDateString</span><span>();
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">isYesterday </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">yesterday</span><span>.</span><span style="color:#61afef;">toDateString</span><span>() </span><span style="color:#c678dd;">=== </span><span style="color:#e06c75;">date</span><span>.</span><span style="color:#61afef;">toDateString</span><span>();
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">isThisYear </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">today</span><span>.</span><span style="color:#61afef;">getFullYear</span><span>() </span><span style="color:#c678dd;">=== </span><span style="color:#e06c75;">date</span><span>.</span><span style="color:#61afef;">getFullYear</span><span>();
</span><span>
</span><span>
</span><span>  </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#e06c75;">seconds </span><span style="color:#c678dd;">&lt; </span><span style="color:#e5c07b;">5</span><span>) {
</span><span>    </span><span style="color:#c678dd;">return </span><span style="color:#98c379;">&#39;now&#39;</span><span>;
</span><span>  } </span><span style="color:#c678dd;">else if </span><span>(</span><span style="color:#e06c75;">seconds </span><span style="color:#c678dd;">&lt; </span><span style="color:#e5c07b;">60</span><span>) {
</span><span>    </span><span style="color:#c678dd;">return </span><span style="color:#98c379;">`${ </span><span style="color:#e06c75;">seconds </span><span style="color:#98c379;">} seconds ago`</span><span>;
</span><span>  } </span><span style="color:#c678dd;">else if </span><span>(</span><span style="color:#e06c75;">seconds </span><span style="color:#c678dd;">&lt; </span><span style="color:#e5c07b;">90</span><span>) {
</span><span>    </span><span style="color:#c678dd;">return </span><span style="color:#98c379;">&#39;about a minute ago&#39;</span><span>;
</span><span>  } </span><span style="color:#c678dd;">else if </span><span>(</span><span style="color:#e06c75;">minutes </span><span style="color:#c678dd;">&lt; </span><span style="color:#e5c07b;">60</span><span>) {
</span><span>    </span><span style="color:#c678dd;">return </span><span style="color:#98c379;">`${ </span><span style="color:#e06c75;">minutes </span><span style="color:#98c379;">} minutes ago`</span><span>;
</span><span>  } </span><span style="color:#c678dd;">else if </span><span>(</span><span style="color:#e06c75;">isToday</span><span>) {
</span><span>    </span><span style="color:#c678dd;">return </span><span style="color:#61afef;">getFormattedDate</span><span>(</span><span style="color:#e06c75;">date</span><span>, </span><span style="color:#98c379;">&#39;Today&#39;</span><span>); </span><span style="color:#5c6370;">// Today at 10:20
</span><span>  } </span><span style="color:#c678dd;">else if </span><span>(</span><span style="color:#e06c75;">isYesterday</span><span>) {
</span><span>    </span><span style="color:#c678dd;">return </span><span style="color:#61afef;">getFormattedDate</span><span>(</span><span style="color:#e06c75;">date</span><span>, </span><span style="color:#98c379;">&#39;Yesterday&#39;</span><span>); </span><span style="color:#5c6370;">// Yesterday at 10:20
</span><span>  } </span><span style="color:#c678dd;">else if </span><span>(</span><span style="color:#e06c75;">isThisYear</span><span>) {
</span><span>    </span><span style="color:#c678dd;">return </span><span style="color:#61afef;">getFormattedDate</span><span>(</span><span style="color:#e06c75;">date</span><span>, </span><span style="color:#e5c07b;">false</span><span>, </span><span style="color:#e5c07b;">true</span><span>); </span><span style="color:#5c6370;">// 10. January at 10:20
</span><span>  }
</span><span>
</span><span>  </span><span style="color:#c678dd;">return </span><span style="color:#61afef;">getFormattedDate</span><span>(</span><span style="color:#e06c75;">date</span><span>); </span><span style="color:#5c6370;">// 10. January 2017. at 10:20
</span><span>}
</span></code></pre>
<h2 id="demo">Demo<a
  class="header-anchor"
  href="#demo" aria-label="Anchor link for: demo"
  title="Anchor link for: demo"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p><em>Update, August 2020</em></p>
<p>{{ codepen(
id=&quot;rNeWbje&quot;,
title=&quot;Javascript &quot;time ago&quot; function&quot;,
height=400
) }}</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>First talk in React series</title>
		<published>2018-02-02T00:00:00+00:00</published>
		<updated>2018-02-02T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/it-girls-react-series/" type="text/html"/>
		<id>https://muffinman.io/blog/it-girls-react-series/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>This time we joined forces with our friends from <a href="http://itgirls.rs/">IT Girls</a>.
They are promoting tech among women, and helping them start a career in it.
Together, we are organizing a series of meetups and workshops about React.</p>
<p>Last night, my colleague Nemanja and myself had a pleasure to give the first talk in the series.
We are planning to have one more meetup followed by a couple of workshops,
and for a great finale, hackathon will be organized.</p>
<p>After yesterday's introduction to React, we'll continue with more in depth talks,
including more code examples. To reserve your place, make sure you apply in time,
by following <a href="http://itgirls.rs/">IT Girls'</a> website and Facebook.</p>
<p>Due to large interest, we might repeat the first talk.
Slides are available for <a href="/pdf/Introduction%20to%20React.pdf">download</a>.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>React Router v4 redirect decorator</title>
		<published>2018-01-29T00:00:00+00:00</published>
		<updated>2018-01-29T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/react-router-v4-redirect-decorator/" type="text/html"/>
		<id>https://muffinman.io/blog/react-router-v4-redirect-decorator/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>React Router switched to component based routing starting with the version 4.
Redirects are now done by rendering a <code>Redirect</code> component,
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  like this:
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Please note that you can use included <a href="https://reacttraining.com/react-router/web/api/withRouter">withRouter</a>
decorator but it can cause update blocking and introduce side effects.
This is small subset of it.<span class="sidenote__bracket">)</span></span>
</p>
<pre data-lang="html" style="background-color:#282c34;color:#dcdfe4;" class="language-html "><code class="language-html" data-lang="html"><span>&lt;</span><span style="color:#e06c75;">Redirect </span><span style="color:#e5c07b;">to</span><span>=</span><span style="color:#98c379;">&#39;/redirect-url-here&#39; </span><span>/&gt;
</span></code></pre>
<p>What I usually do is to keep <code>redirectTo</code> property in component's state.
To redirect, I set it to the URL I want to redirect to,
and render <code>Redirect</code> at the start of the <code>render</code> method:</p>
<span id="continue-reading"></span><pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#61afef;">render</span><span>() {
</span><span>  </span><span style="color:#c678dd;">const </span><span>{ </span><span style="color:#e06c75;">redirectTo </span><span>} </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">this</span><span>.</span><span style="color:#e06c75;">state</span><span>;
</span><span>
</span><span>  </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#e06c75;">redirectTo</span><span>) {
</span><span>    </span><span style="color:#c678dd;">return </span><span>&lt;Redirect push to={ </span><span style="color:#e06c75;">redirectTo </span><span>} /&gt;;
</span><span>  }
</span><span>
</span><span>  </span><span style="color:#c678dd;">return </span><span>(
</span><span>    </span><span style="color:#c678dd;">&lt;</span><span style="color:#e06c75;">YourComponentHere </span><span style="color:#c678dd;">/&gt;
</span><span>  );
</span><span>}
</span></code></pre>
<p>This approach works well, but I got tired of repeating the same code over and over again.
So I pulled the functionality to a decorator (higher order component if you prefer).</p>
<h2 id="redirect-decorator">Redirect decorator<a
  class="header-anchor"
  href="#redirect-decorator" aria-label="Anchor link for: redirect-decorator"
  title="Anchor link for: redirect-decorator"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I did exactly what I described above, and exposed <code>redirectTo</code> method
to a composed component.</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#c678dd;">import </span><span style="color:#e06c75;">React</span><span>, { </span><span style="color:#e06c75;">Component </span><span>} </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;react&#39;</span><span>;
</span><span style="color:#c678dd;">import </span><span>{ </span><span style="color:#e06c75;">Redirect </span><span>} </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;react-router-dom&#39;</span><span>;
</span><span>
</span><span style="color:#c678dd;">const </span><span style="color:#61afef;">withRedirect </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">ComposedComponent </span><span style="color:#c678dd;">=&gt; class </span><span style="color:#e5c07b;">RedirectDecorator </span><span style="color:#c678dd;">extends </span><span style="color:#e5c07b;">Component {
</span><span style="color:#e5c07b;">  </span><span style="color:#e06c75;">state </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">{
</span><span style="color:#e5c07b;">    push: false,
</span><span style="color:#e5c07b;">    redirectUrl: null,
</span><span style="color:#e5c07b;">  }
</span><span style="color:#e5c07b;">
</span><span style="color:#e5c07b;">  </span><span style="color:#61afef;">componentDidUpdate</span><span style="color:#e5c07b;">(</span><span style="color:#e06c75;">prevProps</span><span style="color:#e5c07b;">, </span><span style="color:#e06c75;">prevState</span><span style="color:#e5c07b;">) {
</span><span style="color:#e5c07b;">    </span><span style="color:#c678dd;">const </span><span style="color:#e5c07b;">{
</span><span style="color:#e5c07b;">      </span><span style="color:#e06c75;">redirectUrl</span><span style="color:#e5c07b;">,
</span><span style="color:#e5c07b;">    } </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#e06c75;">state</span><span style="color:#e5c07b;">;
</span><span style="color:#e5c07b;">
</span><span style="color:#e5c07b;">    </span><span style="color:#5c6370;">// If component is rendered on redirect page as well
</span><span style="color:#e5c07b;">    </span><span style="color:#5c6370;">// (i.e. header or footer) it would cause redirect-loop
</span><span style="color:#e5c07b;">    </span><span style="color:#5c6370;">// as &quot;&lt;Redirect /&gt;&quot; is being rendered every time.
</span><span style="color:#e5c07b;">    </span><span style="color:#5c6370;">// So we are resetting the state after redirect
</span><span style="color:#e5c07b;">    </span><span style="color:#c678dd;">if </span><span style="color:#e5c07b;">(</span><span style="color:#c678dd;">!</span><span style="color:#e06c75;">prevState</span><span style="color:#e5c07b;">.</span><span style="color:#e06c75;">redirectUrl </span><span style="color:#c678dd;">&amp;&amp; </span><span style="color:#e06c75;">redirectUrl</span><span style="color:#e5c07b;">) {
</span><span style="color:#e5c07b;">      </span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#61afef;">setState</span><span style="color:#e5c07b;">({
</span><span style="color:#e5c07b;">        push: false,
</span><span style="color:#e5c07b;">        redirectUrl: null,
</span><span style="color:#e5c07b;">      });
</span><span style="color:#e5c07b;">    }
</span><span style="color:#e5c07b;">  }
</span><span style="color:#e5c07b;">
</span><span style="color:#e5c07b;">  </span><span style="color:#61afef;">redirectTo </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">(</span><span style="color:#e06c75;">redirectUrl</span><span style="color:#e5c07b;">, </span><span style="color:#e06c75;">push </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">false) </span><span style="color:#c678dd;">=&gt; </span><span style="color:#e5c07b;">{
</span><span style="color:#e5c07b;">    </span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#61afef;">setState</span><span style="color:#e5c07b;">({
</span><span style="color:#e5c07b;">      </span><span style="color:#e06c75;">push</span><span style="color:#e5c07b;">,
</span><span style="color:#e5c07b;">      </span><span style="color:#e06c75;">redirectUrl</span><span style="color:#e5c07b;">,
</span><span style="color:#e5c07b;">    });
</span><span style="color:#e5c07b;">  }
</span><span style="color:#e5c07b;">
</span><span style="color:#e5c07b;">  </span><span style="color:#61afef;">render</span><span style="color:#e5c07b;">() {
</span><span style="color:#e5c07b;">    </span><span style="color:#c678dd;">const </span><span style="color:#e5c07b;">{
</span><span style="color:#e5c07b;">      </span><span style="color:#e06c75;">push</span><span style="color:#e5c07b;">,
</span><span style="color:#e5c07b;">      </span><span style="color:#e06c75;">redirectUrl</span><span style="color:#e5c07b;">,
</span><span style="color:#e5c07b;">    } </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#e06c75;">state</span><span style="color:#e5c07b;">;
</span><span style="color:#e5c07b;">
</span><span style="color:#e5c07b;">    </span><span style="color:#c678dd;">if </span><span style="color:#e5c07b;">(</span><span style="color:#e06c75;">redirectUrl</span><span style="color:#e5c07b;">) {
</span><span style="color:#e5c07b;">      </span><span style="color:#c678dd;">return </span><span style="color:#e5c07b;">&lt;Redirect push={ </span><span style="color:#e06c75;">push </span><span style="color:#e5c07b;">} to={ </span><span style="color:#e06c75;">redirectUrl </span><span style="color:#e5c07b;">} /&gt;;
</span><span style="color:#e5c07b;">    }
</span><span style="color:#e5c07b;">
</span><span style="color:#e5c07b;">    </span><span style="color:#c678dd;">return </span><span style="color:#e5c07b;">(
</span><span style="color:#e5c07b;">      </span><span style="color:#c678dd;">&lt;</span><span style="color:#e06c75;">ComposedComponent
</span><span style="color:#e5c07b;">        { </span><span style="color:#c678dd;">...</span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#e06c75;">props </span><span style="color:#e5c07b;">}
</span><span style="color:#e5c07b;">        </span><span style="color:#e06c75;">redirectTo</span><span style="color:#c678dd;">=</span><span style="color:#e5c07b;">{ this.</span><span style="color:#e06c75;">redirectTo </span><span style="color:#e5c07b;">}
</span><span style="color:#e5c07b;">      </span><span style="color:#c678dd;">/&gt;
</span><span style="color:#e5c07b;">    );
</span><span style="color:#e5c07b;">  }
</span><span style="color:#e5c07b;">}</span><span>;
</span><span>
</span><span style="color:#c678dd;">export default </span><span style="color:#e06c75;">withRedirect</span><span>;
</span></code></pre>
<h2 id="usage">Usage<a
  class="header-anchor"
  href="#usage" aria-label="Anchor link for: usage"
  title="Anchor link for: usage"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Import newly added decorator and apply it to your component.
It will inject <code>redirectTo</code> to it's props,
and you can use it anywhere to redirect user to a new URL.</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#c678dd;">import </span><span style="color:#e06c75;">React</span><span>, { </span><span style="color:#e06c75;">Component </span><span>} </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;react&#39;</span><span>;
</span><span style="color:#c678dd;">import </span><span style="color:#e06c75;">withRedirect </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;path/to/redirect/decorator&#39;</span><span>;
</span><span>
</span><span>@</span><span style="color:#e06c75;">withRedirect
</span><span style="color:#c678dd;">export default class </span><span style="color:#e5c07b;">Example </span><span style="color:#c678dd;">extends </span><span style="color:#e5c07b;">Component {
</span><span style="color:#e5c07b;">  </span><span style="color:#61afef;">handleClick </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">() </span><span style="color:#c678dd;">=&gt; </span><span style="color:#e5c07b;">{
</span><span style="color:#e5c07b;">    </span><span style="color:#c678dd;">const </span><span style="color:#e5c07b;">{
</span><span style="color:#e5c07b;">      </span><span style="color:#e06c75;">redirectTo</span><span style="color:#e5c07b;">,
</span><span style="color:#e5c07b;">    } </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#e06c75;">props</span><span style="color:#e5c07b;">;
</span><span style="color:#e5c07b;">
</span><span style="color:#e5c07b;">    </span><span style="color:#61afef;">redirectTo</span><span style="color:#e5c07b;">(</span><span style="color:#98c379;">&#39;/&#39;</span><span style="color:#e5c07b;">, true);
</span><span style="color:#e5c07b;">  }
</span><span style="color:#e5c07b;">
</span><span style="color:#e5c07b;">  </span><span style="color:#61afef;">render</span><span style="color:#e5c07b;">() {
</span><span style="color:#e5c07b;">    </span><span style="color:#c678dd;">return </span><span style="color:#e5c07b;">(
</span><span style="color:#e5c07b;">      </span><span style="color:#c678dd;">&lt;</span><span style="color:#e06c75;">button onClick</span><span style="color:#c678dd;">=</span><span style="color:#e5c07b;">{ this.</span><span style="color:#e06c75;">handleClick </span><span style="color:#e5c07b;">}</span><span style="color:#c678dd;">&gt;
</span><span style="color:#e5c07b;">        </span><span style="color:#e06c75;">Take me home</span><span style="color:#c678dd;">!
</span><span style="color:#e5c07b;">      </span><span style="color:#c678dd;">&lt;/</span><span style="color:#e06c75;">button</span><span style="color:#c678dd;">&gt;
</span><span style="color:#e5c07b;">    );
</span><span style="color:#e5c07b;">  }
</span><span style="color:#e5c07b;">}
</span></code></pre>
<p>First parameter is obviously a URL, and the second one is boolean <code>push</code>.
It is <code>false</code> by default and in that case redirect URL will replace the current URL
(user won't be able to get back to it by clicking browser back button).
When set to <code>true</code> it will push new URL to the history, leaving the old one as well.</p>
<p>Happy redirecting!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>React ratio</title>
		<published>2018-01-23T00:00:00+00:00</published>
		<updated>2018-01-23T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/react-ratio-component/" type="text/html"/>
		<id>https://muffinman.io/blog/react-ratio-component/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Short one today.</p>
<p>I'm continuing to release <a href="/blog/has-tabbed-aka-should-i-release-small-libraries/">small libraries</a>.
So let me present <a href="https://www.npmjs.com/package/react-ratio">react-ratio</a>, another small React component.
You probably guessed what it does - creates element with the given aspect ratio.</p>
<p>Check <a href="https://muffinman.io/react-ratio/">the demo</a> or grab <a href="https://github.com/Stanko/react-ratio">the source code</a></p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>&#x27;has-tabbed aka Should I release small libraries?&#x27;</title>
		<published>2018-01-22T00:00:00+00:00</published>
		<updated>2018-01-22T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/has-tabbed-aka-should-i-release-small-libraries/" type="text/html"/>
		<id>https://muffinman.io/blog/has-tabbed-aka-should-i-release-small-libraries/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>I just released tiny library called <a href="https://www.npmjs.com/package/has-tabbed">has-tabbed</a>.
Again, it is a small piece of code I regularly copy from project to project.
I always considered it too insignificant for releasing it as a standalone package.</p>
<p>When user presses tab key, it adds
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  CSS class
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>By default <code>--tabbed</code> is used, but it accepts custom class as parameter.<span class="sidenote__bracket">)</span></span>

to <code>html</code> element.
Then, if user clicks anywhere on the page, it removes it. That's why I though it is too small.
But after giving it some thought, my answer to the question in the title is &quot;YES&quot;.</p>
<blockquote>
<p>You should release small libraries no matter how small they are.</p>
</blockquote>
<span id="continue-reading"></span>
<p>It is ok if library does only
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  one small thing
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>It should do it right though.<span class="sidenote__bracket">)</span></span>
.
It will save you time as you don't have to copy it all the time,
and sharing will allow other people to use and improve it.</p>
<p>Now when we resolved that question, let's get back to <code>has-tabbed</code>.</p>
<h2 id="what-is-it-for">What is it for?<a
  class="header-anchor"
  href="#what-is-it-for" aria-label="Anchor link for: what-is-it-for"
  title="Anchor link for: what-is-it-for"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>It is a small accessibility and UX improvement.
Web apps need focus states with &quot;ugly&quot; focus rings.
Most developers will just remove them.
This is something you shouldn't do, as it impacts accessibility and overall UX.
More people than you think are using keyboard to navigate through websites and apps.</p>
<p><code>has-tabbed</code> allows you to have the best of both worlds.
It gives you a way yo differentiate if user is using keyboard or mouse to get around.
You can safely remove focus rings for people using a mouse,
but as soon as they start tabbing you can put them back in.
You'll understand what I'm talking about when you see <a href="https://muffinman.io/has-tabbed/">the demo</a>.</p>
<p><img src="/img/projects/has-tabbed.png" alt="&quot;has-tabbed&quot; in action" /></p>
<p>On the left, you can see colorful buttons without focus state (with hover state on the first one).
As soon as user presses tab we can add focus state as shown on the right.</p>
<p>Of course it is open source and code is available <a href="https://github.com/Stanko/has-tabbed">here</a>.
Enjoy!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Marvin v1.0</title>
		<published>2018-01-05T00:00:00+00:00</published>
		<updated>2018-01-05T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/marvin-v1/" type="text/html"/>
		<id>https://muffinman.io/blog/marvin-v1/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p><a href="https://github.com/workco/marvin/">Marvin</a> just got better!</p>
<p><img src="/img/marvin.jpg" alt="" /></p>
<p>Few days ago I've released version 1.0 of my
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  universal React boilerplate.
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Also known as Marvin<span class="sidenote__bracket">)</span></span>

There are some big changes, and I'm pretty happy with it's current state.
At least 20 applications were shipped using Marvin.
It has about seven hundred stars on GitHub with quite a few community contributions.</p>
<span id="continue-reading"></span><h2 id="big-updates">Big updates<a
  class="header-anchor"
  href="#big-updates" aria-label="Anchor link for: big-updates"
  title="Anchor link for: big-updates"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<ul>
<li>
<p>Switch from <a href="https://github.com/gaearon/redux-thunk">redux-thunk</a> to <a href="https://github.com/redux-saga/redux-saga">redux-saga</a>.</p>
<p>Sagas are bit more complicated but they make managing asynchronous actions easier.
They are really powerful and something I usually go for.
Thunks are good for smaller apps, but they tend to get messy as application grows.</p>
<p>Straight from <code>redux-saga</code> docs:</p>
<blockquote>
<p>Contrary to redux thunk, you don't end up in callback hell, you can test your asynchronous flows easily and your actions stay pure.</p>
</blockquote>
</li>
<li>
<p>Universal async data fetching using sagas.</p>
<p>This was one of the most requested features.
Marvin now supports getting the async data on the server.
Data is then saved to the redux store for client to reuse.
Example is included, but I plan to write more detailed documentation on it.</p>
</li>
<li>
<p>Switch from <a href="http://sass-lang.com/">SASS</a> to <a href="https://github.com/postcss/postcss">postcss</a>.</p>
<p>It is time to move on. SASS is awesome, but PostCSS caught up, and it is future proof.
Plus, if you are using Autoprefixer you are already using it anyway.</p>
<p>I could write whole article about it,
but people already did it and you can read them <a href="https://github.com/postcss/postcss#articles">here</a>.</p>
</li>
</ul>
<h2 id="it-is-opinionated">It is opinionated<a
  class="header-anchor"
  href="#it-is-opinionated" aria-label="Anchor link for: it-is-opinionated"
  title="Anchor link for: it-is-opinionated"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>These changes and overall setup are very opinionated and crafted by our experience and needs.
It is made to be starting point for us, and it might not be the best choice for you.
Although, I personally think it is pretty easy to modify it to fit custom needs.</p>
<p>If you use Marvin please leave a comment here or on the repo. Thanks!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Consume less, create more</title>
		<published>2018-01-01T00:00:00+00:00</published>
		<updated>2018-01-01T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/consume-less-create-more/" type="text/html"/>
		<id>https://muffinman.io/blog/consume-less-create-more/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>That's my new year's resolution. Code, write, play and craft more!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>My programming story</title>
		<published>2018-01-01T00:00:00+00:00</published>
		<updated>2018-01-01T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/my-programming-story/" type="text/html"/>
		<id>https://muffinman.io/blog/my-programming-story/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>This was intended to be a single paragraph in the post I'm still writing. It ended up much longer so I decided to publish it on it's own. So without further due, I present you <em>my programming story</em>.</p>
<span id="continue-reading"></span><h2 id="origins">Origins<a
  class="header-anchor"
  href="#origins" aria-label="Anchor link for: origins"
  title="Anchor link for: origins"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I got my first pc when I was four, shiny 286 with a color monitor! My father (who knows nothing about programming) showed me BASIC and infamous GOTO. My first programs did nothing more than printing simple messages or adding numbers up. It was fun but playing games was even more fun.</p>

  <img
    class="image image--md   "
    src="&#x2F;img&#x2F;keen.png"
    alt="Commander Keen"
  />
  

<p>Following years I spent playing games, but at some point I started thinking about making one. It is the main reason why I ended up programming and still is. Few games were made, but nothing worth mentioning (I still have unfulfilled wish to make retro like games, but utilizing modern hardware to give 'em a twist).</p>
<p>Then dialup came along and I got interested in websites. First one I made was dedicated to Pink Floyd and published on geocities. As I always had an artsy side, web seemed like a brilliant platform. Perfect combination of tech, design and interactivity. Today, I'm still doing web apps, although I had no such plans at the time.</p>
<h2 id="university">University<a
  class="header-anchor"
  href="#university" aria-label="Anchor link for: university"
  title="Anchor link for: university"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p><span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  University
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Fun fact, university's building is shaped as word <em>NO</em> which represents
<a href='https://en.wikipedia.org/wiki/Tito–Stalin_Split'>Tito's no to Stalin</a>.
In Serbian <em>NO</em> written in Cyrillic is <em>НЕ</em>.<span class="sidenote__bracket">)</span></span>

snuck onto me. Oh boy, I was looking forward to learning all the engineering stuff. But my university experience was quite underwhelming. Outdated curriculum, indifferent professors and students. (To be fair some professors were awesome and I learned a lot from them, Predrag Janičić and Milan Tuba to name my favorite ones.)</p>

<a href="https:&#x2F;&#x2F;www.google.rs&#x2F;maps&#x2F;@44.8193555,20.4592253,636a,35y,52.43h&#x2F;data=!3m1!1e3?hl=en" class="image__link">

  <img
    class="image image--md   "
    src="&#x2F;img&#x2F;matf.jpg"
    alt="My university&#x27;s building"
  />
  

</a>

<p>I left studies with only few exams left, but I would never be at the place I'm today, if I hadn't gone to the university. Mostly because of the few professors who had given their best and couple of colleagues who became long life friends. One of them introduced me to Linux.</p>
<p>Linux got me hooked, and I spend a lot of time exploring distributions, compiling drivers (fglrx anyone?) and kernels. That's when my first open source projects started (only one still alive is <a href="https://github.com/Stanko/ThinkPad-Fan-Control">ThinkPad fan control</a>). I never switched back to Windows.</p>
<h2 id="career">Career<a
  class="header-anchor"
  href="#career" aria-label="Anchor link for: career"
  title="Anchor link for: career"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I started working full time rather early, and changed a lot of positions in first four or five years. Started as a PHP developer, but having an eye for design I almost instantly ended doing frontend. Frontend back then was a lot of PHP with a tiny bit of JavaScript to make things interactive. And IE6, god damn... I still know bunch of CSS hacks for IE6.</p>
<p>Thought of going back to finish my studies always lurked in the back of my brain. When I finally decided I'm not going to do it, it was very liberating (not saying you shouldn't study, it just wasn't the best thing for me at this point).</p>
<p>As mentioned above, I did change quite a few companies. I was in my twenties and I was searching for great place to work at and create. Demand for programmers was high (and still is) and that gave me an option to leave companies I wasn't completely satisfied with. I was even a part of a small startup that failed, but taught me a couple of valuable lessons.</p>
<p>Between the jobs I freelanced and had few running open source projects. I've tried to start a blog couple of times, but never pushed through. Freelancing is a first step to creating your company. So it was, friend of mine and me started Null Object, small company focused on frontend services. That's where I found my great place to work at. Our big goal was to create positive atmosphere in the office where people actually like coming to work. Later on we became part of Work &amp; Co, where I'm still working, crafting some of the best frontend apps.</p>
<p><a href="https://work.co"><img src="/img/card.jpg" alt="My business card" /></a></p>
<h2 id="to-infinity-and-beyond">To infinity and beyond!<a
  class="header-anchor"
  href="#to-infinity-and-beyond" aria-label="Anchor link for: to-infinity-and-beyond"
  title="Anchor link for: to-infinity-and-beyond"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Feeling of creation is what keeps me programming, in both work and free time. Crafts are one of my other hobbies, so making stuff is really my thing. Programming is a bit different from crafting - we are basically creating things out of thin air. Plus progress and outcome of our work are instantly visible. If you ask me, it borderlines with magic.</p>
<p>So keep creating, I know I will!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Get scrollbar width in JavaScript</title>
		<published>2017-12-15T00:00:00+00:00</published>
		<updated>2017-12-15T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/get-scrollbar-width-in-javascript/" type="text/html"/>
		<id>https://muffinman.io/blog/get-scrollbar-width-in-javascript/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Another one-liner I love, that returns body scrollbar width.
If scrollbar is not shown it will return zero (including mobile devices).</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#c678dd;">function </span><span style="color:#61afef;">getScrollbarWidth</span><span>() {
</span><span>  </span><span style="color:#c678dd;">return </span><span>window.innerWidth </span><span style="color:#c678dd;">- </span><span>document.documentElement.</span><span style="color:#e06c75;">clientWidth</span><span>;
</span><span>}
</span></code></pre>
<p>Click on the button to try it yourself:</p>
<p><button style="margin-top: 0" class="Post-readmore" onclick="alert('Scroll bar width is ' + (window.innerWidth - document.documentElement.clientWidth) + 'px')">Get scrollbar width!</button></p>
<h2 id="browser-support">Browser support<a
  class="header-anchor"
  href="#browser-support" aria-label="Anchor link for: browser-support"
  title="Anchor link for: browser-support"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Tested on:</p>
<ul>
<li>Windows: IE9, IE10, IE11, Edge</li>
<li>MacOS: Safari, Firefox, Chrome, Opera</li>
<li>iOS: Safari, Chrome</li>
<li>Android: Chrome</li>
</ul>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Simple JavaScript API wrapper</title>
		<published>2017-12-06T00:00:00+00:00</published>
		<updated>2017-12-06T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/simple-javascript-api-wrapper/" type="text/html"/>
		<id>https://muffinman.io/blog/simple-javascript-api-wrapper/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>For handling API calls I have a small snippet I'm copying from project to project.
I decided to clean it up, make more generic and share it.
It is intended to be a starting point, so you might want to customize it to your custom needs.</p>
<h2 id="what-it-does">What it does?<a
  class="header-anchor"
  href="#what-it-does" aria-label="Anchor link for: what-it-does"
  title="Anchor link for: what-it-does"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>It is a simple wrapper around
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  native <code>fetch</code>.
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>If you need a polyfill <a href="https://www.npmjs.com/package/isomorphic-fetch">isomorphic-fetch</a> is a great one.<span class="sidenote__bracket">)</span></span>
</p>
<ul>
<li>For successful requests it will parse the response and return it.</li>
<li>When
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  HTTP error occurs
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>It detects errors based on request's HTTP status.<span class="sidenote__bracket">)</span></span>

it will throw a custom error with status code, error message and
response (parsed if it is a JSON).</li>
<li>If request never gets resolved, same custom error will be thrown but
response will be set to <code>null</code> and status code to <code>REQUEST_FAILED</code>.</li>
</ul>
<p>Please note that function will return a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a>
so you need to handle how it resolves.</p>
<span id="continue-reading"></span><h2 id="code">Code<a
  class="header-anchor"
  href="#code" aria-label="Anchor link for: code"
  title="Anchor link for: code"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>It is written as a native ES2015 module, which means you may need to
transpile it depending on your browser support policy.</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#5c6370;">// ------------------------------------------------------ //
</span><span style="color:#5c6370;">// Simple JavaScript API wrapper
</span><span style="color:#5c6370;">// https://muffinman.io/simple-javascript-api-wrapper
</span><span style="color:#5c6370;">// ------------------------------------------------------ //
</span><span>
</span><span style="color:#5c6370;">// For demo purposes I&#39;m using this awesome Star Wars API
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">API_URL </span><span style="color:#c678dd;">= </span><span style="color:#98c379;">&#39;https://swapi.co/api&#39;</span><span>;
</span><span>
</span><span style="color:#5c6370;">// Custom API error to throw
</span><span style="color:#c678dd;">function </span><span style="color:#61afef;">ApiError</span><span>(</span><span style="color:#e06c75;">message</span><span>, </span><span style="color:#e06c75;">data</span><span>, </span><span style="color:#e06c75;">status</span><span>) {
</span><span>  </span><span style="color:#c678dd;">let </span><span style="color:#e06c75;">response </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">null</span><span>;
</span><span>  </span><span style="color:#c678dd;">let </span><span style="color:#e06c75;">isObject </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">false</span><span>;
</span><span>
</span><span>  </span><span style="color:#5c6370;">// We are trying to parse response
</span><span>  </span><span style="color:#c678dd;">try </span><span>{
</span><span>    </span><span style="color:#e06c75;">response </span><span style="color:#c678dd;">= </span><span>JSON.</span><span style="color:#61afef;">parse</span><span>(</span><span style="color:#e06c75;">data</span><span>);
</span><span>    </span><span style="color:#e06c75;">isObject </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">true</span><span>;
</span><span>  } </span><span style="color:#c678dd;">catch </span><span>(</span><span style="color:#e06c75;">e</span><span>) {
</span><span>    </span><span style="color:#e06c75;">response </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">data</span><span>;
</span><span>  }
</span><span>
</span><span>  </span><span style="color:#e06c75;">this</span><span>.</span><span style="color:#e06c75;">response </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">response</span><span>;
</span><span>  </span><span style="color:#e06c75;">this</span><span>.</span><span style="color:#e06c75;">message </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">message</span><span>;
</span><span>  </span><span style="color:#e06c75;">this</span><span>.status </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">status</span><span>;
</span><span>  </span><span style="color:#e06c75;">this</span><span>.</span><span style="color:#61afef;">toString </span><span style="color:#c678dd;">= function </span><span>() {
</span><span>    </span><span style="color:#c678dd;">return </span><span style="color:#98c379;">`${ </span><span style="color:#e06c75;">this</span><span style="color:#98c379;">.</span><span style="color:#e06c75;">message </span><span style="color:#98c379;">}</span><span style="color:#56b6c2;">\n</span><span style="color:#98c379;">Response:</span><span style="color:#56b6c2;">\n</span><span style="color:#98c379;">${ </span><span style="color:#e06c75;">isObject </span><span style="color:#c678dd;">? </span><span style="color:#98c379;">JSON.</span><span style="color:#61afef;">stringify</span><span style="color:#98c379;">(</span><span style="color:#e06c75;">this</span><span style="color:#98c379;">.</span><span style="color:#e06c75;">response</span><span style="color:#98c379;">, </span><span style="color:#e5c07b;">null</span><span style="color:#98c379;">, </span><span style="color:#e5c07b;">2</span><span style="color:#98c379;">) </span><span style="color:#c678dd;">: </span><span style="color:#e06c75;">this</span><span style="color:#98c379;">.</span><span style="color:#e06c75;">response </span><span style="color:#98c379;">}`</span><span>;
</span><span>  };
</span><span>}
</span><span>
</span><span style="color:#5c6370;">// API wrapper function
</span><span style="color:#c678dd;">const </span><span style="color:#61afef;">fetchResource </span><span style="color:#c678dd;">= </span><span>(</span><span style="color:#e06c75;">path</span><span>, </span><span style="color:#e06c75;">userOptions </span><span style="color:#c678dd;">= </span><span>{}) </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>  </span><span style="color:#5c6370;">// Define default options
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">defaultOptions </span><span style="color:#c678dd;">= </span><span>{};
</span><span>  </span><span style="color:#5c6370;">// Define default headers
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">defaultHeaders </span><span style="color:#c678dd;">= </span><span>{};
</span><span>
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">options </span><span style="color:#c678dd;">= </span><span>{
</span><span>    </span><span style="color:#5c6370;">// Merge options
</span><span>    </span><span style="color:#c678dd;">...</span><span style="color:#e06c75;">defaultOptions</span><span>,
</span><span>    </span><span style="color:#c678dd;">...</span><span style="color:#e06c75;">userOptions</span><span>,
</span><span>    </span><span style="color:#5c6370;">// Merge headers
</span><span>    headers: {
</span><span>      </span><span style="color:#c678dd;">...</span><span style="color:#e06c75;">defaultHeaders</span><span>,
</span><span>      </span><span style="color:#c678dd;">...</span><span style="color:#e06c75;">userOptions</span><span>.headers,
</span><span>    },
</span><span>  };
</span><span>
</span><span>  </span><span style="color:#5c6370;">// Build Url
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">url </span><span style="color:#c678dd;">= </span><span style="color:#98c379;">`${ </span><span style="color:#e06c75;">API_URL </span><span style="color:#98c379;">}/${ </span><span style="color:#e06c75;">path </span><span style="color:#98c379;">}`</span><span>;
</span><span>
</span><span>  </span><span style="color:#5c6370;">// Detect is we are uploading a file
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">isFile </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">options</span><span>.body </span><span style="color:#c678dd;">instanceof </span><span>File;
</span><span>
</span><span>  </span><span style="color:#5c6370;">// Stringify JSON data
</span><span>  </span><span style="color:#5c6370;">// If body is not a file
</span><span>  </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#e06c75;">options</span><span>.body </span><span style="color:#c678dd;">&amp;&amp; typeof </span><span style="color:#e06c75;">options</span><span>.body </span><span style="color:#c678dd;">=== </span><span style="color:#98c379;">&#39;object&#39; </span><span style="color:#c678dd;">&amp;&amp; !</span><span style="color:#e06c75;">isFile</span><span>) {
</span><span>    </span><span style="color:#e06c75;">options</span><span>.body </span><span style="color:#c678dd;">= </span><span>JSON.</span><span style="color:#61afef;">stringify</span><span>(</span><span style="color:#e06c75;">options</span><span>.body);
</span><span>  }
</span><span>
</span><span>  </span><span style="color:#5c6370;">// Variable which will be used for storing response
</span><span>  </span><span style="color:#c678dd;">let </span><span style="color:#e06c75;">response </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">null</span><span>;
</span><span>
</span><span>  </span><span style="color:#c678dd;">return </span><span style="color:#61afef;">fetch</span><span>(</span><span style="color:#e06c75;">url</span><span>, </span><span style="color:#e06c75;">options</span><span>)
</span><span>    .</span><span style="color:#61afef;">then</span><span>(</span><span style="color:#e06c75;">responseObject </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>      </span><span style="color:#5c6370;">// Saving response for later use in lower scopes
</span><span>      </span><span style="color:#e06c75;">response </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">responseObject</span><span>;
</span><span>
</span><span>      </span><span style="color:#5c6370;">// HTTP unauthorized
</span><span>      </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#e06c75;">response</span><span>.status </span><span style="color:#c678dd;">=== </span><span style="color:#e5c07b;">401</span><span>) {
</span><span>        </span><span style="color:#5c6370;">// Handle unauthorized requests
</span><span>        </span><span style="color:#5c6370;">// Maybe redirect to login page?
</span><span>      }
</span><span>
</span><span>      </span><span style="color:#5c6370;">// Check for error HTTP error codes
</span><span>      </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#e06c75;">response</span><span>.status </span><span style="color:#c678dd;">&lt; </span><span style="color:#e5c07b;">200 </span><span style="color:#c678dd;">|| </span><span style="color:#e06c75;">response</span><span>.status </span><span style="color:#c678dd;">&gt;= </span><span style="color:#e5c07b;">300</span><span>) {
</span><span>        </span><span style="color:#5c6370;">// Get response as text
</span><span>        </span><span style="color:#c678dd;">return </span><span style="color:#e06c75;">response</span><span>.</span><span style="color:#61afef;">text</span><span>();
</span><span>      }
</span><span>
</span><span>      </span><span style="color:#5c6370;">// Get response as json
</span><span>      </span><span style="color:#c678dd;">return </span><span style="color:#e06c75;">response</span><span>.</span><span style="color:#61afef;">json</span><span>();
</span><span>    })
</span><span>    </span><span style="color:#5c6370;">// &quot;parsedResponse&quot; will be either text or javascript object depending if
</span><span>    </span><span style="color:#5c6370;">// &quot;response.text()&quot; or &quot;response.json()&quot; got called in the upper scope
</span><span>    .</span><span style="color:#61afef;">then</span><span>(</span><span style="color:#e06c75;">parsedResponse </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>      </span><span style="color:#5c6370;">// Check for HTTP error codes
</span><span>      </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#e06c75;">response</span><span>.status </span><span style="color:#c678dd;">&lt; </span><span style="color:#e5c07b;">200 </span><span style="color:#c678dd;">|| </span><span style="color:#e06c75;">response</span><span>.status </span><span style="color:#c678dd;">&gt;= </span><span style="color:#e5c07b;">300</span><span>) {
</span><span>        </span><span style="color:#5c6370;">// Throw error
</span><span>        </span><span style="color:#c678dd;">throw </span><span style="color:#e06c75;">parsedResponse</span><span>;
</span><span>      }
</span><span>
</span><span>      </span><span style="color:#5c6370;">// Request succeeded
</span><span>      </span><span style="color:#c678dd;">return </span><span style="color:#e06c75;">parsedResponse</span><span>;
</span><span>    })
</span><span>    .</span><span style="color:#61afef;">catch</span><span>(</span><span style="color:#e06c75;">error </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>      </span><span style="color:#5c6370;">// Throw custom API error
</span><span>      </span><span style="color:#5c6370;">// If response exists it means HTTP error occured
</span><span>      </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#e06c75;">response</span><span>) {
</span><span>        </span><span style="color:#c678dd;">throw new </span><span>ApiError(</span><span style="color:#98c379;">`Request failed with status ${ </span><span style="color:#e06c75;">response</span><span style="color:#98c379;">.status }.`</span><span>, </span><span style="color:#e06c75;">error</span><span>, </span><span style="color:#e06c75;">response</span><span>.status);
</span><span>      } </span><span style="color:#c678dd;">else </span><span>{
</span><span>        </span><span style="color:#c678dd;">throw new </span><span>ApiError(</span><span style="color:#e06c75;">error</span><span>.</span><span style="color:#61afef;">toString</span><span>(), </span><span style="color:#e5c07b;">null</span><span>, </span><span style="color:#98c379;">&#39;REQUEST_FAILED&#39;</span><span>);
</span><span>      }
</span><span>    });
</span><span>};
</span><span>
</span><span style="color:#c678dd;">export default </span><span style="color:#e06c75;">fetchResource</span><span>;
</span></code></pre>
<h2 id="usage">Usage<a
  class="header-anchor"
  href="#usage" aria-label="Anchor link for: usage"
  title="Anchor link for: usage"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p><code>fetchResource</code> accepts two arguments, mandatory URL and optional options to be passed to the <code>fetch</code> request.
If you wrap each API request in a function with it's specific options it will be easier to maintain.</p>
<p>Few examples:</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#5c6370;">// Simple get request
</span><span style="color:#c678dd;">function </span><span style="color:#61afef;">getUsers</span><span>() {
</span><span>  </span><span style="color:#c678dd;">return </span><span style="color:#61afef;">fetchResource</span><span>(</span><span style="color:#98c379;">&#39;users&#39;</span><span>);
</span><span>}
</span><span>
</span><span style="color:#5c6370;">// Post request with payload
</span><span style="color:#c678dd;">function </span><span style="color:#61afef;">signIn</span><span>(</span><span style="color:#e06c75;">username</span><span>, </span><span style="color:#e06c75;">password</span><span>) {
</span><span>  </span><span style="color:#c678dd;">return </span><span style="color:#61afef;">fetchResource</span><span>(</span><span style="color:#98c379;">&#39;signin&#39;</span><span>, {
</span><span>    method: </span><span style="color:#98c379;">&#39;POST&#39;</span><span>,
</span><span>    body: {
</span><span>      </span><span style="color:#e06c75;">username</span><span>,
</span><span>      </span><span style="color:#e06c75;">password</span><span>,
</span><span>    },
</span><span>  });
</span><span>}
</span><span>
</span><span style="color:#5c6370;">// Put request, with file data and custom headers
</span><span style="color:#c678dd;">function </span><span style="color:#61afef;">uploadAvatar</span><span>(</span><span style="color:#e06c75;">userId</span><span>, </span><span style="color:#e06c75;">file</span><span>) {
</span><span>  </span><span style="color:#c678dd;">return </span><span style="color:#61afef;">fetchResource</span><span>(</span><span style="color:#98c379;">`users/${ </span><span style="color:#e06c75;">userId </span><span style="color:#98c379;">}/avatar/`</span><span>, {
</span><span>    method: </span><span style="color:#98c379;">&#39;PUT&#39;</span><span>,
</span><span>    body: </span><span style="color:#e06c75;">file</span><span>,
</span><span>    headers: {
</span><span>      </span><span style="color:#98c379;">&#39;Content-Type&#39;</span><span>: </span><span style="color:#e06c75;">file</span><span>.type,
</span><span>    },
</span><span>  });
</span><span>}
</span></code></pre>
<p>Then you call newly created API functions,
they will return a Promise, so you need to define <code>then</code> (and <code>catch</code> for errors).</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#61afef;">getUsers</span><span>()
</span><span>  .</span><span style="color:#61afef;">then</span><span>(</span><span style="color:#e06c75;">userData </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>    </span><span style="color:#5c6370;">// Do something with the &quot;data&quot;
</span><span>  })
</span><span>  .</span><span style="color:#61afef;">catch</span><span>(</span><span style="color:#e06c75;">error </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>    </span><span style="color:#5c6370;">// Handle error
</span><span>    </span><span style="color:#5c6370;">// error.message (error text)
</span><span>    </span><span style="color:#5c6370;">// error.status (HTTTP status or &#39;REQUEST_FAILED&#39;)
</span><span>    </span><span style="color:#5c6370;">// error.response (text, object or null)
</span><span>  })
</span></code></pre>
<h3 id="demo">Demo<a
  class="header-anchor"
  href="#demo" aria-label="Anchor link for: demo"
  title="Anchor link for: demo"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>I've cooked a small demo to show it in practice, in which I used free <a href="https://swapi.co">Star Wars API</a>.</p>
<iframe
  height="500"
  
  scrolling="no"
  title="Simple JavaScript API wrapper demo"
  src="https://codepen.io/stanko/embed/LOoPQp?default-tab=result"
  frameborder="no"
  loading="lazy"
  allowtransparency="true"
  allowfullscreen="true"
>
  See the Pen <a href="https://codepen.io/stanko/pen/LOoPQp">
  Simple JavaScript API wrapper demo</a> by Stanko (<a href="https://codepen.io/stanko">@stanko</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
<p>Feel free to play with it <a href="https://codepen.io/stanko/pen/LOoPQp?editors=0110">on CodePen</a>.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>React Window decorators</title>
		<published>2017-12-02T00:00:00+00:00</published>
		<updated>2017-12-02T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/react-decorators-and-scroll-manager/" type="text/html"/>
		<id>https://muffinman.io/blog/react-decorators-and-scroll-manager/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Two days ago I released two npm packages,
<a href="https://www.npmjs.com/package/window-scroll-manager">window-scroll-manager</a> and
<a href="https://www.npmjs.com/package/react-window-decorators">react-window-decorators</a>.</p>
<h2 id="scroll-manager">Scroll manager<a
  class="header-anchor"
  href="#scroll-manager" aria-label="Anchor link for: scroll-manager"
  title="Anchor link for: scroll-manager"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p><span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  Scroll manager
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span><a href="https://muffinman.io/react-plx/">Plx</a> uses the
same scroll manager so I extracted it to the standalone package.<span class="sidenote__bracket">)</span></span>

is just a simple wrapper around scroll event, that broadcasts custom
<code>window-scroll</code> event once per <code>requestAnimationFrame</code>.
Idea comes from <a href="https://developer.mozilla.org/en-US/docs/Web/Events/scroll#Example">MDN</a>.</p>
<h2 id="react-decorators">React decorators<a
  class="header-anchor"
  href="#react-decorators" aria-label="Anchor link for: react-decorators"
  title="Anchor link for: react-decorators"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>or higher order components are the bees knees,
as they bring easy way to track window scroll and resize events in React.
They will track and inject props directly into React components.
Check the <a href="https://muffinman.io/react-window-decorators/">demo</a>.</p>
<span id="continue-reading"></span>
<p>Two decorators included are:</p>
<h3 id="withscroll-decorator">withScroll decorator<a
  class="header-anchor"
  href="#withscroll-decorator" aria-label="Anchor link for: withscroll-decorator"
  title="Anchor link for: withscroll-decorator"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>tracks and injects window scroll position (by using scroll manager)</p>
<h3 id="withwindow-decorator">withWindow decorator<a
  class="header-anchor"
  href="#withwindow-decorator" aria-label="Anchor link for: withwindow-decorator"
  title="Anchor link for: withwindow-decorator"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>tracks and injects window size, orientation and
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  breakpoint
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>User needs to pass breakpoints definition.<span class="sidenote__bracket">)</span></span>
</p>
<h3 id="how-do-they-work">How do they work?<a
  class="header-anchor"
  href="#how-do-they-work" aria-label="Anchor link for: how-do-they-work"
  title="Anchor link for: how-do-they-work"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Both scroll and resize decorators are listening to custom events,
rather than the native ones. This is because both
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  <code>scroll</code> and <code>resize</code> events
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Especially scroll event.<span class="sidenote__bracket">)</span></span>

are triggered a lot and can cause performance issues.</p>
<p>That's why I introduced custom <code>window-scroll</code> and <code>window-resize</code> events.
Plus, all updates are wrapped in <code>requestAnimationFrame</code> and resize event is
debounced (configurable, 250ms by default).</p>
<p>So the heavy lifting is done by scroll and window managers, which are both singletons,
while the React decorators are slim components that inject props to the wrapped component.</p>
<p>Please note that using <code>withScroll</code> on a lot of components
can introduce performance issues. Then again ten-ish should work just fine.
I used these on numerous projects, they are battle tested, but it took me
some time to put in the effort to release them as a standalone package.</p>
<h2 id="check-the-code">Check the code<a
  class="header-anchor"
  href="#check-the-code" aria-label="Anchor link for: check-the-code"
  title="Anchor link for: check-the-code"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Of course, both packages are available on GitHub:</p>
<ul>
<li><a href="https://github.com/Stanko/window-scroll-manager">Scroll manager</a></li>
<li><a href="https://github.com/Stanko/react-window-decorators">React decorators</a></li>
</ul>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Firefox 57 CPU usage is insane</title>
		<published>2017-11-28T00:00:00+00:00</published>
		<updated>2017-11-28T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/firefox-57-cpu-usage-is-insane/" type="text/html"/>
		<id>https://muffinman.io/blog/firefox-57-cpu-usage-is-insane/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>This is a sad rant :(</p>
<p>I love Firefox (and Mozilla too) and have never switched to
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  Chrome
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Although I use Chrome for development.<span class="sidenote__bracket">)</span></span>

But few days ago I switched to Opera, because new Firefox's (aka Quantum)
CPU usage is insane.</p>
<p><img src="/img/ff.jpg" alt="Firefox :(" /></p>
<p>Disabling extensions didn't help, it just hogs all available resources.
MacOS is giving me &quot;Service Battery&quot; warning when Firefox is running.
And battery last about four times(!) shorter.</p>
<span id="continue-reading"></span>
<p>So I checked my options, and decided to go with Opera.
One of my favorite features in Firefox, tabs on the side,
is not supported in Chrome and Safari, so only decent browser left was Opera.</p>
<p>Opera has <a href="https://addons.opera.com/en/extensions/details/tree-tabs/?display=en">Tree Tabs</a> extension,
which is not as good as <a href="https://addons.mozilla.org/en-US/firefox/addon/tree-style-tab/">Tree Style Tab</a>
but it is good enough. I'm getting used to it, and so far so good.
Although I do hope Firefox will resolve CPU issues.</p>
<p>If they haven't hyped it so much, I probably wouldn't be writing this.
But they raised my expectations, how much faster and better it is, how they finally
caught up... and it is bad, like really bad.
I've tried both beta and developer editions some time ago,
and fans were going crazy, CPU usage was going through the roof, battery drainage...
But I hoped that it will get resolved before they release a stable version.</p>
<p>I'm really sad, but if they don't fix this I won't be switching back to Firefox.
Still, I'm going to continue supporting and donating to Mozilla.
On the plus side, <a href="https://developer.mozilla.org/en-US/">MDN</a> is one of the best sites
for web development resources.</p>
<p><strong>Update 02. Decemeber 2017</strong></p>
<p>It seems that guys from Mozilla are
<a href="https://www.reddit.com/r/firefox/comments/7g6k9n/firefox_quantum_is_eating_your_cpu_help_us_debug/">aware of it</a>
and that they are trying to fix it. Hooray!</p>
<p><strong>Update 04. December 2018</strong></p>
<p>Unfortunately, even today with version 63.0.3 issue doesn't seem to be resolved. I'm sticking with Opera, but I switched to <a href="https://addons.opera.com/en/extensions/details/simple-vertical-tabs/">Simple Vertical Tabs</a> extension.</p>
<p><strong>Update 26. September 2019</strong></p>
<p><a href="/blog/back-to-firefox/">It is fixed!</a></p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Blog redesign</title>
		<published>2017-11-27T00:00:00+00:00</published>
		<updated>2017-11-27T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/redesign-again/" type="text/html"/>
		<id>https://muffinman.io/blog/redesign-again/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Muffin Man is back! This time with new visual identity.</p>
<p>This was long overdue, but new design took me
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  more than I wanted to.
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Mostly because of the <a href="/blog/trillion-ideas/">trillion</a> things I'm working on.<span class="sidenote__bracket">)</span></span>

Now I can get back to writing.</p>
<p>Alogn with the new design, some other things got updated too,
hopefully making content easier to browse. To name a few:</p>
<ul>
<li>Archive is now one page with category accordion (every category used to have a dedicated page)</li>
<li>You can now find related posts under each post (instead of the latest ones)</li>
<li>Search results are now navigable using arrows</li>
</ul>
<p>I ditched custom Jekyll plugins to be able to use GitHub to automatically build the whole thing.
Some of them got rewritten to Liquid.</p>
<p>Hope you like it!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Two design articles</title>
		<published>2017-10-27T00:00:00+00:00</published>
		<updated>2017-10-27T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/design-articles/" type="text/html"/>
		<id>https://muffinman.io/blog/design-articles/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Just wanted to share two articles that helped me understand visual design better.
I was already aware of the most of these things, but having someone explain it how and why was really helpful.</p>
<ul>
<li><a href="https://medium.com/@erikdkennedy/7-rules-for-creating-gorgeous-ui-part-1-559d4e805cda">7 Rules for Creating Gorgeous UI</a></li>
<li><a href="https://medium.muz.li/optical-effects-9fca82b4cd9a">Optical Effects in User Interfaces (for True Nerds)</a></li>
</ul>
<h3 id="learn-more-about-design">Learn more about design<a
  class="header-anchor"
  href="#learn-more-about-design" aria-label="Anchor link for: learn-more-about-design"
  title="Anchor link for: learn-more-about-design"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>When asked how to learn more about design as a developer,
design partner in my company recommended studying work of these two designers.
I haven't taken my time to do it, but it is on my todo list.</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Massimo_Vignelli">Massimo Vignelli</a> - author of NYC subway map</li>
<li><a href="https://en.wikipedia.org/wiki/Paul_Rand">Paul Rand</a> - author of IBM logo</li>
</ul>
<p>Frontend developers should have at least basic understanding of visual design.
Because great products are symbiosis of both great design and great tech.
Hopefully, these links will help you in that regard.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Animate between two react components</title>
		<published>2017-10-24T00:00:00+00:00</published>
		<updated>2017-10-24T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/animate-between-two-react-components/" type="text/html"/>
		<id>https://muffinman.io/blog/animate-between-two-react-components/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Just a quick proof of concept I made for transitioning between two react components.
It animates height (of the parent) and fades components into each other.</p>
<iframe
  height="500"
  
  scrolling="no"
  title="React transition between two components"
  src="https://codepen.io/stanko/embed/eGwNZd?default-tab=result"
  frameborder="no"
  loading="lazy"
  allowtransparency="true"
  allowfullscreen="true"
>
  See the Pen <a href="https://codepen.io/stanko/pen/eGwNZd">
  React transition between two components</a> by Stanko (<a href="https://codepen.io/stanko">@stanko</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
<p>In <code>componentWillReceiveProps</code> it checks if <code>children</code> prop has changed.
When that happens, it will save currently rendered children and the height of the wrapper.</p>
<p>Then it will animate wrapper's height to a new component's height,
fade out previous component and fade in the new one.
Finally when animation is finished it will reset wrapper's height to <code>auto</code>.</p>
<p>I might release it as a standalone npm component, but it needs some polishing before I do so.
If you make use out of it, please share in the comments.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Setting up Webpack, Babel and React from scratch, revisited</title>
		<published>2017-10-07T00:00:00+00:00</published>
		<updated>2017-10-07T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/webpack-babel-react-revisited/" type="text/html"/>
		<id>https://muffinman.io/blog/webpack-babel-react-revisited/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Last summer I wrote <a href="/blog/setting-up-webpack-babel-and-react-from-scratch/">this post</a>
which quickly became my most popular one to day.
With webpack 2 and 3 it got outdated, so I decided to write a new one.</p>
<h2 id="before-we-start">Before we start<a
  class="header-anchor"
  href="#before-we-start" aria-label="Anchor link for: before-we-start"
  title="Anchor link for: before-we-start"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I'll assume you have a basic knowledge of unix terminal, npm and JavaScript.
You did some React, but now you want to level up and learn how setup React projects from scratch.</p>
<p>This is detailed step-by-step guide, as I'll try to explain the whole process.
If you just want code to play with, check <a href="https://github.com/Stanko/webpack-babel-react-revisited">this repository</a> I created for this tutorial.</p>
<p>Every time I talk about changing a source file, I'll paste complete file's content beneath it.
You can look for <code>ADDED IN THIS STEP</code> comments which point out specific things that changed.</p>
<p>Please note that this tutorial is written on macOS using node 8.5.0,
but it should work on Linux and Windows without any major issues.
If you find something that is not working,
please provide a correction in the comments below.</p>
<h2 id="what-are-we-trying-to-build">What are we trying to build?<a
  class="header-anchor"
  href="#what-are-we-trying-to-build" aria-label="Anchor link for: what-are-we-trying-to-build"
  title="Anchor link for: what-are-we-trying-to-build"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Simple development setup for React applications using Webpack and Babel.
But my main goal is for people to better understand these tools and how to use them.</p>
<p>Setup that we are going to create is minimal, but it follows the best practices
and gives you a solid ground to start from.</p>
<span id="continue-reading"></span><h3 id="who-am-i-and-why-should-you-listen-to-me">Who am I and why should you listen to me?<a
  class="header-anchor"
  href="#who-am-i-and-why-should-you-listen-to-me" aria-label="Anchor link for: who-am-i-and-why-should-you-listen-to-me"
  title="Anchor link for: who-am-i-and-why-should-you-listen-to-me"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Well, I'm a principal developer at <a href="https://work.co">Work&amp;Co</a>.
I have a lot of experience on production level React projects,
for clients like Twitter, Mastercard, Aeromexico, Hampton Creek...
<a href="https://github.com/workco/marvin">Marvin</a>
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  boilerplate
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>We have big plans for Marvin in the near future.<span class="sidenote__bracket">)</span></span>

is my creation as well,
and what I'm trying to teach you is directly based on my experience on these projects.</p>
<h2 id="init">Init<a
  class="header-anchor"
  href="#init" aria-label="Anchor link for: init"
  title="Anchor link for: init"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Create a new folder, and <code>package.json</code> file in it, with the following content:</p>
<pre data-lang="json" style="background-color:#282c34;color:#dcdfe4;" class="language-json "><code class="language-json" data-lang="json"><span>{
</span><span>  </span><span style="color:#98c379;">&quot;name&quot;</span><span>: </span><span style="color:#98c379;">&quot;webpack-babel-react-revisited&quot;
</span><span>}
</span></code></pre>
<p>Of course you can replace &quot;webpack-babel-react-revisited&quot; with your project name.</p>



<div class="spoiler ">
  <button
    aria-expanded="false"
    aria-controls='spoiler-1'
    class="spoiler__toggle btn btn--sm btn--empty"
  >
    <span
      class="spoiler__show"
      
    >
      
        Show file structure after this step
      
      <span aria-hidden="true">+</span> <!-- TODO add icon -->
    </span>
    <span
      class="spoiler__hide"
      style="display: none"
    >
      
        Hide file structure after this step
      
      <span aria-hidden="true">-</span> <!-- TODO add icon -->
    </span>
  </button>

  <div
    id='spoiler-1'
    class="spoiler__content"
    aria-hidden="true"
    style="display: none"
  >
    <pre style="background-color:#282c34;color:#dcdfe4;"><code><span>- package.json
</span></code></pre>

  </div>
</div>
<h2 id="webpack">Webpack<a
  class="header-anchor"
  href="#webpack" aria-label="Anchor link for: webpack"
  title="Anchor link for: webpack"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>We'll start with installing webpack for module bundling.
It will transpile and bundle our JavaScript files, compile SASS or PostCSS,
optimize images... and a bunch of other nifty things.</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>npm install --save-dev webpack
</span></code></pre>
<p>Then we need some modules.
We'll keep our source files in <code>src</code> folder, so we need to create it.
Then create <code>js</code> folder in the <code>src</code> folder you just created, and <code>app.js</code> file in it.</p>
<p>Add a simple <code>console.log('Hello world!');</code> to <code>app.js</code>;</p>
<p>Now we can run webpack from the terminal for the first time:</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>./node_modules/webpack/bin/webpack.js ./src/js/app.js --output-filename ./dist/app.bundle.js
</span></code></pre>
<p>If you open generated <code>app.bundle.js</code> you'll see webpack's module handling code at the top,
and at the end you'll find our modest <code>console.log</code>.
Webpack's code does all the work with modules</p>
<ul>
<li>connecting them together while keeping them in separate scopes.
At this point we are not leveraging that (yet).</li>
</ul>
<p>This command runs webpack using our <code>app.js</code> as entry and outputs the result to the <code>dist</code> folder.
As it already looks complicated we'll start moving webpack configuration to a file.</p>
<p>Let's create <code>webpack.config.js</code> in our project's root.
We need to add config we just used -
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  only entry and output paths.
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>Plus <code>paths</code> constant. I like to keep paths in the constant object, as it makes things easier to read.<span class="sidenote__bracket">)</span></span>
</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#5c6370;">// We are using node&#39;s native package &#39;path&#39;
</span><span style="color:#5c6370;">// https://nodejs.org/api/path.html
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">path </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">require</span><span>(</span><span style="color:#98c379;">&#39;path&#39;</span><span>);
</span><span>
</span><span style="color:#5c6370;">// Constant with our paths
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">paths </span><span style="color:#c678dd;">= </span><span>{
</span><span>  DIST: </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">resolve</span><span>(__dirname, </span><span style="color:#98c379;">&#39;dist&#39;</span><span>),
</span><span>  JS: </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">resolve</span><span>(__dirname, </span><span style="color:#98c379;">&#39;src/js&#39;</span><span>),
</span><span>};
</span><span>
</span><span style="color:#5c6370;">// Webpack configuration
</span><span>module.exports </span><span style="color:#c678dd;">= </span><span>{
</span><span>  entry: </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">join</span><span>(</span><span style="color:#e06c75;">paths</span><span>.</span><span style="color:#e06c75;">JS</span><span>, </span><span style="color:#98c379;">&#39;app.js&#39;</span><span>),
</span><span>  output: {
</span><span>    path: </span><span style="color:#e06c75;">paths</span><span>.</span><span style="color:#e06c75;">DIST</span><span>,
</span><span>    filename: </span><span style="color:#98c379;">&#39;app.bundle.js&#39;
</span><span>  },
</span><span>};
</span></code></pre>
<p>You'll see that we added our <code>app.js</code> as entry and for the output
we selected <code>dist</code> folder and <code>app.bundle.js</code> as the filename.</p>
<p>Now we can run webpack without inline configuration.
By default webpack looks for <code>webpack.config.js</code> and reads config from it.</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>./node_modules/webpack/bin/webpack.js
</span></code></pre>
<p>This command has the exact same result as the first one.
Now let's try to make it even nicer.</p>
<p>Open <code>package.json</code> which at this point should look like this:</p>
<pre data-lang="json" style="background-color:#282c34;color:#dcdfe4;" class="language-json "><code class="language-json" data-lang="json"><span>{
</span><span>  </span><span style="color:#98c379;">&quot;name&quot;</span><span>: </span><span style="color:#98c379;">&quot;webpack-babel-react-revisited&quot;</span><span>,
</span><span>  </span><span style="color:#98c379;">&quot;devDependencies&quot;</span><span>: {
</span><span>    </span><span style="color:#98c379;">&quot;webpack&quot;</span><span>: </span><span style="color:#98c379;">&quot;^3.6.0&quot;
</span><span>  }
</span><span>}
</span></code></pre>
<p>We'll add <code>script</code> section.
In this sections, let's add <code>build</code> task with only one command - <code>webpack</code>.</p>
<pre data-lang="json" style="background-color:#282c34;color:#dcdfe4;" class="language-json "><code class="language-json" data-lang="json"><span>{
</span><span>  </span><span style="color:#98c379;">&quot;name&quot;</span><span>: </span><span style="color:#98c379;">&quot;webpack-babel-react-revisited&quot;</span><span>,
</span><span>  </span><span style="color:#98c379;">&quot;devDependencies&quot;</span><span>: {
</span><span>    </span><span style="color:#98c379;">&quot;webpack&quot;</span><span>: </span><span style="color:#98c379;">&quot;^3.6.0&quot;
</span><span>  },
</span><span>  </span><span style="color:#98c379;">&quot;scripts&quot;</span><span>: {
</span><span>    </span><span style="color:#98c379;">&quot;build&quot;</span><span>: </span><span style="color:#98c379;">&quot;webpack&quot;
</span><span>  }
</span><span>}
</span></code></pre>
<p>Now we can run it using:</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>npm run build
</span></code></pre>
<p>Npm tasks allow us not to type full path to the package binary every time.
It searches for locally installed packages in the project's <code>node_modules</code> folder.</p>
<p>Again, it has the same result like the previous command,
but it is cleaner as it uses npm tasks instead of bare terminal commands.</p>
<p>Now we have our simple <code>build</code> process, so we can proceed with development setup.</p>



<div class="spoiler ">
  <button
    aria-expanded="false"
    aria-controls='spoiler-2'
    class="spoiler__toggle btn btn--sm btn--empty"
  >
    <span
      class="spoiler__show"
      
    >
      
        Show file structure after this step
      
      <span aria-hidden="true">+</span> <!-- TODO add icon -->
    </span>
    <span
      class="spoiler__hide"
      style="display: none"
    >
      
        Hide file structure after this step
      
      <span aria-hidden="true">-</span> <!-- TODO add icon -->
    </span>
  </button>

  <div
    id='spoiler-2'
    class="spoiler__content"
    aria-hidden="true"
    style="display: none"
  >
    <pre style="background-color:#282c34;color:#dcdfe4;"><code><span>dist # created by webpack when we run &#39;npm run build&#39;
</span><span>node_modules # created by npm
</span><span>src
</span><span>  js
</span><span>    - app.js
</span><span>- package-lock.json # created by npm (for node v8 and higher)
</span><span>- package.json
</span><span>- webpack.config.js
</span></code></pre>

  </div>
</div>
<h3 id="webpack-dev-server">Webpack dev server<a
  class="header-anchor"
  href="#webpack-dev-server" aria-label="Anchor link for: webpack-dev-server"
  title="Anchor link for: webpack-dev-server"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>To be able to open our application in a browser, we'll need a server.
Webpack already provides us with a <a href="https://webpack.js.org/configuration/dev-server/">dev server</a>.
It will server our files during development (obviosly),
but also enable us to use hot module reload (not covered by this post).</p>
<p>Let's install it:</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>npm install --save-dev webpack-dev-server
</span></code></pre>
<p>Let's update <code>package.json</code> right away to make it easier to run dev server.</p>
<pre data-lang="json" style="background-color:#282c34;color:#dcdfe4;" class="language-json "><code class="language-json" data-lang="json"><span>{
</span><span>  </span><span style="color:#98c379;">&quot;name&quot;</span><span>: </span><span style="color:#98c379;">&quot;webpack-babel-react-revisited&quot;</span><span>,
</span><span>  </span><span style="color:#98c379;">&quot;devDependencies&quot;</span><span>: {
</span><span>    </span><span style="color:#98c379;">&quot;webpack&quot;</span><span>: </span><span style="color:#98c379;">&quot;^3.6.0&quot;</span><span>,
</span><span>    </span><span style="color:#98c379;">&quot;webpack-dev-server&quot;</span><span>: </span><span style="color:#98c379;">&quot;^2.9.1&quot;
</span><span>  },
</span><span>  </span><span style="color:#98c379;">&quot;scripts&quot;</span><span>: {
</span><span>    </span><span style="color:#98c379;">&quot;dev&quot;</span><span>: </span><span style="color:#98c379;">&quot;webpack-dev-server&quot;</span><span>,
</span><span>    </span><span style="color:#98c379;">&quot;build&quot;</span><span>: </span><span style="color:#98c379;">&quot;webpack&quot;
</span><span>  }
</span><span>}
</span></code></pre>
<p>We added only one line: <code>&quot;dev&quot;: &quot;webpack-dev-server&quot;,</code>.</p>
<p>Now if you run</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>npm run dev
</span></code></pre>
<p>it will fire up our development server, and it is going to be available at <a href="http://localhost:8080">http://localhost:8080</a>.
Now it will just list our project's files.</p>
<p>So let's create a simple <code>index.html</code> in the <code>src</code> folder</p>
<pre data-lang="html" style="background-color:#282c34;color:#dcdfe4;" class="language-html "><code class="language-html" data-lang="html"><span>&lt;!doctype html&gt;
</span><span>&lt;</span><span style="color:#e06c75;">html</span><span>&gt;
</span><span>  &lt;</span><span style="color:#e06c75;">head</span><span>&gt;
</span><span>    &lt;</span><span style="color:#e06c75;">meta </span><span style="color:#e5c07b;">charset</span><span>=</span><span style="color:#98c379;">&quot;utf-8&quot;</span><span>&gt;
</span><span>    &lt;</span><span style="color:#e06c75;">meta </span><span style="color:#e5c07b;">name</span><span>=</span><span style="color:#98c379;">&quot;viewport&quot; </span><span style="color:#e5c07b;">content</span><span>=</span><span style="color:#98c379;">&quot;width=device-width&quot;</span><span>&gt;
</span><span>
</span><span>    &lt;</span><span style="color:#e06c75;">title</span><span>&gt;Webpack Babel React revisited&lt;/</span><span style="color:#e06c75;">title</span><span>&gt;
</span><span>  &lt;/</span><span style="color:#e06c75;">head</span><span>&gt;
</span><span>  &lt;</span><span style="color:#e06c75;">body</span><span>&gt;
</span><span>  &lt;/</span><span style="color:#e06c75;">body</span><span>&gt;
</span><span>&lt;/</span><span style="color:#e06c75;">html</span><span>&gt;
</span></code></pre>
<p>and update <code>webpack.config.js</code> to use <code>src</code> as a content base.</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#5c6370;">// We are using node&#39;s native package &#39;path&#39;
</span><span style="color:#5c6370;">// https://nodejs.org/api/path.html
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">path </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">require</span><span>(</span><span style="color:#98c379;">&#39;path&#39;</span><span>);
</span><span>
</span><span style="color:#5c6370;">// Constant with our paths
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">paths </span><span style="color:#c678dd;">= </span><span>{
</span><span>  DIST: </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">resolve</span><span>(__dirname, </span><span style="color:#98c379;">&#39;dist&#39;</span><span>),
</span><span>  SRC: </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">resolve</span><span>(__dirname, </span><span style="color:#98c379;">&#39;src&#39;</span><span>), </span><span style="color:#5c6370;">// source folder path -&gt; ADDED IN THIS STEP
</span><span>  JS: </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">resolve</span><span>(__dirname, </span><span style="color:#98c379;">&#39;src/js&#39;</span><span>),
</span><span>};
</span><span>
</span><span style="color:#5c6370;">// Webpack configuration
</span><span>module.exports </span><span style="color:#c678dd;">= </span><span>{
</span><span>  entry: </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">join</span><span>(</span><span style="color:#e06c75;">paths</span><span>.</span><span style="color:#e06c75;">JS</span><span>, </span><span style="color:#98c379;">&#39;app.js&#39;</span><span>),
</span><span>  output: {
</span><span>    path: </span><span style="color:#e06c75;">paths</span><span>.</span><span style="color:#e06c75;">DIST</span><span>,
</span><span>    filename: </span><span style="color:#98c379;">&#39;app.bundle.js&#39;</span><span>,
</span><span>  },
</span><span>  </span><span style="color:#5c6370;">// Dev server configuration -&gt; ADDED IN THIS STEP
</span><span>  </span><span style="color:#5c6370;">// Now it uses our &quot;src&quot; folder as a starting point
</span><span>  devServer: {
</span><span>    contentBase: </span><span style="color:#e06c75;">paths</span><span>.</span><span style="color:#e06c75;">SRC</span><span>,
</span><span>  },
</span><span>};
</span></code></pre>
<p>Every time you change webpack config you need to restart webpack (or webpack dev server).</p>
<p>Restart <code>npm run dev</code> and visit <a href="http://localhost:8080">http://localhost:8080</a>, it will just show a blank page.
No signs of our JavaScript.
To automatically inject <code>&lt;script&gt;</code> tags with our bundled application we'll use
<a href="https://github.com/jantimon/html-webpack-plugin">html-webpack-plugin</a>.</p>
<h4 id="html-webpack-plugin">HTML Webpack Plugin<a
  class="header-anchor"
  href="#html-webpack-plugin" aria-label="Anchor link for: html-webpack-plugin"
  title="Anchor link for: html-webpack-plugin"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h4>
<p>This plugin simplifies creation of HTML files to serve your webpack bundles.
Let's install it:</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>npm install --save-dev html-webpack-plugin
</span></code></pre>
<p>Once installed we need to activate it in <code>webpack.config.js</code>.
Require it and add it to the <code>plugins</code> section of
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  the config:
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>We don't need <code>contentBase: paths.SRC</code> anymore as it will be handled by html plugin.
So we'll remove whole <code>devServer</code> configuration object for now.<span class="sidenote__bracket">)</span></span>
</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#5c6370;">// We are using node&#39;s native package &#39;path&#39;
</span><span style="color:#5c6370;">// https://nodejs.org/api/path.html
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">path </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">require</span><span>(</span><span style="color:#98c379;">&#39;path&#39;</span><span>);
</span><span>
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">HtmlWebpackPlugin </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">require</span><span>(</span><span style="color:#98c379;">&#39;html-webpack-plugin&#39;</span><span>); </span><span style="color:#5c6370;">// Import our plugin -&gt; ADDED IN THIS STEP
</span><span>
</span><span style="color:#5c6370;">// Constant with our paths
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">paths </span><span style="color:#c678dd;">= </span><span>{
</span><span>  DIST: </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">resolve</span><span>(__dirname, </span><span style="color:#98c379;">&#39;dist&#39;</span><span>),
</span><span>  SRC: </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">resolve</span><span>(__dirname, </span><span style="color:#98c379;">&#39;src&#39;</span><span>),
</span><span>  JS: </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">resolve</span><span>(__dirname, </span><span style="color:#98c379;">&#39;src/js&#39;</span><span>),
</span><span>};
</span><span>
</span><span style="color:#5c6370;">// Webpack configuration
</span><span>module.exports </span><span style="color:#c678dd;">= </span><span>{
</span><span>  entry: </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">join</span><span>(</span><span style="color:#e06c75;">paths</span><span>.</span><span style="color:#e06c75;">JS</span><span>, </span><span style="color:#98c379;">&#39;app.js&#39;</span><span>),
</span><span>  output: {
</span><span>    path: </span><span style="color:#e06c75;">paths</span><span>.</span><span style="color:#e06c75;">DIST</span><span>,
</span><span>    filename: </span><span style="color:#98c379;">&#39;app.bundle.js&#39;</span><span>,
</span><span>  },
</span><span>  </span><span style="color:#5c6370;">// Tell webpack to use html plugin -&gt; ADDED IN THIS STEP
</span><span>  </span><span style="color:#5c6370;">// index.html is used as a template in which it&#39;ll inject bundled app.
</span><span>  plugins: [
</span><span>    </span><span style="color:#c678dd;">new </span><span>HtmlWebpackPlugin({
</span><span>      template: </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">join</span><span>(</span><span style="color:#e06c75;">paths</span><span>.</span><span style="color:#e06c75;">SRC</span><span>, </span><span style="color:#98c379;">&#39;index.html&#39;</span><span>),
</span><span>    }),
</span><span>  ],
</span><span>  </span><span style="color:#5c6370;">// Dev server configuration -&gt; REMOVED IN THIS STEP
</span><span>  </span><span style="color:#5c6370;">// devServer: {
</span><span>  </span><span style="color:#5c6370;">//   contentBase: paths.SRC,
</span><span>  </span><span style="color:#5c6370;">// },
</span><span>};
</span></code></pre>
<p>When we restart <code>dev</code> task, we'll be able to see <code>Hello world!</code> in the console.
Now we are talking! We can start adding some modern JavaScript.</p>



<div class="spoiler ">
  <button
    aria-expanded="false"
    aria-controls='spoiler-3'
    class="spoiler__toggle btn btn--sm btn--empty"
  >
    <span
      class="spoiler__show"
      
    >
      
        Show file structure after this step
      
      <span aria-hidden="true">+</span> <!-- TODO add icon -->
    </span>
    <span
      class="spoiler__hide"
      style="display: none"
    >
      
        Hide file structure after this step
      
      <span aria-hidden="true">-</span> <!-- TODO add icon -->
    </span>
  </button>

  <div
    id='spoiler-3'
    class="spoiler__content"
    aria-hidden="true"
    style="display: none"
  >
    <pre style="background-color:#282c34;color:#dcdfe4;"><code><span>dist # created by webpack when we run &#39;npm run build&#39;
</span><span>node_modules # created by npm
</span><span>src
</span><span>  js
</span><span>    - app.js
</span><span>  - index.html
</span><span>- package-lock.json # created by npm (for node v8 and higher)
</span><span>- package.json
</span><span>- webpack.config.js
</span></code></pre>

  </div>
</div>
<h3 id="babel">Babel<a
  class="header-anchor"
  href="#babel" aria-label="Anchor link for: babel"
  title="Anchor link for: babel"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>To be able to use ES2015 and beyond we'll need to provide a transpiler.
Our choice is <a href="https://babeljs.io/">Babel</a>.
Babel takes modern JavaScript and transpiles it - converts it to the old version
of JavaScript that can be executed in the browsers that don't support modern JavaScript standards.</p>
<p>We need this for two reasons (and you probably know both already):</p>
<ul>
<li>React and JSX heavily rely on modern JavaScript features</li>
<li>You <strong>should</strong> use modern JavaScript - it makes things easier and helps you write better code</li>
</ul>
<p>Let's continue by installing four packages:</p>
<ul>
<li>Babel core package</li>
<li>Babel webpack loader</li>
<li><span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  Babel env preset
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span><code>babel-preset-env</code> is successor of <code>babel-preset-es2015</code>
and it has couple of big advantages which may be covered in another post.
You can read more about using it in
<a href="https://philipwalton.com/articles/deploying-es2015-code-in-production-today/">this post</a><span class="sidenote__bracket">)</span></span>
</li>
<li>Babel React preset</li>
</ul>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>npm install --save-dev babel-core babel-loader babel-preset-env babel-preset-react
</span></code></pre>
<p>Babel also has default config file which is <code>.babelrc</code>, so let's create it in our project's root:</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>{
</span><span>  &quot;presets&quot;: [&quot;env&quot;, &quot;react&quot;]
</span><span>}
</span></code></pre>
<p>This will tell Babel to use two presets we just installed.</p>
<p>Now we need to update <code>webpack.config.js</code> to use Babel loader for <code>.js</code> and <code>.jsx</code> files.
We also added some sugar, so you can import those files without specifying file extension.</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#5c6370;">// We are using node&#39;s native package &#39;path&#39;
</span><span style="color:#5c6370;">// https://nodejs.org/api/path.html
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">path </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">require</span><span>(</span><span style="color:#98c379;">&#39;path&#39;</span><span>);
</span><span>
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">HtmlWebpackPlugin </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">require</span><span>(</span><span style="color:#98c379;">&#39;html-webpack-plugin&#39;</span><span>);
</span><span>
</span><span style="color:#5c6370;">// Constant with our paths
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">paths </span><span style="color:#c678dd;">= </span><span>{
</span><span>  DIST: </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">resolve</span><span>(__dirname, </span><span style="color:#98c379;">&#39;dist&#39;</span><span>),
</span><span>  SRC: </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">resolve</span><span>(__dirname, </span><span style="color:#98c379;">&#39;src&#39;</span><span>),
</span><span>  JS: </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">resolve</span><span>(__dirname, </span><span style="color:#98c379;">&#39;src/js&#39;</span><span>),
</span><span>};
</span><span>
</span><span style="color:#5c6370;">// Webpack configuration
</span><span>module.exports </span><span style="color:#c678dd;">= </span><span>{
</span><span>  entry: </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">join</span><span>(</span><span style="color:#e06c75;">paths</span><span>.</span><span style="color:#e06c75;">JS</span><span>, </span><span style="color:#98c379;">&#39;app.js&#39;</span><span>),
</span><span>  output: {
</span><span>    path: </span><span style="color:#e06c75;">paths</span><span>.</span><span style="color:#e06c75;">DIST</span><span>,
</span><span>    filename: </span><span style="color:#98c379;">&#39;app.bundle.js&#39;</span><span>,
</span><span>  },
</span><span>  </span><span style="color:#5c6370;">// Tell webpack to use html plugin
</span><span>  plugins: [
</span><span>    </span><span style="color:#c678dd;">new </span><span>HtmlWebpackPlugin({
</span><span>      template: </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">join</span><span>(</span><span style="color:#e06c75;">paths</span><span>.</span><span style="color:#e06c75;">SRC</span><span>, </span><span style="color:#98c379;">&#39;index.html&#39;</span><span>),
</span><span>    }),
</span><span>  ],
</span><span>  </span><span style="color:#5c6370;">// Loaders configuration -&gt; ADDED IN THIS STEP
</span><span>  </span><span style="color:#5c6370;">// We are telling webpack to use &quot;babel-loader&quot; for .js and .jsx files
</span><span>  module: {
</span><span>    rules: [
</span><span>      {
</span><span>        test: </span><span style="color:#98c379;">/</span><span style="color:#56b6c2;">\.</span><span style="color:#98c379;">(js</span><span style="color:#c678dd;">|</span><span style="color:#98c379;">jsx)</span><span style="color:#c678dd;">$</span><span style="color:#98c379;">/</span><span>,
</span><span>        exclude: </span><span style="color:#98c379;">/node_modules/</span><span>,
</span><span>        use: [
</span><span>          </span><span style="color:#98c379;">&#39;babel-loader&#39;</span><span>,
</span><span>        ],
</span><span>      },
</span><span>    ],
</span><span>  },
</span><span>  </span><span style="color:#5c6370;">// Enable importing JS files without specifying their&#39;s extenstion -&gt; ADDED IN THIS STEP
</span><span>  </span><span style="color:#5c6370;">//
</span><span>  </span><span style="color:#5c6370;">// So we can write:
</span><span>  </span><span style="color:#5c6370;">// import MyComponent from &#39;./my-component&#39;;
</span><span>  </span><span style="color:#5c6370;">//
</span><span>  </span><span style="color:#5c6370;">// Instead of:
</span><span>  </span><span style="color:#5c6370;">// import MyComponent from &#39;./my-component.jsx&#39;;
</span><span>  resolve: {
</span><span>    extensions: [</span><span style="color:#98c379;">&#39;.js&#39;</span><span>, </span><span style="color:#98c379;">&#39;.jsx&#39;</span><span>],
</span><span>  },
</span><span>};
</span></code></pre>
<p>Restart <code>npm run dev</code> once again. Nothing really changed, but our JavaScript is now transpiled,
and if you used any of the modern JavaScript features, those would be transpiled to ES5 synthax.</p>
<p>Finally let's add React.</p>



<div class="spoiler ">
  <button
    aria-expanded="false"
    aria-controls='spoiler-4'
    class="spoiler__toggle btn btn--sm btn--empty"
  >
    <span
      class="spoiler__show"
      
    >
      
        Show file structure after this step
      
      <span aria-hidden="true">+</span> <!-- TODO add icon -->
    </span>
    <span
      class="spoiler__hide"
      style="display: none"
    >
      
        Hide file structure after this step
      
      <span aria-hidden="true">-</span> <!-- TODO add icon -->
    </span>
  </button>

  <div
    id='spoiler-4'
    class="spoiler__content"
    aria-hidden="true"
    style="display: none"
  >
    <pre style="background-color:#282c34;color:#dcdfe4;"><code><span>dist # created by webpack when we run &#39;npm run build&#39;
</span><span>node_modules # created by npm
</span><span>src
</span><span>  js
</span><span>    - app.js
</span><span>  - index.html
</span><span>- .babelrc
</span><span>- package-lock.json # created by npm (for node v8 and higher)
</span><span>- package.json
</span><span>- webpack.config.js
</span></code></pre>

  </div>
</div>
<h3 id="react">React<a
  class="header-anchor"
  href="#react" aria-label="Anchor link for: react"
  title="Anchor link for: react"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>This is probably the main reason you are reading this,
so I'll assume you are already familiar with <a href="https://reactjs.org/">React</a>.</p>
<p>Install it (this time as a regular dependency):</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>npm install --save react react-dom
</span></code></pre>
<p>Let's add div with id <code>app</code> to <code>index.html</code>, in which we'll render our React app.</p>
<pre data-lang="html" style="background-color:#282c34;color:#dcdfe4;" class="language-html "><code class="language-html" data-lang="html"><span>&lt;!doctype html&gt;
</span><span>&lt;</span><span style="color:#e06c75;">html</span><span>&gt;
</span><span>  &lt;</span><span style="color:#e06c75;">head</span><span>&gt;
</span><span>    &lt;</span><span style="color:#e06c75;">meta </span><span style="color:#e5c07b;">charset</span><span>=</span><span style="color:#98c379;">&quot;utf-8&quot;</span><span>&gt;
</span><span>    &lt;</span><span style="color:#e06c75;">meta </span><span style="color:#e5c07b;">name</span><span>=</span><span style="color:#98c379;">&quot;viewport&quot; </span><span style="color:#e5c07b;">content</span><span>=</span><span style="color:#98c379;">&quot;width=device-width&quot;</span><span>&gt;
</span><span>
</span><span>    &lt;</span><span style="color:#e06c75;">title</span><span>&gt;Webpack Babel React revisited&lt;/</span><span style="color:#e06c75;">title</span><span>&gt;
</span><span>  &lt;/</span><span style="color:#e06c75;">head</span><span>&gt;
</span><span>  &lt;</span><span style="color:#e06c75;">body</span><span>&gt;
</span><span>    &lt;</span><span style="color:#e06c75;">div </span><span style="color:#e5c07b;">id</span><span>=</span><span style="color:#98c379;">&quot;app&quot;</span><span>&gt;&lt;/</span><span style="color:#e06c75;">div</span><span>&gt;
</span><span>  &lt;/</span><span style="color:#e06c75;">body</span><span>&gt;
</span><span>&lt;/</span><span style="color:#e06c75;">html</span><span>&gt;
</span></code></pre>
<p>Finally replace <code>console.log</code> in our <code>app.js</code> with a real React component.</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#c678dd;">import </span><span style="color:#e06c75;">React</span><span>, { </span><span style="color:#e06c75;">Component </span><span>} </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;react&#39;</span><span>;
</span><span style="color:#c678dd;">import </span><span>{ </span><span style="color:#e06c75;">render </span><span>} </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;react-dom&#39;</span><span>;
</span><span>
</span><span style="color:#c678dd;">export default class </span><span style="color:#e5c07b;">Hello </span><span style="color:#c678dd;">extends </span><span style="color:#e5c07b;">Component {
</span><span style="color:#e5c07b;">  </span><span style="color:#61afef;">render</span><span style="color:#e5c07b;">() {
</span><span style="color:#e5c07b;">    </span><span style="color:#c678dd;">return </span><span style="color:#e5c07b;">(
</span><span style="color:#e5c07b;">      &lt;div&gt;
</span><span style="color:#e5c07b;">        </span><span style="color:#e06c75;">Hello from react
</span><span style="color:#e5c07b;">      </span><span style="color:#c678dd;">&lt;/</span><span style="color:#e06c75;">div</span><span style="color:#c678dd;">&gt;
</span><span style="color:#e5c07b;">    );
</span><span style="color:#e5c07b;">  }
</span><span style="color:#e5c07b;">}
</span><span>
</span><span style="color:#61afef;">render</span><span>(&lt;Hello /&gt;, document.</span><span style="color:#61afef;">getElementById</span><span>(</span><span style="color:#98c379;">&#39;app&#39;</span><span>));
</span></code></pre>
<p>Restart dev server one more time, and voala, we have our React app running!</p>
<h2 id="this-is-minimal-working-setup">This is minimal working setup<a
  class="header-anchor"
  href="#this-is-minimal-working-setup" aria-label="Anchor link for: this-is-minimal-working-setup"
  title="Anchor link for: this-is-minimal-working-setup"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>At this point, you have bare bones setup for making React apps using Webpack and Babel.
You can start exploring on your own, add more stuff and modify it to fit your needs.
However in this post I'll cover two more things - CSS and assets loaders.</p>
<h2 id="css">CSS<a
  class="header-anchor"
  href="#css" aria-label="Anchor link for: css"
  title="Anchor link for: css"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Every web application needs CSS. So let's add a way of getting CSS into ours.
Create <code>src/css</code> folder and a simple <code>style.css</code> in it.</p>
<pre data-lang="css" style="background-color:#282c34;color:#dcdfe4;" class="language-css "><code class="language-css" data-lang="css"><span style="color:#e06c75;">body </span><span>{
</span><span>  background: </span><span style="color:#e5c07b;">#f9fafb</span><span>;
</span><span>  font-family: </span><span style="color:#98c379;">Helvetica</span><span>, </span><span style="color:#98c379;">Arial</span><span>, sans-serif;
</span><span>  font-size: </span><span style="color:#e5c07b;">16</span><span style="color:#c678dd;">px</span><span>;
</span><span>  margin: </span><span style="color:#e5c07b;">0</span><span>;
</span><span>  padding: </span><span style="color:#e5c07b;">30</span><span style="color:#c678dd;">px</span><span>;
</span><span>}
</span></code></pre>
<p>To add this CSS file to the app, we'll use
<a href="https://github.com/webpack-contrib/css-loader">css-loader</a>.</p>
<p>CSS loader needs to write loaded CSS code to either <code>style</code> tag in the head
or external stylesheet file.
If you want to write it to the <code>style</code> tag you should use
<a href="https://github.com/webpack-contrib/style-loader">style-loader</a>.</p>
<p>But for now, we'll extract it to the external file by using
<a href="https://github.com/webpack-contrib/extract-text-webpack-plugin">extract-text-webpack-plugin</a>.
HTML webpack plugin, that we already set, will add css file to <code>index.html</code> for us.</p>
<p>Again, start by installing packages:</p>
<p><strong>Update, April 2018:</strong> Please note, if you are using webpack v4.x you'll need to install
<code>extract-text-webpack-plugin@next</code> which is webpack 4 compatible.</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>npm install --save-dev css-loader extract-text-webpack-plugin
</span></code></pre>
<p>We'll need to do two more things:</p>
<ul>
<li>import our CSS in <code>app.js</code>:</li>
</ul>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#c678dd;">import </span><span style="color:#e06c75;">React</span><span>, { </span><span style="color:#e06c75;">Component </span><span>} </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;react&#39;</span><span>;
</span><span style="color:#c678dd;">import </span><span>{ </span><span style="color:#e06c75;">render </span><span>} </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;react-dom&#39;</span><span>;
</span><span>
</span><span style="color:#c678dd;">import </span><span style="color:#98c379;">&#39;../css/style.css&#39;</span><span>; </span><span style="color:#5c6370;">// Import CSS -&gt; ADDED IN THIS STEP
</span><span>
</span><span style="color:#c678dd;">export default class </span><span style="color:#e5c07b;">Hello </span><span style="color:#c678dd;">extends </span><span style="color:#e5c07b;">Component {
</span><span style="color:#e5c07b;">  </span><span style="color:#61afef;">render</span><span style="color:#e5c07b;">() {
</span><span style="color:#e5c07b;">    </span><span style="color:#c678dd;">return </span><span style="color:#e5c07b;">(
</span><span style="color:#e5c07b;">      &lt;div&gt;
</span><span style="color:#e5c07b;">        </span><span style="color:#e06c75;">Hello from react
</span><span style="color:#e5c07b;">      </span><span style="color:#c678dd;">&lt;/</span><span style="color:#e06c75;">div</span><span style="color:#c678dd;">&gt;
</span><span style="color:#e5c07b;">    );
</span><span style="color:#e5c07b;">  }
</span><span style="color:#e5c07b;">}
</span><span>
</span><span style="color:#61afef;">render</span><span>(&lt;Hello /&gt;, document.</span><span style="color:#61afef;">getElementById</span><span>(</span><span style="color:#98c379;">&#39;app&#39;</span><span>));
</span></code></pre>
<ul>
<li>and update webpack config to use <code>css-loader</code> for CSS files:</li>
</ul>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#5c6370;">// We are using node&#39;s native package &#39;path&#39;
</span><span style="color:#5c6370;">// https://nodejs.org/api/path.html
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">path </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">require</span><span>(</span><span style="color:#98c379;">&#39;path&#39;</span><span>);
</span><span>
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">HtmlWebpackPlugin </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">require</span><span>(</span><span style="color:#98c379;">&#39;html-webpack-plugin&#39;</span><span>);
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">ExtractTextPlugin </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">require</span><span>(</span><span style="color:#98c379;">&#39;extract-text-webpack-plugin&#39;</span><span>); </span><span style="color:#5c6370;">//  -&gt; ADDED IN THIS STEP
</span><span>
</span><span style="color:#5c6370;">// Constant with our paths
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">paths </span><span style="color:#c678dd;">= </span><span>{
</span><span>  DIST: </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">resolve</span><span>(__dirname, </span><span style="color:#98c379;">&#39;dist&#39;</span><span>),
</span><span>  SRC: </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">resolve</span><span>(__dirname, </span><span style="color:#98c379;">&#39;src&#39;</span><span>),
</span><span>  JS: </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">resolve</span><span>(__dirname, </span><span style="color:#98c379;">&#39;src/js&#39;</span><span>),
</span><span>};
</span><span>
</span><span style="color:#5c6370;">// Webpack configuration
</span><span>module.exports </span><span style="color:#c678dd;">= </span><span>{
</span><span>  entry: </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">join</span><span>(</span><span style="color:#e06c75;">paths</span><span>.</span><span style="color:#e06c75;">JS</span><span>, </span><span style="color:#98c379;">&#39;app.js&#39;</span><span>),
</span><span>  output: {
</span><span>    path: </span><span style="color:#e06c75;">paths</span><span>.</span><span style="color:#e06c75;">DIST</span><span>,
</span><span>    filename: </span><span style="color:#98c379;">&#39;app.bundle.js&#39;</span><span>,
</span><span>  },
</span><span>  </span><span style="color:#5c6370;">// Tell webpack to use html plugin
</span><span>  plugins: [
</span><span>    </span><span style="color:#c678dd;">new </span><span>HtmlWebpackPlugin({
</span><span>      template: </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">join</span><span>(</span><span style="color:#e06c75;">paths</span><span>.</span><span style="color:#e06c75;">SRC</span><span>, </span><span style="color:#98c379;">&#39;index.html&#39;</span><span>),
</span><span>    }),
</span><span>    </span><span style="color:#c678dd;">new </span><span>ExtractTextPlugin(</span><span style="color:#98c379;">&#39;style.bundle.css&#39;</span><span>), </span><span style="color:#5c6370;">// CSS will be extracted to this bundle file -&gt; ADDED IN THIS STEP
</span><span>  ],
</span><span>  </span><span style="color:#5c6370;">// Loaders configuration
</span><span>  </span><span style="color:#5c6370;">// We are telling webpack to use &quot;babel-loader&quot; for .js and .jsx files
</span><span>  module: {
</span><span>    rules: [
</span><span>      {
</span><span>        test: </span><span style="color:#98c379;">/</span><span style="color:#56b6c2;">\.</span><span style="color:#98c379;">(js</span><span style="color:#c678dd;">|</span><span style="color:#98c379;">jsx)</span><span style="color:#c678dd;">$</span><span style="color:#98c379;">/</span><span>,
</span><span>        exclude: </span><span style="color:#98c379;">/node_modules/</span><span>,
</span><span>        use: [
</span><span>          </span><span style="color:#98c379;">&#39;babel-loader&#39;</span><span>,
</span><span>        ],
</span><span>      },
</span><span>      </span><span style="color:#5c6370;">// CSS loader to CSS files -&gt; ADDED IN THIS STEP
</span><span>      </span><span style="color:#5c6370;">// Files will get handled by css loader and then passed to the extract text plugin
</span><span>      </span><span style="color:#5c6370;">// which will write it to the file we defined above
</span><span>      {
</span><span>        test: </span><span style="color:#98c379;">/</span><span style="color:#56b6c2;">\.</span><span style="color:#98c379;">css</span><span style="color:#c678dd;">$</span><span style="color:#98c379;">/</span><span>,
</span><span>        loader: </span><span style="color:#e06c75;">ExtractTextPlugin</span><span>.</span><span style="color:#61afef;">extract</span><span>({
</span><span>          use: </span><span style="color:#98c379;">&#39;css-loader&#39;</span><span>,
</span><span>        }),
</span><span>      }
</span><span>    ],
</span><span>  },
</span><span>  </span><span style="color:#5c6370;">// Enable importing JS files without specifying their&#39;s extenstion
</span><span>  </span><span style="color:#5c6370;">//
</span><span>  </span><span style="color:#5c6370;">// So we can write:
</span><span>  </span><span style="color:#5c6370;">// import MyComponent from &#39;./my-component&#39;;
</span><span>  </span><span style="color:#5c6370;">//
</span><span>  </span><span style="color:#5c6370;">// Instead of:
</span><span>  </span><span style="color:#5c6370;">// import MyComponent from &#39;./my-component.jsx&#39;;
</span><span>  resolve: {
</span><span>    extensions: [</span><span style="color:#98c379;">&#39;.js&#39;</span><span>, </span><span style="color:#98c379;">&#39;.jsx&#39;</span><span>],
</span><span>  },
</span><span>};
</span></code></pre>
<p>This might seem very complicated to get one CSS file to the page,
but it is very useful when you have multiple stylesheet files
and pre-processing (or post-processing).</p>
<p>Restart <code>npm run dev</code>, and you'll see that five lines of our beautiful CSS are applied on the page.</p>
<p>And if we run <code>npm run build</code> you'll see
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  <code>style.bundle.css</code>
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>I use <code>.bundle</code> postfix so you can easier differentiate webpack bundles from the source files.<span class="sidenote__bracket">)</span></span>

created in the <code>dist</code> folder,
next to js and html files.</p>



<div class="spoiler ">
  <button
    aria-expanded="false"
    aria-controls='spoiler-5'
    class="spoiler__toggle btn btn--sm btn--empty"
  >
    <span
      class="spoiler__show"
      
    >
      
        Show file structure after this step
      
      <span aria-hidden="true">+</span> <!-- TODO add icon -->
    </span>
    <span
      class="spoiler__hide"
      style="display: none"
    >
      
        Hide file structure after this step
      
      <span aria-hidden="true">-</span> <!-- TODO add icon -->
    </span>
  </button>

  <div
    id='spoiler-5'
    class="spoiler__content"
    aria-hidden="true"
    style="display: none"
  >
    <pre style="background-color:#282c34;color:#dcdfe4;"><code><span>dist # created by webpack when we run &#39;npm run build&#39;
</span><span>node_modules # created by npm
</span><span>src
</span><span>  css
</span><span>    - style.css
</span><span>  js
</span><span>    - app.js
</span><span>  - index.html
</span><span>- .babelrc
</span><span>- package-lock.json # created by npm (for node v8 and higher)
</span><span>- package.json
</span><span>- webpack.config.js
</span></code></pre>

  </div>
</div>
<h2 id="assets">Assets<a
  class="header-anchor"
  href="#assets" aria-label="Anchor link for: assets"
  title="Anchor link for: assets"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>For the end, we'll add <a href="https://github.com/webpack-contrib/file-loader">file-loader</a>.
As it's name suggests it handles files - images, SVGs, fonts, videos or anything else you need.</p>
<p>Let's create <code>/src/assets/</code> folder and add
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  <a href="https://raw.githubusercontent.com/Stanko/webpack-babel-react-revisited/master/src/assets/keen.png">Commander Keen</a>
image
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>I still love <a href="https://en.m.wikipedia.org/wiki/Commander_Keen">Commander Keen</a> games.<span class="sidenote__bracket">)</span></span>

in it.</p>
<p>Follow the same flow as with CSS files</p>
<ul>
<li>install loader</li>
</ul>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>npm install --save-dev file-loader
</span></code></pre>
<ul>
<li>import image in <code>app.js</code> and render it</li>
</ul>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#c678dd;">import </span><span style="color:#e06c75;">React</span><span>, { </span><span style="color:#e06c75;">Component </span><span>} </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;react&#39;</span><span>;
</span><span style="color:#c678dd;">import </span><span>{ </span><span style="color:#e06c75;">render </span><span>} </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;react-dom&#39;</span><span>;
</span><span>
</span><span style="color:#c678dd;">import </span><span style="color:#98c379;">&#39;../css/style.css&#39;</span><span>;
</span><span>
</span><span style="color:#c678dd;">import </span><span style="color:#e06c75;">keenImage </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;../assets/keen.png&#39;</span><span>; </span><span style="color:#5c6370;">// Importing image -&gt; ADDED IN THIS STEP
</span><span>
</span><span style="color:#c678dd;">export default class </span><span style="color:#e5c07b;">Hello </span><span style="color:#c678dd;">extends </span><span style="color:#e5c07b;">Component {
</span><span style="color:#e5c07b;">  </span><span style="color:#61afef;">render</span><span style="color:#e5c07b;">() {
</span><span style="color:#e5c07b;">    </span><span style="color:#c678dd;">return </span><span style="color:#e5c07b;">(
</span><span style="color:#e5c07b;">      &lt;div&gt;
</span><span style="color:#e5c07b;">        </span><span style="color:#e06c75;">Hello from react
</span><span style="color:#e5c07b;">
</span><span style="color:#e5c07b;">        {</span><span style="color:#5c6370;">/* ADDED IN THIS STEP */</span><span style="color:#e5c07b;">}
</span><span style="color:#e5c07b;">        </span><span style="color:#c678dd;">&lt;</span><span style="color:#e06c75;">img src</span><span style="color:#c678dd;">=</span><span style="color:#e5c07b;">{ </span><span style="color:#e06c75;">keenImage </span><span style="color:#e5c07b;">} </span><span style="color:#e06c75;">alt</span><span style="color:#c678dd;">=</span><span style="color:#98c379;">&#39;Commander Keen&#39; </span><span style="color:#c678dd;">/&gt;
</span><span style="color:#e5c07b;">      </span><span style="color:#c678dd;">&lt;/</span><span style="color:#e06c75;">div</span><span style="color:#c678dd;">&gt;
</span><span style="color:#e5c07b;">    );
</span><span style="color:#e5c07b;">  }
</span><span style="color:#e5c07b;">}
</span><span>
</span><span style="color:#61afef;">render</span><span>(&lt;Hello /&gt;, document.</span><span style="color:#61afef;">getElementById</span><span>(</span><span style="color:#98c379;">&#39;app&#39;</span><span>));
</span></code></pre>
<ul>
<li>update webpack config to handle image assets</li>
</ul>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#5c6370;">// We are using node&#39;s native package &#39;path&#39;
</span><span style="color:#5c6370;">// https://nodejs.org/api/path.html
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">path </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">require</span><span>(</span><span style="color:#98c379;">&#39;path&#39;</span><span>);
</span><span>
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">HtmlWebpackPlugin </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">require</span><span>(</span><span style="color:#98c379;">&#39;html-webpack-plugin&#39;</span><span>);
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">ExtractTextPlugin </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">require</span><span>(</span><span style="color:#98c379;">&#39;extract-text-webpack-plugin&#39;</span><span>);
</span><span>
</span><span style="color:#5c6370;">// Constant with our paths
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">paths </span><span style="color:#c678dd;">= </span><span>{
</span><span>  DIST: </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">resolve</span><span>(__dirname, </span><span style="color:#98c379;">&#39;dist&#39;</span><span>),
</span><span>  SRC: </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">resolve</span><span>(__dirname, </span><span style="color:#98c379;">&#39;src&#39;</span><span>),
</span><span>  JS: </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">resolve</span><span>(__dirname, </span><span style="color:#98c379;">&#39;src/js&#39;</span><span>),
</span><span>};
</span><span>
</span><span style="color:#5c6370;">// Webpack configuration
</span><span>module.exports </span><span style="color:#c678dd;">= </span><span>{
</span><span>  entry: </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">join</span><span>(</span><span style="color:#e06c75;">paths</span><span>.</span><span style="color:#e06c75;">JS</span><span>, </span><span style="color:#98c379;">&#39;app.js&#39;</span><span>),
</span><span>  output: {
</span><span>    path: </span><span style="color:#e06c75;">paths</span><span>.</span><span style="color:#e06c75;">DIST</span><span>,
</span><span>    filename: </span><span style="color:#98c379;">&#39;app.bundle.js&#39;</span><span>,
</span><span>  },
</span><span>  </span><span style="color:#5c6370;">// Tell webpack to use html plugin
</span><span>  plugins: [
</span><span>    </span><span style="color:#c678dd;">new </span><span>HtmlWebpackPlugin({
</span><span>      template: </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">join</span><span>(</span><span style="color:#e06c75;">paths</span><span>.</span><span style="color:#e06c75;">SRC</span><span>, </span><span style="color:#98c379;">&#39;index.html&#39;</span><span>),
</span><span>    }),
</span><span>    </span><span style="color:#c678dd;">new </span><span>ExtractTextPlugin(</span><span style="color:#98c379;">&#39;style.bundle.css&#39;</span><span>), </span><span style="color:#5c6370;">// CSS will be extracted to this bundle file -&gt; ADDED IN THIS STEP
</span><span>  ],
</span><span>  </span><span style="color:#5c6370;">// Loaders configuration
</span><span>  </span><span style="color:#5c6370;">// We are telling webpack to use &quot;babel-loader&quot; for .js and .jsx files
</span><span>  module: {
</span><span>    rules: [
</span><span>      {
</span><span>        test: </span><span style="color:#98c379;">/</span><span style="color:#56b6c2;">\.</span><span style="color:#98c379;">(js</span><span style="color:#c678dd;">|</span><span style="color:#98c379;">jsx)</span><span style="color:#c678dd;">$</span><span style="color:#98c379;">/</span><span>,
</span><span>        exclude: </span><span style="color:#98c379;">/node_modules/</span><span>,
</span><span>        use: [
</span><span>          </span><span style="color:#98c379;">&#39;babel-loader&#39;</span><span>,
</span><span>        ],
</span><span>      },
</span><span>      </span><span style="color:#5c6370;">// CSS loader for CSS files
</span><span>      </span><span style="color:#5c6370;">// Files will get handled by css loader and then passed to the extract text plugin
</span><span>      </span><span style="color:#5c6370;">// which will write it to the file we defined above
</span><span>      {
</span><span>        test: </span><span style="color:#98c379;">/</span><span style="color:#56b6c2;">\.</span><span style="color:#98c379;">css</span><span style="color:#c678dd;">$</span><span style="color:#98c379;">/</span><span>,
</span><span>        loader: </span><span style="color:#e06c75;">ExtractTextPlugin</span><span>.</span><span style="color:#61afef;">extract</span><span>({
</span><span>          use: </span><span style="color:#98c379;">&#39;css-loader&#39;</span><span>,
</span><span>        }),
</span><span>      },
</span><span>      </span><span style="color:#5c6370;">// File loader for image assets -&gt; ADDED IN THIS STEP
</span><span>      </span><span style="color:#5c6370;">// We&#39;ll add only image extensions, but you can things like svgs, fonts and videos
</span><span>      {
</span><span>        test: </span><span style="color:#98c379;">/</span><span style="color:#56b6c2;">\.</span><span style="color:#98c379;">(png</span><span style="color:#c678dd;">|</span><span style="color:#98c379;">jpg</span><span style="color:#c678dd;">|</span><span style="color:#98c379;">gif)</span><span style="color:#c678dd;">$</span><span style="color:#98c379;">/</span><span>,
</span><span>        use: [
</span><span>          </span><span style="color:#98c379;">&#39;file-loader&#39;</span><span>,
</span><span>        ],
</span><span>      },
</span><span>    ],
</span><span>  },
</span><span>  </span><span style="color:#5c6370;">// Enable importing JS files without specifying their&#39;s extenstion
</span><span>  </span><span style="color:#5c6370;">//
</span><span>  </span><span style="color:#5c6370;">// So we can write:
</span><span>  </span><span style="color:#5c6370;">// import MyComponent from &#39;./my-component&#39;;
</span><span>  </span><span style="color:#5c6370;">//
</span><span>  </span><span style="color:#5c6370;">// Instead of:
</span><span>  </span><span style="color:#5c6370;">// import MyComponent from &#39;./my-component.jsx&#39;;
</span><span>  resolve: {
</span><span>    extensions: [</span><span style="color:#98c379;">&#39;.js&#39;</span><span>, </span><span style="color:#98c379;">&#39;.jsx&#39;</span><span>],
</span><span>  },
</span><span>};
</span></code></pre>
<p>Restart <code>npm run dev</code> and refresh the browser to see the image.
<code>npm run build</code> will create image in the <code>dist</code> folder.</p>



<div class="spoiler ">
  <button
    aria-expanded="false"
    aria-controls='spoiler-6'
    class="spoiler__toggle btn btn--sm btn--empty"
  >
    <span
      class="spoiler__show"
      
    >
      
        Show file structure after this step
      
      <span aria-hidden="true">+</span> <!-- TODO add icon -->
    </span>
    <span
      class="spoiler__hide"
      style="display: none"
    >
      
        Hide file structure after this step
      
      <span aria-hidden="true">-</span> <!-- TODO add icon -->
    </span>
  </button>

  <div
    id='spoiler-6'
    class="spoiler__content"
    aria-hidden="true"
    style="display: none"
  >
    <pre style="background-color:#282c34;color:#dcdfe4;"><code><span>dist # created by webpack when we run &#39;npm run build&#39;
</span><span>node_modules # created by npm
</span><span>src
</span><span>  assets
</span><span>    - keen.png
</span><span>  css
</span><span>    - style.css
</span><span>  js
</span><span>    - app.js
</span><span>  - index.html
</span><span>- .babelrc
</span><span>- package-lock.json # created by npm (for node v8 and higher)
</span><span>- package.json
</span><span>- webpack.config.js
</span></code></pre>

  </div>
</div>
<h2 id="that-was-quite-a-ride">That was quite a ride<a
  class="header-anchor"
  href="#that-was-quite-a-ride" aria-label="Anchor link for: that-was-quite-a-ride"
  title="Anchor link for: that-was-quite-a-ride"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>And all that to create a very simple application, that should look something like this:</p>
<p><a href="https://github.com/Stanko/webpack-babel-react-revisited"><img src="/img/running-dev-server.png" alt="Example app running in the browser" /></a></p>
<p>Hopefully, you now understand webpack better and are able to create new apps from scratch.</p>
<p>If you enjoyed this tutorial, please share it, and help me improving
it by pointing out things that are not clear enough or could be written better.</p>
<p>Complete code is available in <a href="https://github.com/Stanko/webpack-babel-react-revisited">this repository</a>.</p>
<h2 id="but-i-want-more">But I want more!<a
  class="header-anchor"
  href="#but-i-want-more" aria-label="Anchor link for: but-i-want-more"
  title="Anchor link for: but-i-want-more"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Don't worry, I will cover more in posts to come.
But it might take a while, as creating a meaningful tutorial is really time consuming.
So please, <a href="http://i.imgur.com/1d9dwpj.gif">bear with me</a>.</p>
<p>This new tutorial series is closely related to <a href="https://github.com/workco/marvin">Marvin</a>'s future.
So there will posts about development of Marvin and setting up React applications using React.</p>
<p>React router, redux, hot module reload, thunks, sagas, SASS, PostCSS, universal rendering
are some of the themes that I want to write about.</p>
<p>Cheers!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Minor design refresh</title>
		<published>2017-10-01T00:00:00+00:00</published>
		<updated>2017-10-01T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/minor-design-refresh/" type="text/html"/>
		<id>https://muffinman.io/blog/minor-design-refresh/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>I kinda got bored by the current design.
Rotating SVGs in the header ate too much CPU power (oh <a href="/blog/what-is-the-point/">the irony</a>).
So I decided to change a thing or two.</p>
<p>First thing was to get rid of the rotation.
Then logo got replaced and I added this <a href="https://www.readvisions.com/marvin">marvelous font</a>.
Header is a bit smaller now and footer blends more with the page.
Typography did undergo some small changes, and both buttons and borders are not lighter as well.
Code snippets are now using a light theme, which should be easier on the eye.</p>
<p>This is just a minor refresh until I do a full redesign (one of the <a href="/blog/trillion-ideas/">trillion ideas</a>).</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>My blog setup</title>
		<published>2017-09-27T00:00:00+00:00</published>
		<updated>2017-09-27T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/my-blog-setup/" type="text/html"/>
		<id>https://muffinman.io/blog/my-blog-setup/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><h2 id="update-march-2020">Update, March 2020<a
  class="header-anchor"
  href="#update-march-2020" aria-label="Anchor link for: update-march-2020"
  title="Anchor link for: update-march-2020"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>This post is outdated and I simplified my setup a lot. I'll try to cover my current setup in one of the future blog posts.</p>
<h2 id="original-post">Original post<a
  class="header-anchor"
  href="#original-post" aria-label="Anchor link for: original-post"
  title="Anchor link for: original-post"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Few days ago I got a following message on LinkedIn.</p>
<blockquote>
<p>Hi Stanko! I'm a junior front-end web developer and I recently found your amazing blog and fell in love with it. Since you don't have any other social media, I decided to contact you trough here even if it's not ideal. I was wonder what CMS you were using and if you could do a blog post about it ?</p>
</blockquote>
<p>So here it is, post about my blog setup.</p>
<h2 id="jekyll">Jekyll<a
  class="header-anchor"
  href="#jekyll" aria-label="Anchor link for: jekyll"
  title="Anchor link for: jekyll"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I'm not using a dynamic CMS but a static site generator called <a href="http://jekyllrb.com/">Jekyll</a>.
Static site generators take different approach to making websites.</p>
<p>Instead of having a database, pulling data from it and dynamically building your pages,
static site generators generate all the pages only when there are changes to the site.
No moving parts, just plain HTML files.
This approach is more secure, makes caching much easier and boosts performance.</p>
<p>Smashing Magazine has a
<a href="https://www.smashingmagazine.com/2015/11/modern-static-website-generators-next-big-thing/">post</a>
on why static sites are awesome.</p>
<p>Static sites are not limited to blogs. Bigger websites are also easy to build, once you get a hold of it.
There are agencies that are even doing it for client work.</p>
<span id="continue-reading"></span>
<p>It comes at the price that once it's built you need to deploy it somewhere.
And you don't have fancy CMS interface, only good ol' markdown files.</p>
<p>Build and deployment part is easy, just let <a href="https://pages.github.com/">GitHub pages</a><sup>1</sup> do that for you.</p>
<p>Handling a git repo with a bunch of markdown files should be fairly straight forward
for any developer or tech savvy person. If you feel this is a big burden,
then static site generators might not be for you.</p>
<p><small><sup>1</sup> There is <a href="https://www.netlify.com/">Netlify</a> as well, which I never used myself, but I've heard good things about it.</small></p>
<h2 id="how-to-start-your-own">How to start your own<a
  class="header-anchor"
  href="#how-to-start-your-own" aria-label="Anchor link for: how-to-start-your-own"
  title="Anchor link for: how-to-start-your-own"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I keep this blog on GitHub pages (obviously) and I would recommend you to do the same.</p>
<p>If you want to start from scratch, start with <a href="http://jekyllrb.com/docs/quickstart/">official quickstart guide</a>.</p>
<p>Or you can start the same way I did - from the great <a href="http://lanyon.getpoole.com/">Lanyon theme</a>.
Just fork it's repository and rename it to <code>[your github username].github.io</code>.
GitHub will automatically build and publish it on the same URL.
Build and publish will happen every time you push a change to your blog's repository.</p>
<p>That's it!</p>
<p>Now you have your own blog. <a href="https://help.github.com/articles/adding-or-removing-a-custom-domain-for-your-github-pages-site/">Custom domain names</a>
are also easy to setup.</p>
<h2 id="my-current-setup-aka-complicating-your-life">My current setup (aka Complicating your life)<a
  class="header-anchor"
  href="#my-current-setup-aka-complicating-your-life" aria-label="Anchor link for: my-current-setup-aka-complicating-your-life"
  title="Anchor link for: my-current-setup-aka-complicating-your-life"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>This part is for fun only and direct result of my experiments.
They ended up not so practical, but I learned a tone playing with random things.
Fun times, but now I would go vanilla.</p>
<p>I wrote a couple of posts about using Jekyll already, and you can find them under <a href="/archive/#jekyll">Jekyll category</a>.</p>
<h3 id="live-reload">Live reload<a
  class="header-anchor"
  href="#live-reload" aria-label="Anchor link for: live-reload"
  title="Anchor link for: live-reload"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>First thing I did was to add live reload for posts, Javascript and SCSS files.
You can read about it in <a href="/blog/jekyll-gulp-workflow/">this post</a> but I plan to rewrite it as I feel it could be done better.</p>
<h3 id="custom-plugins-and-travis-ci">Custom plugins and Travis CI<a
  class="header-anchor"
  href="#custom-plugins-and-travis-ci" aria-label="Anchor link for: custom-plugins-and-travis-ci"
  title="Anchor link for: custom-plugins-and-travis-ci"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Then I added a couple of custom plugins. But as a security measure, GitHub has a <a href="https://pages.github.com/versions/">limited set of Jekyll plugins</a> you can use.</p>
<blockquote>
<p>GitHub Pages is powered by Jekyll. However, all Pages sites are generated using the --safe option to disable custom plugins for security reasons. Unfortunately, this means your plugins won’t work if you’re deploying to GitHub Pages.</p>
</blockquote>
<p>To be able to use custom plugins, I created a bit more complicated setup using Travis CI.
Again there is a <a href="/blog/travis-jekyll-and-github-pages/">blog post</a> about that as well.</p>
<p>What I actually do? I keep my Jekyll files on the <code>source</code> branch and when I push to it, that triggers a build on Travis, which then pushes generated site back to the <code>master</code> branch. Once it is done, GitHub publishes it.</p>
<p>Once you set it up, it is pretty invisible, but I'll probably bail on it once I rewrite my local setup (switch from gulp to webpack).</p>
<h3 id="source-code">Source code<a
  class="header-anchor"
  href="#source-code" aria-label="Anchor link for: source-code"
  title="Anchor link for: source-code"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Complete source code of my blog is available <a href="https://github.com/Stanko/Stanko.github.io/tree/source">here</a>.
But again, I recommend you to take the easy way, without custom plugins and Travis setup.</p>
<h2 id="comments-or-any-other-dynamic-content">Comments (or any other dynamic content)<a
  class="header-anchor"
  href="#comments-or-any-other-dynamic-content" aria-label="Anchor link for: comments-or-any-other-dynamic-content"
  title="Anchor link for: comments-or-any-other-dynamic-content"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>You guessed it! Sites generated by static site generators are static :)
So there is no user generated content.</p>
<p>But as comments are important part of the blog I researched how to add them.
Most people recommended Disqus, but I didn't really want to add a bunch of 3rd party code.
And to make things worse, it seems they are <a href="https://notes.ayushsharma.in/2017/09/im-killing-disqus-comments-on-my-blog-heres-why">tracking their users</a>).</p>
<p>Luckily there is <a href="https://staticman.net/">Staticman</a>.
It is an open source project which enables user-generated content to be added on static site.
You need to set it up, and then post data to their API.
Staticman will then create a pull request to your site's repository.
Once you merge it, GitHub will regenerate your site and user-generated content will be available.</p>
<p>Pull requests are moderated by default and you need to merge them yourself.
Or you can enable auto-merging. I use moderation myself.</p>
<p>Staticman also supports reCaptcha and Aksimet for spam protection.</p>
<p>Check their <a href="https://staticman.net/demo">demo</a> and <a href="https://staticman.net/docs/">getting started guide</a>.</p>
<h2 id="other-static-site-generators">Other static site generators<a
  class="header-anchor"
  href="#other-static-site-generators" aria-label="Anchor link for: other-static-site-generators"
  title="Anchor link for: other-static-site-generators"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>If you want to explore more static site generators check <a href="https://www.netlify.com/blog/2017/05/25/top-ten-static-site-generators-of-2017/">this post</a>,
which lists the most popular ones in 2017.</p>
<p>Two that drew my attention are:</p>
<ul>
<li>
<p>Gatsby - <a href="https://github.com/gatsbyjs/gatsby">github.com/gatsbyjs/gatsby</a></p>
<p>Because it is written in Javascript, and you create your site using React
(and it is pretty obvious by now that I love React).</p>
</li>
<li>
<p>Hugo - <a href="https://gohugo.io/">https://gohugo.io/</a></p>
<p>Because it has the largest community after Jekyll,
and offers some stuff out of the box, which others generators don't.
I almost switched to Hugo, but I decided not to, as benefits are minimal compared to my current setup.</p>
</li>
</ul>
<h2 id="happy-blogging">Happy blogging! :)<a
  class="header-anchor"
  href="#happy-blogging" aria-label="Anchor link for: happy-blogging"
  title="Anchor link for: happy-blogging"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Kudos to Sébastien who inspired me to write this post.
Hopefully it will get at least one person to start blogging.
Trust me, it is not that hard.
If you do, please share your blog in the comments.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>I have a trillion ideas.</title>
		<published>2017-09-27T00:00:00+00:00</published>
		<updated>2017-09-27T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/trillion-ideas/" type="text/html"/>
		<id>https://muffinman.io/blog/trillion-ideas/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>But I need to regroup and focus on finishing at least one, instead of starting all of the trillion ones and finishing none.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>How to update npm using nvm</title>
		<published>2017-09-02T00:00:00+00:00</published>
		<updated>2017-09-02T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/nvm-updating-npm/" type="text/html"/>
		<id>https://muffinman.io/blog/nvm-updating-npm/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>If you are JavaScript developer and not using <a href="https://github.com/creationix/nvm">nvm</a> you might want to look at it.
Node Version Manager is easy way to install, manage and work with multiple node versions.</p>
<p>Recently I got npm update notification, that looks something like this:</p>
<p><img src="/img/npm-update.png" alt="npm update notification" /></p>
<p>For some reason, when I had node installed through nvm, <code>npm i -g npm</code> didn't work. However, when I was using a &quot;system&quot; node version, installed from Node.js website, it did. I can't remember the exact error, but it was probably something with my <code>PATH</code> configuration.</p>
<p>So I tried to find a path where global packages are installed when using nvm. Once I found it, it was super easy to update <code>npm</code> in that specific folder.</p>
<pre data-lang="bash" style="background-color:#282c34;color:#dcdfe4;" class="language-bash "><code class="language-bash" data-lang="bash"><span style="color:#5c6370;"># navigate to nvm&#39;s node lib folder
</span><span style="color:#5c6370;"># (replace v8.4.0 with your version)
</span><span style="color:#61afef;">cd </span><span style="color:#e06c75;">~</span><span>/.nvm/versions/node/v8.4.0/lib/
</span><span>
</span><span style="color:#5c6370;"># update npm right there
</span><span style="color:#e06c75;">npm</span><span> install npm
</span><span>
</span><span style="color:#5c6370;"># reopen your terminal
</span></code></pre>
<p>That's it. Great thing is that npm can update itself. And this works for any other global npm package.</p>
<p>Or, as suggested in the comments, just use nvm's command:</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>nvm install-latest-npm
</span></code></pre>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>React Image Filter</title>
		<published>2017-09-02T00:00:00+00:00</published>
		<updated>2017-09-02T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/react-image-filter-component/" type="text/html"/>
		<id>https://muffinman.io/blog/react-image-filter-component/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>On the project I'm currently working on, client's logo is displayed in two versions,
black on the white background and vice versa.
To make their life easier, so they don't have to upload two assets, I suggested SVG.
Alas they can't use SVGs (kinda long story), so I just applied CSS <code>filter: invert(1);</code>, but...</p>
<p>...you guessed it - it doesn't work in IE and Edge :(</p>
<p>So I started reading about <a href="https://developer.mozilla.org/en/docs/Web/SVG/Element/filter">SVG filters</a>
and found a way to invert a image. But it got me interested,
so I kept going and made a React component for all sorts of color filters.</p>
<p>Play with the <a href="https://muffinman.io/react-image-filter/">interactive demo</a>.</p>
<p>Documenation available on <a href="https://github.com/Stanko/react-image-filter">GitHub</a> and <a href="https://www.npmjs.com/package/react-image-filter">npm</a>.</p>

<a href="https:&#x2F;&#x2F;muffinman.io&#x2F;react-image-filter&#x2F;" class="image__link">

  <img
    class="image image--lg   "
    src="&#x2F;img&#x2F;image-filter-1.jpg"
    alt="React filter demo"
  />
  

</a>

<span id="continue-reading"></span>
<p>SVG filters include <code>feColorMatrix</code> which is a matrix for color transformation.
Changing the matrix value you can achieve all of the CSS filters.</p>
<p>It accepts 5x4 matrix. Two examples:</p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#5c6370;">// Base matrix (no filter)
</span><span style="color:#e5c07b;">1  0  0  0  0
</span><span style="color:#e5c07b;">0  1  0  0  0
</span><span style="color:#e5c07b;">0  0  1  0  0
</span><span style="color:#e5c07b;">0  0  0  1  0
</span><span>
</span><span style="color:#5c6370;">// Invert colors matrix
</span><span style="color:#c678dd;">-</span><span style="color:#e5c07b;">1  0  0  0  1
</span><span> </span><span style="color:#e5c07b;">0 </span><span style="color:#c678dd;">-</span><span style="color:#e5c07b;">1  0  0  1
</span><span> </span><span style="color:#e5c07b;">0  0 </span><span style="color:#c678dd;">-</span><span style="color:#e5c07b;">1  0  1
</span><span> </span><span style="color:#e5c07b;">0  0  0  1  0
</span></code></pre>
<p>I wasn't lazy so I made interactive way of changing values in matrix.
Every value has it's own range slider. This way you can see the changes right away.</p>

  <img
    class="image image--md   "
    src="&#x2F;img&#x2F;image-filter-controls.png"
    alt="React filter controls"
  />
  

<p>Soon I encountered another problem.
As applying SVG filters in CSS also doesn't work in IE and Edge, I used SVG <code>&lt;image /&gt;</code> tag.
But SVG wouldn't scale to the image size.</p>
<p>Then it hit me, I can solve it by using a simple hack. Component is rendering a wrapper div with SVG inside.
So I added a <code>&lt;img /&gt;</code> using the same image and div resizes to fit the image.
Here comes the hack - I've hidden the image using <code>visibility: hidden</code> and made SVG absolute and 100% width/height.
This way SVG always keeps image aspect ratio.</p>
<p>SVGs are awesome :)</p>

<a href="https:&#x2F;&#x2F;muffinman.io&#x2F;react-image-filter&#x2F;" class="image__link">

  <img
    class="image image--lg   "
    src="&#x2F;img&#x2F;image-filter-2.jpg"
    alt="React filter demo"
  />
  

</a>


    </content>

	</entry>
	<entry xml:lang="en">
		<title>localStorage and sessionStorage in Safari&#x27;s private mode</title>
		<published>2017-08-09T00:00:00+00:00</published>
		<updated>2017-08-09T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/localstorage-and-sessionstorage-in-safaris-private-mode/" type="text/html"/>
		<id>https://muffinman.io/blog/localstorage-and-sessionstorage-in-safaris-private-mode/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>If you didn't know, in Safari's private mode both <code>localStorage</code> and <code>sessionStorage</code> are not working.
To be exact, Safari sets storage's limit to 0, so you can't write anything to it.
I keep forgetting this, until QA people report it at some point.</p>
<p>So I quickly wrote a small facade for it, which fails silently in this case.
That means it still doesn't work but it won't throw an error and break your application.</p>
<p>This is the version for <code>localStorage</code>, just replace it with <code>sessionStorage</code> if you need it.</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#c678dd;">const </span><span style="color:#e06c75;">LS_TEST_KEY </span><span style="color:#c678dd;">= </span><span style="color:#98c379;">&#39;ls-test&#39;</span><span>;
</span><span style="color:#c678dd;">let </span><span style="color:#e06c75;">isLocalStorageSupported </span><span style="color:#c678dd;">= typeof </span><span style="color:#e06c75;">localStorage </span><span style="color:#c678dd;">=== </span><span style="color:#98c379;">&#39;object&#39;</span><span>;
</span><span>
</span><span style="color:#5c6370;">// Try to
</span><span style="color:#c678dd;">try </span><span>{
</span><span>  </span><span style="color:#e06c75;">localStorage</span><span>.</span><span style="color:#61afef;">setItem</span><span>(</span><span style="color:#e06c75;">LS_TEST_KEY</span><span>, </span><span style="color:#98c379;">&#39;test&#39;</span><span>);
</span><span>  </span><span style="color:#e06c75;">localStorage</span><span>.</span><span style="color:#61afef;">removeItem</span><span>(</span><span style="color:#e06c75;">LS_TEST_KEY</span><span>);
</span><span>} </span><span style="color:#c678dd;">catch </span><span>(</span><span style="color:#e06c75;">e</span><span>) {
</span><span>  </span><span style="color:#e06c75;">isLocalStorageSupported </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">false</span><span>;
</span><span>
</span><span>  </span><span style="color:#5c6370;">// If we get error that we exceeded storage&#39;s quota
</span><span>  </span><span style="color:#5c6370;">// but storage is still empty we are in private mode
</span><span>  </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#e06c75;">e</span><span>.code </span><span style="color:#c678dd;">=== </span><span style="color:#e5c07b;">DOMException</span><span>.</span><span style="color:#e06c75;">QUOTA_EXCEEDED_ERR </span><span style="color:#c678dd;">&amp;&amp; </span><span style="color:#e06c75;">localStorage</span><span>.length </span><span style="color:#c678dd;">=== </span><span style="color:#e5c07b;">0</span><span>) {
</span><span>    </span><span style="color:#5c6370;">// Private mode
</span><span>  } </span><span style="color:#c678dd;">else </span><span>{
</span><span>    </span><span style="color:#c678dd;">throw </span><span style="color:#e06c75;">e</span><span>;
</span><span>  }
</span><span>}
</span><span>
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">LocalStorage </span><span style="color:#c678dd;">= </span><span>{
</span><span>  </span><span style="color:#61afef;">getItem</span><span>: (</span><span style="color:#e06c75;">key</span><span>) </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>    </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#e06c75;">isLocalStorageSupported</span><span>) {
</span><span>      </span><span style="color:#c678dd;">return </span><span style="color:#e06c75;">localStorage</span><span>.</span><span style="color:#61afef;">getItem</span><span>(</span><span style="color:#e06c75;">key</span><span>);
</span><span>    }
</span><span>
</span><span>    </span><span style="color:#c678dd;">return </span><span style="color:#e5c07b;">null</span><span>;
</span><span>  },
</span><span>
</span><span>  </span><span style="color:#61afef;">setItem</span><span>: (</span><span style="color:#e06c75;">key</span><span>, </span><span style="color:#e06c75;">value</span><span>) </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>    </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#e06c75;">isLocalStorageSupported</span><span>) {
</span><span>      </span><span style="color:#e06c75;">localStorage</span><span>.</span><span style="color:#61afef;">setItem</span><span>(</span><span style="color:#e06c75;">key</span><span>, </span><span style="color:#e06c75;">value</span><span>);
</span><span>    }
</span><span>  },
</span><span>
</span><span>  </span><span style="color:#61afef;">removeItem</span><span>: (</span><span style="color:#e06c75;">key</span><span>) </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>    </span><span style="color:#c678dd;">if </span><span>(</span><span style="color:#e06c75;">isLocalStorageSupported</span><span>) {
</span><span>      </span><span style="color:#e06c75;">localStorage</span><span>.</span><span style="color:#61afef;">removeItem</span><span>(</span><span style="color:#e06c75;">key</span><span>);
</span><span>    }
</span><span>  },
</span><span>};
</span><span>
</span><span>
</span><span style="color:#c678dd;">export default </span><span style="color:#e06c75;">LocalStorage</span><span>;
</span></code></pre>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Get element offset in JavaScript</title>
		<published>2017-07-26T00:00:00+00:00</published>
		<updated>2017-07-26T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/javascript-get-element-offset/" type="text/html"/>
		<id>https://muffinman.io/blog/javascript-get-element-offset/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>When we left jQuery behind and embraced modern JavaScript frameworks,
we thought we would never touch DOM directly again.
Well that is not entirely true.
There are a lot of cases when you need to get some DOM element size.
For element's dimensions <code>.offsetWidth</code> and <code>.offsetHeight</code> are great way to do it.</p>
<p>But one of the other common tasks is getting element's offset, top and left.
I'll show you two ways to get those.</p>
<span id="continue-reading"></span><h2 id="using-offsettop-offsetleft">Using <code>offsetTop</code> / <code>offsetLeft</code><a
  class="header-anchor"
  href="#using-offsettop-offsetleft" aria-label="Anchor link for: using-offsettop-offsetleft"
  title="Anchor link for: using-offsettop-offsetleft"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>This one is old school, and there is nothing wrong with it.
Even today, this method lives in my <code>helpers.js</code>.
It is looping to the root of the DOM tree and performance obsessed people may having problem with it.
But so far I never had performance issue with it, and I'm talking about production level projects.</p>
<p>One important thing to note - it is not taking CSS transforms into calculations.
Everything is calculated from element's original position.</p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#c678dd;">function </span><span style="color:#61afef;">getElementOffset</span><span>(</span><span style="color:#e06c75;">el</span><span>) {
</span><span>  </span><span style="color:#c678dd;">let </span><span style="color:#e06c75;">top </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">0</span><span>;
</span><span>  </span><span style="color:#c678dd;">let </span><span style="color:#e06c75;">left </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">0</span><span>;
</span><span>  </span><span style="color:#c678dd;">let </span><span style="color:#e06c75;">element </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">el</span><span>;
</span><span>
</span><span>  </span><span style="color:#5c6370;">// Loop through the DOM tree
</span><span>  </span><span style="color:#5c6370;">// and add it&#39;s parent&#39;s offset to get page offset
</span><span>  </span><span style="color:#c678dd;">do </span><span>{
</span><span>    </span><span style="color:#e06c75;">top </span><span style="color:#c678dd;">+= </span><span style="color:#e06c75;">element</span><span>.</span><span style="color:#e06c75;">offsetTop </span><span style="color:#c678dd;">|| </span><span style="color:#e5c07b;">0</span><span>;
</span><span>    </span><span style="color:#e06c75;">left </span><span style="color:#c678dd;">+= </span><span style="color:#e06c75;">element</span><span>.</span><span style="color:#e06c75;">offsetLeft </span><span style="color:#c678dd;">|| </span><span style="color:#e5c07b;">0</span><span>;
</span><span>    </span><span style="color:#e06c75;">element </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">element</span><span>.</span><span style="color:#e06c75;">offsetParent</span><span>;
</span><span>  } </span><span style="color:#c678dd;">while </span><span>(</span><span style="color:#e06c75;">element</span><span>);
</span><span>
</span><span>  </span><span style="color:#c678dd;">return </span><span>{
</span><span>    </span><span style="color:#e06c75;">top</span><span>,
</span><span>    </span><span style="color:#e06c75;">left</span><span>,
</span><span>  };
</span><span>}
</span></code></pre>
<h2 id="using-getboundingclientrect">Using <code>getBoundingClientRect</code><a
  class="header-anchor"
  href="#using-getboundingclientrect" aria-label="Anchor link for: using-getboundingclientrect"
  title="Anchor link for: using-getboundingclientrect"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Another way is using <code>getBoundingClientRect</code> which is cool because it
takes CSS transforms into calculations and it is natively supported.
No need to loop through the element's parents.
But it's <code>top</code> and <code>left</code> properties are distances from the viewport, not from the document.
Because of this, you need to add document scroll to it.</p>
<p>Just note one thing, there is a <a href="https://openradar.appspot.com/radar?id=6668472289329152">known bug</a>
with iOS and <code>getBoundingClientRect</code> in combination with <code>position: fixed</code>. I found about this bug few days ago when I was working on <a href="https://github.com/Stanko/react-plx">react-plx</a>. Sometimes it is just returning the wrong values. So, when you have fixed elements, you probably want to fallback to the method above</p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#c678dd;">function </span><span style="color:#61afef;">getElementOffset</span><span>(</span><span style="color:#e06c75;">el</span><span>) {
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">rect </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">el</span><span>.</span><span style="color:#61afef;">getBoundingClientRect</span><span>();
</span><span>
</span><span>  </span><span style="color:#c678dd;">return </span><span>{
</span><span>    top: </span><span style="color:#e06c75;">rect</span><span>.top </span><span style="color:#c678dd;">+ </span><span>window.pageYOffset,
</span><span>    left: </span><span style="color:#e06c75;">rect</span><span>.left </span><span style="color:#c678dd;">+ </span><span>window.pageXOffset,
</span><span>  };
</span><span>}
</span><span>
</span><span style="color:#5c6370;">// If you want to support IE8 and lower
</span><span style="color:#5c6370;">// Use
</span><span style="color:#5c6370;">//
</span><span style="color:#5c6370;">// top: rect.top + (window.pageYOffset || document.documentElement.scrollTop),
</span><span style="color:#5c6370;">// left: rect.left + (window.pageXOffset || document.documentElement.scrollLeft),
</span></code></pre>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Plx - React parallax component</title>
		<published>2017-07-24T00:00:00+00:00</published>
		<updated>2017-07-24T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/plx-react-parallax-component/" type="text/html"/>
		<id>https://muffinman.io/blog/plx-react-parallax-component/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>I'm becoming predictable. Again, I haven't found component I like, so I wrote my own.</p>
<p>This time, I've build React component for parallax (on scroll) effects.
Check the <a href="https://muffinman.io/react-plx/">live demo</a>. It is called <code>Plx</code>, it is open source and available on <a href="https://github.com/Stanko/react-plx">GitHub</a> and <a href="https://www.npmjs.com/package/react-plx">npm</a>.</p>
<h2 id="what-it-does">What it does<a
  class="header-anchor"
  href="#what-it-does" aria-label="Anchor link for: what-it-does"
  title="Anchor link for: what-it-does"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>So far in my career, I've built so many parallax components. Parallax is actually
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  wrong term
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>the effect whereby the position or direction of an object appears to differ when
viewed from different positions, e.g. through the viewfinder and the lens of a camera.<span class="sidenote__bracket">)</span></span>

here, but it got accepted by development community.</p>
<p>Designers love them and users are fascinated by fancy effects. Simply explained as you scroll the page down something is changed relative to the scroll position. For example, as you scroll you can make things explode! Just check the <a href="https://muffinman.io/react-plx/">demo</a>.</p>

<a href="https:&#x2F;&#x2F;muffinman.io&#x2F;react-plx" class="image__link">

  <img
    class="image image--md   "
    src="&#x2F;img&#x2F;plx-explode.png"
    alt="Make things explode! Plx demo"
  />
  

</a>

<p>There is a lot of solutions out there, but IMHO they are usually bloated or not performant or complicated to use. And as I'm using React a lot, I decided to collect what I have learned about implementing on scroll effects in React and create standalone component. Most of the code in this component is pulled out from my existing projects and glued together.</p>
<span id="continue-reading"></span><h2 id="performance">Performance<a
  class="header-anchor"
  href="#performance" aria-label="Anchor link for: performance"
  title="Anchor link for: performance"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Plx is really performant, thanks to a few optimizations.</p>
<p>First and the most important one - it is not listening to window scroll event.
It is using simple scroll manager, which checks if scroll has changed every 16ms (to get smooth 60fps).
When scroll changes it broadcasts custom event.
All of the Plx components are listening to this event and share the same scroll manager (it is singleton).
Singleton is created with the first component, and destroyed when last one unmounts.</p>
<p>Another optimization is that elements are not animated when not in viewport.
Actually, they are not animated if they are more than 50px outside of viewport.
So component &quot;gets ready&quot; 50px before it enters the viewport.
You can force animating element even outside of viewport by setting <code>animateWhenNotInViewport</code> prop to <code>true</code>.</p>
<p>Beside that, every update is done in <code>requestAnimationFrame</code>.</p>
<p>Still you need to avoid common &quot;don't dos&quot; when making a parallax page:</p>
<ul>
<li>Avoid <code>background-size: cover</code></li>
<li>Don’t animate massive images or dramatically resize them</li>
<li>Avoid animating 100 things at once</li>
<li>Only use properties that are cheap for browsers to animate - opacity and transform (scale, rotate, skew, scale)</li>
</ul>
<p>Read this <a href="https://medium.com/@dhg/parallax-done-right-82ced812e61c">great article</a> to find out more (that is where I got my initial inspiration).</p>
<h2 id="supported-effects-properties">Supported effects / properties<a
  class="header-anchor"
  href="#supported-effects-properties" aria-label="Anchor link for: supported-effects-properties"
  title="Anchor link for: supported-effects-properties"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Plx supports every CSS property that has numeric value (
<span
  class="sidenote__trigger "
  tabindex="0"
  role="button"
>
  <code>opacity</code>, <code>height</code>, <code>padding</code>
</span>

<span
  class="sidenote__note "
><span class="sidenote__bracket">(</span>The most performant properties to animate are <code>opactity</code> and <code>transform</code>. So stick to those two to keep your parallax effects performant. Of course you can animate something else here and there, but be careful and test it throughly.<span class="sidenote__bracket">)</span></span>

...). I wrote a formula (this sounds way more sciency than it is)
which calculates property value depending on the scroll position and given input values.</p>
<p>It also supports <code>transform</code>, and you can pass multiple transform functions (<code>translateX</code>, <code>rotate</code>, <code>skewZ</code>...).
You can even animate colors on scroll (background, text and border colors are supported)! Colors are broken down to their R/G/B/A values, and then same formula is applied to each one of them.</p>
<h2 id="at-the-end">At the end<a
  class="header-anchor"
  href="#at-the-end" aria-label="Anchor link for: at-the-end"
  title="Anchor link for: at-the-end"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>What are you waiting?! Get it from npm and start using it :)</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>$ npm install --save react-plx
</span></code></pre>
<p>Documentation is available on <a href="https://github.com/Stanko/react-plx">GitHub</a>.</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#c678dd;">import </span><span style="color:#e06c75;">React</span><span>, { </span><span style="color:#e06c75;">Component </span><span>} </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;react&#39;</span><span>;
</span><span style="color:#c678dd;">import </span><span style="color:#e06c75;">Plx </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;react-plx&#39;</span><span>;
</span><span>
</span><span style="color:#c678dd;">class </span><span style="color:#e5c07b;">Example </span><span style="color:#c678dd;">extends </span><span style="color:#e5c07b;">Component {
</span><span style="color:#e5c07b;">  </span><span style="color:#61afef;">render</span><span style="color:#e5c07b;">() {
</span><span style="color:#e5c07b;">    </span><span style="color:#c678dd;">return </span><span style="color:#e5c07b;">(
</span><span style="color:#e5c07b;">      </span><span style="color:#c678dd;">&lt;</span><span style="color:#e06c75;">Plx
</span><span style="color:#e5c07b;">        </span><span style="color:#e06c75;">className</span><span style="color:#c678dd;">=</span><span style="color:#98c379;">&#39;MyAwesomeParallax&#39;
</span><span style="color:#e5c07b;">        </span><span style="color:#e06c75;">parallaxData</span><span style="color:#c678dd;">=</span><span style="color:#e5c07b;">{ </span><span style="color:#c678dd;">... </span><span style="color:#e5c07b;">} </span><span style="color:#5c6370;">// your parallax effects, see documentation
</span><span style="color:#e5c07b;">      </span><span style="color:#c678dd;">&gt;
</span><span style="color:#e5c07b;">        </span><span style="color:#5c6370;">/* Your content */
</span><span style="color:#e5c07b;">      </span><span style="color:#c678dd;">&lt;/</span><span style="color:#e06c75;">Plx</span><span style="color:#c678dd;">&gt;
</span><span style="color:#e5c07b;">    );
</span><span style="color:#e5c07b;">  }
</span><span style="color:#e5c07b;">}
</span></code></pre>
<p>Feel free to contribute, cheers!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>waifu2x super resolution image resizer</title>
		<published>2017-06-26T00:00:00+00:00</published>
		<updated>2017-06-26T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/super-resolution-image-resizer/" type="text/html"/>
		<id>https://muffinman.io/blog/super-resolution-image-resizer/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>I use <a href="/img/image-resize/odin-2x.png">the same wallpaper</a><sup>1</sup> (warning, 6mb file) for a long time now.
Not sure who is the author (if anyone knows the original author, please let me know in the comments).
But with high resolution displays, wallpaper started to look blurry and noisy, so I stopped using it.</p>
<p>But recently, my girlfriend reminded me of <a href="http://waifu2x.udp.jp/">this great website</a> which super-scales images using magic. Ok, not magic, but it uses &quot;Deep Convolutional Neural Networks&quot;, which is pretty much the same thing. Results are amazing, try it yourself.</p>
<p>The best thing, website is free to use and project is opensource. Code is available on <a href="https://github.com/nagadomi/waifu2x">GitHub</a>.</p>
<p>It supports max scaling of 2x, so if you need more you'll need to process image multiple times. Or you can dig in the code and add option for arbitrary scaling.</p>
<p><small><sup>1</sup> This is the resized image using waifu2x.</small></p>
<h3 id="example">Example<a
  class="header-anchor"
  href="#example" aria-label="Anchor link for: example"
  title="Anchor link for: example"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Original, 250x250px jpeg <sup>2</sup></p>
<p><img
  class="Image"
  style="max-width: 500px; width: 100%;"
  src="/img/image-resize/rickmorty-250x250.jpg"
  alt="Original 250x250px image"
/></p>
<p>Result, 500x500px png</p>
<p><img
  class="Image"
  style="max-width: 500px; width: 100%;"
  src="/img/image-resize/rickmorty-500x500.png"
  alt="Resized 2x 500x500px image"
/></p>
<p>If you ask me, results are really impressive, kudos to nagadomi!</p>
<p><small><sup>2</sup> Image is from my favorite animated show <a href="https://en.wikipedia.org/wiki/Rick_and_Morty">Rick and Morty</a></small></p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Animate React component by calling &#x27;setState&#x27; in &#x27;componentDidMount&#x27;</title>
		<published>2017-06-23T00:00:00+00:00</published>
		<updated>2017-06-23T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/react-rerender-in-component-did-mount/" type="text/html"/>
		<id>https://muffinman.io/blog/react-rerender-in-component-did-mount/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>On the frontend, we do a lot of animations. Most of the simple animations I create by using CSS transitions.
Either I will change class or inline style of the element, and define transitions in CSS file.</p>
<p>Easiest way to do this in React is to render initial state, and then when it renders, change the state to apply class or style to animate. The easiest way to do it in React is to change state in <code>componentDidMount</code>.
Setting state in <code>componentDidMount</code> is considered to be anti-pattern, as it forces rerender and can lead to property/layout thrashing. But in our case, that is exactly what we want to do.</p>
<p>When we do that, we hit the wall - only second state is rendered and there is no transition between two states. It happens because of browsers optimization - <strong>browsers are not rerendering stuff that changed in the same animation frame.</strong> But they merge changes and render the end result.</p>
<p>The problem I just described is not React exclusive, but browser related.
Same will happen if we try something like this:</p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#c678dd;">const </span><span style="color:#e06c75;">element </span><span style="color:#c678dd;">= </span><span>document.</span><span style="color:#61afef;">querySelector</span><span>(</span><span style="color:#98c379;">&#39;.AnimateMe&#39;</span><span>);
</span><span style="color:#e06c75;">element</span><span>.style.height </span><span style="color:#c678dd;">= </span><span style="color:#98c379;">&#39;50px&#39;</span><span>;
</span><span style="color:#e06c75;">element</span><span>.style.height </span><span style="color:#c678dd;">= </span><span style="color:#98c379;">&#39;250px&#39;</span><span>;
</span></code></pre>
<p>So let's start with example of the problem.</p>
<span id="continue-reading"></span><h2 id="animate-component-by-changing-state-in-componentdidmount-doesn-t-work">Animate component by changing state in <code>componentDidMount</code> doesn't work<a
  class="header-anchor"
  href="#animate-component-by-changing-state-in-componentdidmount-doesn-t-work" aria-label="Anchor link for: animate-component-by-changing-state-in-componentdidmount-doesn-t-work"
  title="Anchor link for: animate-component-by-changing-state-in-componentdidmount-doesn-t-work"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>The scenario I described above. Element height depends on <code>this.state.animation</code> property.
It is initially set to <code>false</code> and element height should be 50px.
In <code>componentDidMount</code> we'll change the value of <code>this.props.animation</code> to <code>true</code>
and element height should be 250px. As we added transition, it should animate.</p>
<p>But it doesn't as all of this happens really fast, and browser decides to merge changes
and render only the end result. This way our element immediately gets height of 250px.</p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#c678dd;">import </span><span style="color:#e06c75;">React</span><span>, { </span><span style="color:#e06c75;">Component </span><span>} </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;react&#39;</span><span>;
</span><span>
</span><span style="color:#c678dd;">export default class </span><span style="color:#e5c07b;">AnimateMe </span><span style="color:#c678dd;">extends </span><span style="color:#e5c07b;">Component {
</span><span style="color:#e5c07b;">  </span><span style="color:#c678dd;">constructor</span><span style="color:#e5c07b;">(</span><span style="color:#e06c75;">props</span><span style="color:#e5c07b;">) {
</span><span style="color:#e5c07b;">    </span><span style="color:#e06c75;">super</span><span style="color:#e5c07b;">(</span><span style="color:#e06c75;">props</span><span style="color:#e5c07b;">);
</span><span style="color:#e5c07b;">
</span><span style="color:#e5c07b;">    </span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#e06c75;">state </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">{
</span><span style="color:#e5c07b;">      animate: false,
</span><span style="color:#e5c07b;">    };
</span><span style="color:#e5c07b;">  }
</span><span style="color:#e5c07b;">
</span><span style="color:#e5c07b;">  </span><span style="color:#61afef;">componentDidMount</span><span style="color:#e5c07b;">() {
</span><span style="color:#e5c07b;">    </span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#61afef;">setState</span><span style="color:#e5c07b;">({ animate: true });
</span><span style="color:#e5c07b;">  }
</span><span style="color:#e5c07b;">
</span><span style="color:#e5c07b;">  </span><span style="color:#61afef;">render</span><span style="color:#e5c07b;">() {
</span><span style="color:#e5c07b;">    </span><span style="color:#c678dd;">return </span><span style="color:#e5c07b;">(
</span><span style="color:#e5c07b;">      &lt;</span><span style="color:#e06c75;">div
</span><span style="color:#e5c07b;">        style</span><span style="color:#c678dd;">=</span><span style="color:#e5c07b;">{ {
</span><span style="color:#e5c07b;">          background: </span><span style="color:#98c379;">&#39;#eee&#39;</span><span style="color:#e5c07b;">,
</span><span style="color:#e5c07b;">          border: </span><span style="color:#98c379;">&#39;1px solid black&#39;</span><span style="color:#e5c07b;">,
</span><span style="color:#e5c07b;">          height: </span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#e06c75;">state</span><span style="color:#e5c07b;">.</span><span style="color:#e06c75;">animate </span><span style="color:#c678dd;">? </span><span style="color:#e5c07b;">250 </span><span style="color:#c678dd;">: </span><span style="color:#e5c07b;">50,
</span><span style="color:#e5c07b;">          margin: 20,
</span><span style="color:#e5c07b;">          padding: 20,
</span><span style="color:#e5c07b;">          transition: </span><span style="color:#98c379;">&#39;all 2s&#39;</span><span style="color:#e5c07b;">,
</span><span style="color:#e5c07b;">        } }
</span><span style="color:#e5c07b;">      &gt;
</span><span style="color:#e5c07b;">        Animate my height
</span><span style="color:#e5c07b;">      &lt;/</span><span style="color:#e06c75;">div</span><span style="color:#e5c07b;">&gt;
</span><span style="color:#e5c07b;">    );
</span><span style="color:#e5c07b;">  }
</span><span style="color:#e5c07b;">}
</span></code></pre>
<iframe
  height="400"
  
  scrolling="no"
  title="Rerender React component in componentDidMount - Step 1"
  src="https://codepen.io/stanko/embed/XgaNyq?default-tab=result"
  frameborder="no"
  loading="lazy"
  allowtransparency="true"
  allowfullscreen="true"
>
  See the Pen <a href="https://codepen.io/stanko/pen/XgaNyq">
  Rerender React component in componentDidMount - Step 1</a> by Stanko (<a href="https://codepen.io/stanko">@stanko</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
<h2 id="solution-add-a-short-timeout">Solution, add a short timeout<a
  class="header-anchor"
  href="#solution-add-a-short-timeout" aria-label="Anchor link for: solution-add-a-short-timeout"
  title="Anchor link for: solution-add-a-short-timeout"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I've run multiple times into this problem, but I was lazy to dig deeper and find the real reason why it is happening. My solution was to add a timeout, first I tried immediate timeout (<code>setTimeout(fn, 0)</code>), but alas, it didn't work in some browsers (as it happened too fast again and browser did their optimizations). Then I increased it to the magical value 50 (<code>setTimeout(fn, 50)</code>), and it worked in every browser.</p>
<p>Now I get the reason why it works. Because 50ms is larger than animation frame (which is around 16ms to achieve 60fps).</p>
<p><small>(I'll show you just the part of the code that is changed)</small></p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#c678dd;">...
</span><span>  </span><span style="color:#61afef;">componentDidMount</span><span>() {
</span><span>    </span><span style="color:#5c6370;">// Added timeout
</span><span>    </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">ANIMATION_TIMEOUT </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">50</span><span>;
</span><span>
</span><span>    </span><span style="color:#e06c75;">this</span><span>.</span><span style="color:#61afef;">setTimeout</span><span>(() </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>      </span><span style="color:#e06c75;">this</span><span>.</span><span style="color:#61afef;">setState</span><span>({ animate: </span><span style="color:#e5c07b;">true </span><span>});
</span><span>    }, </span><span style="color:#e06c75;">ANIMATION_TIMEOUT</span><span>);
</span><span>  }
</span><span style="color:#c678dd;">...
</span></code></pre>
<iframe
  height="400"
  
  scrolling="no"
  title="Rerender React component in componentDidMount - Step 2"
  src="https://codepen.io/stanko/embed/WOERrE?default-tab=result"
  frameborder="no"
  loading="lazy"
  allowtransparency="true"
  allowfullscreen="true"
>
  See the Pen <a href="https://codepen.io/stanko/pen/WOERrE">
  Rerender React component in componentDidMount - Step 2</a> by Stanko (<a href="https://codepen.io/stanko">@stanko</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
<p>So this is cross browser solution, but I always cringe a little when I'm forced to use timeouts like this. And I have been talking about animation frames a lot, so why don't we try that next?</p>
<h2 id="using-requestanimationframe-instead-on-timeout">Using <code>requestAnimationFrame</code> instead on timeout<a
  class="header-anchor"
  href="#using-requestanimationframe-instead-on-timeout" aria-label="Anchor link for: using-requestanimationframe-instead-on-timeout"
  title="Anchor link for: using-requestanimationframe-instead-on-timeout"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>We'll just replace timeout with <code>requestAnimationFrame</code> and it should work.
But not in Firefox :( to make things worse, sometimes it does, and sometimes doesn't.
My guess that sometimes it gets squeezed in to the same animation frame.</p>
<h3 id="update-october-2017">Update, October 2017<a
  class="header-anchor"
  href="#update-october-2017" aria-label="Anchor link for: update-october-2017"
  title="Anchor link for: update-october-2017"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Hooray! Firefox fixed this one, in newer versions it works without two nested <code>requestAnimationFrame</code>.
But you might want to stick with it for some time, to make sure all of your users upgraded their browsers.</p>
<p><small>(Again just the part of the code that is changed)</small></p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#c678dd;">...
</span><span>  </span><span style="color:#61afef;">componentDidMount</span><span>() {
</span><span>    </span><span style="color:#5c6370;">// Added requestAnimationFrame
</span><span>    </span><span style="color:#61afef;">requestAnimationFrame</span><span>(() </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>      </span><span style="color:#e06c75;">this</span><span>.</span><span style="color:#61afef;">setState</span><span>({ animate: </span><span style="color:#e5c07b;">true </span><span>});
</span><span>    });
</span><span>  }
</span><span style="color:#c678dd;">...
</span></code></pre>
<iframe
  height="400"
  
  scrolling="no"
  title="Rerender React component in componentDidMount - Step 3"
  src="https://codepen.io/stanko/embed/JJyEoz?default-tab=result"
  frameborder="no"
  loading="lazy"
  allowtransparency="true"
  allowfullscreen="true"
>
  See the Pen <a href="https://codepen.io/stanko/pen/JJyEoz">
  Rerender React component in componentDidMount - Step 3</a> by Stanko (<a href="https://codepen.io/stanko">@stanko</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
<p>So now we need to make sure our two states belong to different animation frames each.</p>
<h2 id="nested-requestanimationframe-to-the-rescue">Nested <code>requestAnimationFrame</code> to the rescue<a
  class="header-anchor"
  href="#nested-requestanimationframe-to-the-rescue" aria-label="Anchor link for: nested-requestanimationframe-to-the-rescue"
  title="Anchor link for: nested-requestanimationframe-to-the-rescue"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Idea is to separate renders of two states to different animation frames.
As we are not going to wrap React's <code>render</code> method into animation frame,
we need to nest them instead in <code>componentDidMount</code>.</p>
<p>This way we guarantee first render won't be merged together with the second one.
Problem we had in Firefox is now gone.</p>
<p>This looks hacky, but I think it is a legit solution. Instead of trying to get a <em>magic</em>
value for timeout, just use native methods that browsers provide.</p>
<p><small>(Again just the part of the code that is changed)</small></p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#c678dd;">...
</span><span>  </span><span style="color:#61afef;">componentDidMount</span><span>() {
</span><span>    </span><span style="color:#5c6370;">// Added two nested requestAnimationFrames
</span><span>    </span><span style="color:#61afef;">requestAnimationFrame</span><span>(() </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>      </span><span style="color:#5c6370;">// Firefox will sometimes merge changes that happened here
</span><span>      </span><span style="color:#61afef;">requestAnimationFrame</span><span>(() </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>        </span><span style="color:#e06c75;">this</span><span>.</span><span style="color:#61afef;">setState</span><span>({ animate: </span><span style="color:#e5c07b;">true </span><span>});
</span><span>      });
</span><span>    });
</span><span>  }
</span><span style="color:#c678dd;">...
</span></code></pre>
<iframe
  height="400"
  
  scrolling="no"
  title="Rerender React component in componentDidMount - Step 4"
  src="https://codepen.io/stanko/embed/JJyEXq?default-tab=result"
  frameborder="no"
  loading="lazy"
  allowtransparency="true"
  allowfullscreen="true"
>
  See the Pen <a href="https://codepen.io/stanko/pen/JJyEXq">
  Rerender React component in componentDidMount - Step 4</a> by Stanko (<a href="https://codepen.io/stanko">@stanko</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
<h2 id="finally-put-it-in-a-helper">Finally, put it in a helper<a
  class="header-anchor"
  href="#finally-put-it-in-a-helper" aria-label="Anchor link for: finally-put-it-in-a-helper"
  title="Anchor link for: finally-put-it-in-a-helper"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>To make things a bit cleaner, I extract this to a helper function and then use whenever I need it.
This can be used in our React examples but also with any other framework or vanilla JavaScript.</p>
<p>If you support browsers without <code>requestAnimationFrame</code> be sure to polyfill it. Paul Irish has a great one  <a href="https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/">here</a>.</p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#5c6370;">// Start animation helper using nested requestAnimationFrames
</span><span style="color:#c678dd;">function </span><span style="color:#61afef;">startAnimation</span><span>(</span><span style="color:#e06c75;">callback</span><span>) {
</span><span>  </span><span style="color:#61afef;">requestAnimationFrame</span><span>(() </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>    </span><span style="color:#61afef;">requestAnimationFrame</span><span>(() </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>      </span><span style="color:#61afef;">callback</span><span>();
</span><span>    });
</span><span>  });
</span><span>}
</span></code></pre>
<p><small>(Our <code>componentDidMount</code> code using helper)</small></p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#c678dd;">...
</span><span>  </span><span style="color:#61afef;">componentDidMount</span><span>() {
</span><span>    </span><span style="color:#5c6370;">// You&#39;ll need to import startAnimation at the top of the file
</span><span>    </span><span style="color:#61afef;">startAnimation</span><span>(() </span><span style="color:#c678dd;">=&gt; </span><span>{
</span><span>      </span><span style="color:#e06c75;">this</span><span>.</span><span style="color:#61afef;">setState</span><span>({ animate: </span><span style="color:#e5c07b;">true </span><span>});
</span><span>    });
</span><span>  }
</span><span style="color:#c678dd;">...
</span></code></pre>
<h2 id="at-the-end">At the end<a
  class="header-anchor"
  href="#at-the-end" aria-label="Anchor link for: at-the-end"
  title="Anchor link for: at-the-end"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Hope you learned something, and I'm interested to hear if somebody is using different approach to solve this problem. Cheers!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Introducing Marvin</title>
		<published>2017-05-25T00:00:00+00:00</published>
		<updated>2017-05-25T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/introducing-marvin/" type="text/html"/>
		<id>https://muffinman.io/blog/introducing-marvin/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>I'm happy to announce <a href="https://github.com/workco/marvin">Marvin</a>, boilerplate for kicking off React/Redux applications.</p>
<p><a href="https://github.com/workco/marvin"><img src="/img/marvin.jpg" alt="Marvin on Github" /></a></p>
<p>Basically my <a href="/blog/webpack-2-react-redux/">boilerplate</a> became Work &amp; Co's internal project. It is meant to be a starting point for our React projects. This way faster development is assured along with higher quality code. It is open source, and external contributions are welcome.</p>
<p>Name comes from a fictional character Marvin, android from the The Hitchhiker's Guide to the Galaxy book as a homage to it's author Douglas Adams.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>React scroll decorator</title>
		<published>2017-05-17T00:00:00+00:00</published>
		<updated>2017-05-17T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/react-scroll-position-decorator/" type="text/html"/>
		<id>https://muffinman.io/blog/react-scroll-position-decorator/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><h2 id="update-december-2017">Update, December 2017<a
  class="header-anchor"
  href="#update-december-2017" aria-label="Anchor link for: update-december-2017"
  title="Anchor link for: update-december-2017"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Check <a href="/blog/react-decorators-and-scroll-manager">this post</a> for updated, more performant version.</p>
<hr />
<p>I love JavaScript decorators. One that I copy to every React project is scroll decorator.
It is fairly simple way of injecting scroll position to react components. This way you can handle scroll using react lifecycle.</p>
<p>This decorator is not listening to a scroll event, as that is the performance killer (especially when you push it to react lifecycle). Instead, it is using interval to check if scroll position has changed. To keep it performant, I'm using <code>requestAnimationFrame</code>. Interval is only there to throttle animation frame from triggering too often.</p>
<span id="continue-reading"></span>
<p>Please note that it still may cause performance issues if you apply it to a large number of components. Personally, I never had to apply it to a more than three of four per page.</p>
<p>So here it is:</p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#c678dd;">import </span><span style="color:#e06c75;">React</span><span>, { </span><span style="color:#e06c75;">Component </span><span>} </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;react&#39;</span><span>;
</span><span>
</span><span style="color:#c678dd;">const </span><span style="color:#61afef;">withScroll </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">ComposedComponent </span><span style="color:#c678dd;">=&gt; class </span><span style="color:#e5c07b;">ScrollDecorator </span><span style="color:#c678dd;">extends </span><span style="color:#e5c07b;">Component {
</span><span style="color:#e5c07b;">  </span><span style="color:#c678dd;">constructor</span><span style="color:#e5c07b;">() {
</span><span style="color:#e5c07b;">    </span><span style="color:#e06c75;">super</span><span style="color:#e5c07b;">();
</span><span style="color:#e5c07b;">
</span><span style="color:#e5c07b;">    </span><span style="color:#5c6370;">// Initial scroll position
</span><span style="color:#e5c07b;">    </span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#e06c75;">state </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">{
</span><span style="color:#e5c07b;">      scrollPosition: </span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#61afef;">getWindowScrollTop</span><span style="color:#e5c07b;">(),
</span><span style="color:#e5c07b;">    };
</span><span style="color:#e5c07b;">
</span><span style="color:#e5c07b;">    </span><span style="color:#5c6370;">// Bind handlers
</span><span style="color:#e5c07b;">    </span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#e06c75;">handleInterval </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#e06c75;">handleInterval</span><span style="color:#e5c07b;">.</span><span style="color:#61afef;">bind</span><span style="color:#e5c07b;">(</span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">);
</span><span style="color:#e5c07b;">    </span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#e06c75;">handleRequestAnimationFrame </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#e06c75;">handleRequestAnimationFrame</span><span style="color:#e5c07b;">.</span><span style="color:#61afef;">bind</span><span style="color:#e5c07b;">(</span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">);
</span><span style="color:#e5c07b;">  }
</span><span style="color:#e5c07b;">
</span><span style="color:#e5c07b;">  </span><span style="color:#61afef;">componentWillMount</span><span style="color:#e5c07b;">() {
</span><span style="color:#e5c07b;">    </span><span style="color:#5c6370;">// 50 times per second, change to your needs
</span><span style="color:#e5c07b;">    </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">INTERVAL </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">20;
</span><span style="color:#e5c07b;">    </span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#e06c75;">intervalID </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">setInterval</span><span style="color:#e5c07b;">(</span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#e06c75;">handleInterval</span><span style="color:#e5c07b;">, </span><span style="color:#e06c75;">INTERVAL</span><span style="color:#e5c07b;">);
</span><span style="color:#e5c07b;">  }
</span><span style="color:#e5c07b;">
</span><span style="color:#e5c07b;">  </span><span style="color:#61afef;">componentWillUnmount</span><span style="color:#e5c07b;">() {
</span><span style="color:#e5c07b;">    </span><span style="color:#5c6370;">// Remove and reset interval/animationFrame
</span><span style="color:#e5c07b;">    </span><span style="color:#61afef;">clearInterval</span><span style="color:#e5c07b;">(</span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#e06c75;">intervalID</span><span style="color:#e5c07b;">);
</span><span style="color:#e5c07b;">    </span><span style="color:#61afef;">cancelAnimationFrame</span><span style="color:#e5c07b;">(</span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#e06c75;">requestID</span><span style="color:#e5c07b;">);
</span><span style="color:#e5c07b;">    </span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#e06c75;">requestID </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">null;
</span><span style="color:#e5c07b;">    </span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#e06c75;">intervalID </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">null;
</span><span style="color:#e5c07b;">  }
</span><span style="color:#e5c07b;">
</span><span style="color:#e5c07b;">  </span><span style="color:#61afef;">getWindowScrollTop</span><span style="color:#e5c07b;">() {
</span><span style="color:#e5c07b;">    </span><span style="color:#5c6370;">// Get scroll position, with IE fallback
</span><span style="color:#e5c07b;">    </span><span style="color:#c678dd;">return </span><span style="color:#e5c07b;">window.pageYOffset </span><span style="color:#c678dd;">|| </span><span style="color:#e5c07b;">document.documentElement.</span><span style="color:#e06c75;">scrollTop</span><span style="color:#e5c07b;">;
</span><span style="color:#e5c07b;">  }
</span><span style="color:#e5c07b;">
</span><span style="color:#e5c07b;">  </span><span style="color:#61afef;">handleInterval</span><span style="color:#e5c07b;">() {
</span><span style="color:#e5c07b;">    </span><span style="color:#5c6370;">// Interval is only used to throttle animation frame
</span><span style="color:#e5c07b;">    </span><span style="color:#61afef;">cancelAnimationFrame</span><span style="color:#e5c07b;">(</span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#e06c75;">requestID</span><span style="color:#e5c07b;">);
</span><span style="color:#e5c07b;">    </span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#e06c75;">requestID </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">requestAnimationFrame</span><span style="color:#e5c07b;">(</span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#e06c75;">handleRequestAnimationFrame</span><span style="color:#e5c07b;">);
</span><span style="color:#e5c07b;">  }
</span><span style="color:#e5c07b;">
</span><span style="color:#e5c07b;">  </span><span style="color:#61afef;">handleRequestAnimationFrame</span><span style="color:#e5c07b;">() {
</span><span style="color:#e5c07b;">    </span><span style="color:#c678dd;">const </span><span style="color:#e5c07b;">{ </span><span style="color:#e06c75;">scrollPosition </span><span style="color:#e5c07b;">} </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#e06c75;">state</span><span style="color:#e5c07b;">;
</span><span style="color:#e5c07b;">    </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">newScrollPosition </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#61afef;">getWindowScrollTop</span><span style="color:#e5c07b;">();
</span><span style="color:#e5c07b;">
</span><span style="color:#e5c07b;">    </span><span style="color:#5c6370;">// Update the state only when scroll position is changed
</span><span style="color:#e5c07b;">    </span><span style="color:#c678dd;">if </span><span style="color:#e5c07b;">(</span><span style="color:#e06c75;">newScrollPosition </span><span style="color:#c678dd;">!== </span><span style="color:#e06c75;">scrollPosition</span><span style="color:#e5c07b;">) {
</span><span style="color:#e5c07b;">      </span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#61afef;">setState</span><span style="color:#e5c07b;">({
</span><span style="color:#e5c07b;">        scrollPosition: </span><span style="color:#e06c75;">newScrollPosition</span><span style="color:#e5c07b;">,
</span><span style="color:#e5c07b;">      });
</span><span style="color:#e5c07b;">    }
</span><span style="color:#e5c07b;">  }
</span><span style="color:#e5c07b;">
</span><span style="color:#e5c07b;">  </span><span style="color:#61afef;">render</span><span style="color:#e5c07b;">() {
</span><span style="color:#e5c07b;">    </span><span style="color:#c678dd;">const </span><span style="color:#e5c07b;">{ </span><span style="color:#e06c75;">scrollPosition </span><span style="color:#e5c07b;">} </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#e06c75;">state</span><span style="color:#e5c07b;">;
</span><span style="color:#e5c07b;">
</span><span style="color:#e5c07b;">    </span><span style="color:#c678dd;">return </span><span style="color:#e5c07b;">(
</span><span style="color:#e5c07b;">      &lt;ComposedComponent
</span><span style="color:#e5c07b;">        { </span><span style="color:#c678dd;">...</span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#e06c75;">props </span><span style="color:#e5c07b;">}
</span><span style="color:#e5c07b;">        scrollPosition</span><span style="color:#c678dd;">=</span><span style="color:#e5c07b;">{ </span><span style="color:#e06c75;">scrollPosition </span><span style="color:#e5c07b;">}
</span><span style="color:#e5c07b;">      /&gt;
</span><span style="color:#e5c07b;">    );
</span><span style="color:#e5c07b;">  }
</span><span style="color:#e5c07b;">}</span><span>;
</span><span>
</span><span style="color:#c678dd;">export default </span><span style="color:#e06c75;">withScroll</span><span>;
</span></code></pre>
<h3 id="usage">Usage<a
  class="header-anchor"
  href="#usage" aria-label="Anchor link for: usage"
  title="Anchor link for: usage"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Import the decorator and apply it to your component, easy-peasy.</p>
<p>This will inject <code>scrollPosition</code> to it's props.</p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#c678dd;">import </span><span style="color:#e06c75;">React</span><span>, { </span><span style="color:#e06c75;">Component </span><span>} </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;react&#39;</span><span>;
</span><span style="color:#c678dd;">import </span><span style="color:#e06c75;">withScroll </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;./scroll-decorator&#39;</span><span>;
</span><span>
</span><span>@</span><span style="color:#e06c75;">withScroll
</span><span style="color:#c678dd;">class </span><span style="color:#e5c07b;">CoolComponent </span><span style="color:#c678dd;">extends </span><span style="color:#e5c07b;">Component {
</span><span style="color:#e5c07b;">  </span><span style="color:#61afef;">render</span><span style="color:#e5c07b;">() {
</span><span style="color:#e5c07b;">    </span><span style="color:#c678dd;">const </span><span style="color:#e5c07b;">{ </span><span style="color:#e06c75;">scrollPosition </span><span style="color:#e5c07b;">} </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#e06c75;">props</span><span style="color:#e5c07b;">;
</span><span style="color:#e5c07b;">
</span><span style="color:#e5c07b;">    </span><span style="color:#c678dd;">return </span><span style="color:#e5c07b;">(
</span><span style="color:#e5c07b;">      &lt;</span><span style="color:#e06c75;">div</span><span style="color:#e5c07b;">&gt;
</span><span style="color:#e5c07b;">        Current scroll position is: { </span><span style="color:#e06c75;">scrollPosition </span><span style="color:#e5c07b;">}px.
</span><span style="color:#e5c07b;">      &lt;/</span><span style="color:#e06c75;">div</span><span style="color:#e5c07b;">&gt;
</span><span style="color:#e5c07b;">    );
</span><span style="color:#e5c07b;">  }
</span><span style="color:#e5c07b;">}
</span></code></pre>
<p>Enjoy!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Time Pills tracks, stems, presets, loops and midi</title>
		<published>2017-05-14T00:00:00+00:00</published>
		<updated>2017-05-14T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/time-pills-tracks-stems/" type="text/html"/>
		<id>https://muffinman.io/blog/time-pills-tracks-stems/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Friends of mine from the band <a href="https://soundcloud.com/timepills">Time Pills</a> opensourced bunch of their tracks. You can find them on <a href="https://github.com/nndmlsvc/time-pills">GitHub</a>. They are looking forward to having them remixed by creative people and sharing it with the world</p>
<p>Repo contains all of the tracks, stems, presets, loops and even midi files.</p>
<p><a href="https://soundcloud.com/timepills"><img src="/img/timepills.jpg" alt="Time Pills SoundCloud profile" /></a></p>
<p>Be sure to check them on <a href="https://soundcloud.com/timepills">SoundCloud</a> as well.</p>
<p>Enjoy!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Work&amp;Co Tech Meetup Vol 6</title>
		<published>2017-05-09T00:00:00+00:00</published>
		<updated>2017-05-09T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/work-co-tech-meetup-vol-6/" type="text/html"/>
		<id>https://muffinman.io/blog/work-co-tech-meetup-vol-6/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Another tech meetup coming up. This time we have three great talks about engineering and project planning. We also have a special guest - <strong>IT girls team</strong>.</p>
<p>The IT Girls team will share their advances in promoting the professional development of women in technology in Serbia.</p>
<p>This one will be held on Tuesday, May 16th at <a href="https://www.google.com/maps/place/Impact+Hub+Belgrade/@44.8157208,20.460881,17z/data=!3m1!4b1!4m5!3m4!1s0x475a7ab185427a37:0x2344b5ab238871dc!8m2!3d44.815717!4d20.463075">Impact Hub Belgrade</a>.
See you there!</p>

<a href="https:&#x2F;&#x2F;www.meetup.com&#x2F;Tech-Meetup-Vol-6&#x2F;events&#x2F;239775158&#x2F;" class="image__link">

  <img
    class="image image--md   "
    src="&#x2F;img&#x2F;meetup-vol-6&#x2F;poster.jpg"
    alt="Work&amp;Co Meetup Tech Meetup Vol 6"
  />
  

</a>

<p>Check the details and sign up at <a href="https://www.meetup.com/Tech-Meetup-Vol-6/events/239775158/">meetup.com page</a>.</p>
<h3 id="talks">Talks<a
  class="header-anchor"
  href="#talks" aria-label="Anchor link for: talks"
  title="Anchor link for: talks"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<ul>
<li>
<p>Docker IRL, <strong>Miloš Pavlićević</strong></p>
<p>Find out how to incorporate Docker into your deployment/delivery process, with images! (pun intended)</p>
<p><a href="/pdf/Milos%20-%20Docker-IRL.pdf">Slides</a></p>
</li>
<li>
<p>Javascript Unit Testing, <strong>Sarah Mogin</strong></p>
<p>Learn the value of testing your Javascript applications and the tools and techniques for effective testing. We’ll focus on how to test React components, selectors, reducers, and sagas using the Jest and Enzyme libraries.</p>
<p><a href="/pdf/Sarah%20-%20UnitTesting.pdf">Slides</a></p>
</li>
<li>
<p>Introduction to React Native, <strong>Zeh Fernando</strong></p>
<p>We had last minute change, and replaced Nemanja's talk (Plan Smart) with Zeh's great introduction to React Native.</p>
<p><a href="/pdf/Zeh%20-%20Introduction%20to%20React%20Native.pdf">Slides</a></p>
</li>
</ul>
<span id="continue-reading"></span><h3 id="photos">Photos<a
  class="header-anchor"
  href="#photos" aria-label="Anchor link for: photos"
  title="Anchor link for: photos"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>

  <img
    class="image image--lg   "
    src="&#x2F;img&#x2F;meetup-vol-6&#x2F;audience.jpg"
    alt="Meetup audience"
  />
  

<div
  class="dual-image  "
>
  <img class="dual-image__img" src="&#x2F;img&#x2F;meetup-vol-6&#x2F;sarah.jpg" alt="Sarah speaking about JavaScript testing" />
  <img class="dual-image__img" src="&#x2F;img&#x2F;meetup-vol-6&#x2F;milos.jpg" alt="Milos AKA Docker overlord" />
</div>

  <img
    class="image image--lg   "
    src="&#x2F;img&#x2F;meetup-vol-6&#x2F;zeh.jpg"
    alt="React Native introduction by Zeh"
  />
  


    </content>

	</entry>
	<entry xml:lang="en">
		<title>Nicer git log</title>
		<published>2017-04-25T00:00:00+00:00</published>
		<updated>2017-04-25T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/nicer-git-log/" type="text/html"/>
		<id>https://muffinman.io/blog/nicer-git-log/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Just a short one. I want to share a simple command to display nicer <code>git log</code> in the terminal. <code>git log</code> has <code>--pretty=format</code> option built-in, we are just going to pass formatting to it.</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>git log --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39;
</span></code></pre>
<p>And it looks like this:</p>

  <img
    class="image image--md   "
    src="&#x2F;img&#x2F;nicer-git-log.png"
    alt="Nicer git log"
  />
  

<p>Then add it to your <code>.bash_profile</code> as an alias (I'm using <code>glog</code>) and that's it.</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>alias glog=&quot;git log --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39;&quot;
</span></code></pre>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Being a tech lead, the thing I miss the most</title>
		<published>2017-03-09T00:00:00+00:00</published>
		<updated>2017-03-09T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/being-a-tech-lead/" type="text/html"/>
		<id>https://muffinman.io/blog/being-a-tech-lead/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>I started leading teams relatively early in my career.
Mentoring and leading younger developers is something I tremendously enjoy.
But there is one thing I really miss about being a &quot;regular&quot; developer.</p>
<p>And that is - being able to put my headphones, play some rock 'n roll,
and code for a couple of hours without any distractions.</p>
<p>Something that is almost impossible today. I'm not complaining,
but the truth is that I really miss it.
Luckily, I can fulfill my geek needs working on pet projects.</p>
<p>Cheers!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>React animate height (slide up&#x2F;down) component</title>
		<published>2017-03-06T00:00:00+00:00</published>
		<updated>2017-03-06T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/react-animate-height-slide-up-down/" type="text/html"/>
		<id>https://muffinman.io/blog/react-animate-height-slide-up-down/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Most JavaScript developers used jQuery's <code>.slideUp()</code> and <code>.slideDown()</code> methods,
and got used to them. As component based frameworks usually do not include such functionality,
the first logic choice is to turn to CSS. But alas, CSS transitions do not work with <code>height: auto</code>.
(Transitions can do a tween only between two numeric values.)</p>
<p>As we use this a lot in our company, I tried to find React component that does it.
Found a couple, didn't like them, as most of them rely on a tone of dependencies.
Again, I decided to write my own - small, fast and with no dependencies.</p>
<h2 id="demo">Demo<a
  class="header-anchor"
  href="#demo" aria-label="Anchor link for: demo"
  title="Anchor link for: demo"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>You can see it live <a href="https://muffinman.io/react-animate-height/">here</a>.
Same page has the documentation and links to the npm and GitHub.</p>
<p>Component can animate from (and to) <code>0</code> (collapsed), <code>auto</code> (expanded),
and to any specific value in pixels.</p>
<span id="continue-reading"></span><h2 id="usage">Usage<a
  class="header-anchor"
  href="#usage" aria-label="Anchor link for: usage"
  title="Anchor link for: usage"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Install it from npm</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>npm install --save react-animate-height
</span></code></pre>
<p>import it in your React project,
and wrap the content you want to animate in it.</p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#c678dd;">import </span><span style="color:#e06c75;">AnimateHeight </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;react-animate-height&#39;</span><span>;
</span><span>
</span><span>&lt;</span><span style="color:#e5c07b;">AnimateHeight
</span><span>  </span><span style="color:#e5c07b;">duration</span><span style="color:#c678dd;">=</span><span>{ </span><span style="color:#e5c07b;">500 </span><span>}
</span><span>  </span><span style="color:#e5c07b;">height</span><span style="color:#c678dd;">=</span><span>{ </span><span style="color:#98c379;">&#39;auto&#39; </span><span>}
</span><span>&gt;
</span><span>  &lt;</span><span style="color:#e06c75;">h1</span><span>&gt;Your content goes here&lt;/</span><span style="color:#e06c75;">h1</span><span>&gt;
</span><span>  &lt;</span><span style="color:#e06c75;">p</span><span>&gt;Put as many React or HTML components here.&lt;/</span><span style="color:#e06c75;">p</span><span>&gt;
</span><span>&lt;/</span><span style="color:#e5c07b;">AnimateHeight</span><span>&gt;
</span></code></pre>
<p>For more detailed documentation and all props explained,
check the <a href="https://github.com/Stanko/react-animate-height">GitHub repo</a>,</p>
<h2 id="how-it-works">How it works<a
  class="header-anchor"
  href="#how-it-works" aria-label="Anchor link for: how-it-works"
  title="Anchor link for: how-it-works"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Component is using CSS transitions, but with a small trick to make it work.
We mentioned that transitions only work between two numeric values.
We'll replace <code>auto</code> with numeric value just before transition happens.</p>
<p>There are three possible cases:</p>
<ul>
<li>
<p><strong>Specific height to the other specific height</strong></p>
<p>This is the easiest one. Element will have <code>overflow: hidden</code> and translate from
one height value to the other. Piece of cake.</p>
</li>
<li>
<p><strong>Specific height (0 included) to auto</strong></p>
<p>This one is a bit more interesting. As we can't transition to <code>auto</code>,
component will take the content height, apply it to the element, and transition will happen.
But important thing is that after the transition is complete,
component will reset <code>height</code> to <code>auto</code> and <code>overflow</code> to <code>visible</code></p>
<p>This is important if you add more content to the component, it will natively grow.
As well for the potential absolute elements that you want to go outside of the container.
Note that when specific height is applied element will always have <code>overflow: hidden</code>.</p>
</li>
<li>
<p><strong>Auto to specific height (0 included)</strong>
Similar to the previous case but reversed. Component will grab the expanded height and
apply it to the element. Then with a timeout of 0, apply specific height.
(Check <a href="/talks-i-like/#what-the-heck-is-the-event-loop-anyway-brsmallphilip-roberts-2014small">this</a> if you are confused about the timeout of 0.) Again, transition will work as it goes between two numeric values.</p>
</li>
</ul>
<h2 id="conclusion">Conclusion<a
  class="header-anchor"
  href="#conclusion" aria-label="Anchor link for: conclusion"
  title="Anchor link for: conclusion"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I guess everyone took slide up/down for granted, but in the end there is a little
logic that needs to be put in to make it work properly.
On the other hand some people are solving it by pilling up the 3rd party code.
Please, when you are open sourcing a library, keep it small and simple!</p>
<p>Hope you'll use it!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Couple of talks I really liked</title>
		<published>2017-03-05T00:00:00+00:00</published>
		<updated>2017-03-05T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/talks-i-like/" type="text/html"/>
		<id>https://muffinman.io/blog/talks-i-like/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>In this post you can find seven talks I really liked in no particular order, most of them development related. I'll explain why I liked them, and why I should recommend watching every single one of them.</p>
<p>Every talks is embedded, but link to a website or youtube is included as well.</p>
<p>Please comment with the talks you think are worth watching.</p>
<span id="continue-reading"></span><h3 id="watgary-bernhardt-2012">Wat<br /><span class="h5">Gary Bernhardt, 2012</span><a
  class="header-anchor"
  href="#watgary-bernhardt-2012" aria-label="Anchor link for: watgary-bernhardt-2012"
  title="Anchor link for: watgary-bernhardt-2012"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>The talk I shared too many times. Gary talks about weird stuff in Ruby and JavaScript.
It is witty and educational at the same time. I guarantee it will make you laugh.
Only four minutes long, give it a try.</p>
<p><video poster="/img/wat.png" preload="none" controls="true" src="/videos/wat.mov"></video></p>
<p><a href="https://www.destroyallsoftware.com/talks/wat">Link</a></p>
<h3 id="live-react-hot-reloading-with-time-traveldan-abramov-2015">Live React: Hot Reloading with Time Travel<br /><span class="h5">Dan Abramov, 2015</span><a
  class="header-anchor"
  href="#live-react-hot-reloading-with-time-traveldan-abramov-2015" aria-label="Anchor link for: live-react-hot-reloading-with-time-traveldan-abramov-2015"
  title="Anchor link for: live-react-hot-reloading-with-time-traveldan-abramov-2015"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>We all know Dan Abramov and what he has done for the React/JS community.
This is the talk that made him famous and he ended up working for Facebook.
It is about hot reloading in React, which he made mainstream.</p>
<p>It is best described with a YouTube comment: &quot;All that was missing was the mic drop at the end.﻿&quot;</p>
<div class="aspect-ratio-video">
<iframe src="https://www.youtube.com/embed/xsSnOQynTHs?rel=0?ecver=2" frameborder="0" allowfullscreen="true">
</iframe>
</div>
<p><a href="https://www.youtube.com/watch?v=xsSnOQynTHs">Link</a></p>
<h3 id="what-the-heck-is-the-event-loop-anyway-philip-roberts-2014">What the heck is the event loop anyway?<br /><span class="h5">Philip Roberts, 2014</span><a
  class="header-anchor"
  href="#what-the-heck-is-the-event-loop-anyway-philip-roberts-2014" aria-label="Anchor link for: what-the-heck-is-the-event-loop-anyway-philip-roberts-2014"
  title="Anchor link for: what-the-heck-is-the-event-loop-anyway-philip-roberts-2014"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p><em>Every</em> JavaScript developer should watch this. Philip explained what event loop is, how it works, in a simple language using beautiful examples.</p>
<div class="aspect-ratio-video">
<iframe src="https://www.youtube.com/embed/8aGhZQkoFbQ?rel=0?ecver=2" frameborder="0" allowfullscreen="true">
</iframe>
</div>
<p><a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ">Link</a></p>
<h3 id="the-early-days-of-id-softwarejohn-romero-2016">The Early Days of id Software<br /><span class="h5">John Romero, 2016</span><a
  class="header-anchor"
  href="#the-early-days-of-id-softwarejohn-romero-2016" aria-label="Anchor link for: the-early-days-of-id-softwarejohn-romero-2016"
  title="Anchor link for: the-early-days-of-id-softwarejohn-romero-2016"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Wow! This reminded me why I started programming, and how I ended up where I am today.
I started with the only one thing in mind - to write games.</p>
<p>Historical talk about couple of kids who wanted to do exactly that.
How they started, what they principles were. For those who don't know, id Software is behind
Doom, Quake, Commander Keen, Wolfenstein and many more games.
Don't get scared because it is almost one hour long, talk itself if about thirty minutes.</p>
<p>It got me thinking about writing games again,
and hopefully I will have a blog post about that soon.</p>
<div class="aspect-ratio-video">
<iframe src="https://www.youtube.com/embed/E2MIpi8pIvY?rel=0?ecver=2" frameborder="0" allowfullscreen="true">
</iframe>
</div>
<p><a href="https://www.youtube.com/watch?v=E2MIpi8pIvY">Link</a></p>
<h3 id="adjusting-the-dials-in-the-circuits-of-the-human-brain-with-deep-by-brain-stimulation-dr-andres-lozan-2016">Adjusting the Dials in the Circuits of the Human Brain with Deep by Brain Stimulation<br /> <span class="h5">Dr Andres Lozan, 2016</span><a
  class="header-anchor"
  href="#adjusting-the-dials-in-the-circuits-of-the-human-brain-with-deep-by-brain-stimulation-dr-andres-lozan-2016" aria-label="Anchor link for: adjusting-the-dials-in-the-circuits-of-the-human-brain-with-deep-by-brain-stimulation-dr-andres-lozan-2016"
  title="Anchor link for: adjusting-the-dials-in-the-circuits-of-the-human-brain-with-deep-by-brain-stimulation-dr-andres-lozan-2016"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>I watched this one live at ng-conf 2016, and it blew me away.
It has nothing to do with a development, but medicine.
How doctors are able to adjust brain functions by applying electricity to a certain parts.</p>
<p>It still sounds like a science fiction to me.</p>
<div class="aspect-ratio-video">
<iframe src="https://www.youtube.com/embed/IEMLGrKJeK0?rel=0?ecver=2" frameborder="0" allowfullscreen="true">
</iframe>
</div>
<p><a href="https://www.youtube.com/watch?v=IEMLGrKJeK0">Link</a></p>
<h3 id="here-s-what-happens-when-an-18-year-old-buys-a-mainframeconnor-krukosky-2016">Here's What Happens When an 18 Year Old Buys a Mainframe<br /><span class="h5">Connor Krukosky, 2016</span><a
  class="header-anchor"
  href="#here-s-what-happens-when-an-18-year-old-buys-a-mainframeconnor-krukosky-2016" aria-label="Anchor link for: here-s-what-happens-when-an-18-year-old-buys-a-mainframeconnor-krukosky-2016"
  title="Anchor link for: here-s-what-happens-when-an-18-year-old-buys-a-mainframeconnor-krukosky-2016"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Title is self-explanatory - young enthusiast got his hands on an old mainframe.</p>
<div class="aspect-ratio-video">
<iframe src="https://www.youtube.com/embed/45X4VP8CGtk?rel=0?ecver=2" frameborder="0" allowfullscreen="true">
</iframe>
</div>
<p><a href="https://www.youtube.com/watch?v=45X4VP8CGtk">Link</a></p>
<h3 id="do-schools-kill-creativitysir-ken-robinson-2007">Do schools kill creativity<br /><span class="h5">Sir Ken Robinson, 2007</span><a
  class="header-anchor"
  href="#do-schools-kill-creativitysir-ken-robinson-2007" aria-label="Anchor link for: do-schools-kill-creativitysir-ken-robinson-2007"
  title="Anchor link for: do-schools-kill-creativitysir-ken-robinson-2007"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Last, but not the least. This is the most watched TED talk on YouTube.
Sir Ken Robinson needs no introduction, and he talks about the school system,
and how it may be killing kid's creativity.</p>
<div class="aspect-ratio-video">
<iframe src="https://www.youtube.com/embed/iG9CE55wbtY?rel=0?ecver=2" frameborder="0" allowfullscreen="true">
</iframe>
</div>
<p><a href="https://www.youtube.com/watch?v=iG9CE55wbtY">Link</a></p>
<p>Hope you found some of these interesting to watch, and that you learned something new.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Mobile Chrome vh units fix</title>
		<published>2017-01-21T00:00:00+00:00</published>
		<updated>2017-01-21T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/mobile-chrome-vh-units-fix/" type="text/html"/>
		<id>https://muffinman.io/blog/mobile-chrome-vh-units-fix/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><h3 id="update-march-2019">Update March 2019<a
  class="header-anchor"
  href="#update-march-2019" aria-label="Anchor link for: update-march-2019"
  title="Anchor link for: update-march-2019"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Check <a href="https://css-tricks.com/the-trick-to-viewport-units-on-mobile/">this fix</a> too. It works really well in most cases.</p>
<hr />
<p>If you ever used <code>vh</code> units and tested your work on mobile Chrome (iOS and Android),
you probably were annoyed by page jumping when you scroll.</p>
<p>As you probably know <code>vh</code> units are based on the window height.
When you scroll, Chrome's address bar disappears and chrome actually changes window height.
Also triggers window resize event.
So when it does happen it changes the value of <code>vh</code> unit, making your elements resize,
and page jump. On Android, keyboard toggle will do the same.</p>
<p>Well I made a plain JavaScript library to solve this problem.</p>
<p>Demo and documentation are available <a href="https://muffinman.io/mobile-chrome-vh-fix/">here</a>.</p>
<span id="continue-reading"></span><h2 id="how-does-it-work">How does it work?<a
  class="header-anchor"
  href="#how-does-it-work" aria-label="Anchor link for: how-does-it-work"
  title="Anchor link for: how-does-it-work"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>On load, it will get the element and set them fixed height in pixels,
using this formula:</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>window height / 100 * given vh value
</span></code></pre>
<p>Library listens for the window <code>resize</code> event, and only if both dimensions are changed
(which on mobile means orientation has changed)
it will recalculate and apply fixed height based on new window height. Please note that Android Chrome has a bug - when keyboard pops up, it triggers orientation change</p>
<p>Library will only do this if it detects Chrome on Android or iOS.</p>
<h2 id="usage">Usage<a
  class="header-anchor"
  href="#usage" aria-label="Anchor link for: usage"
  title="Anchor link for: usage"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>It accepts one parameter, which is an array of objects.
Every object should have CSS selector and height in <code>vh</code> units.
All elements that match given selector will be fixed.</p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#c678dd;">var </span><span style="color:#e06c75;">options </span><span style="color:#c678dd;">= </span><span>[
</span><span>  {
</span><span>    selector: </span><span style="color:#98c379;">&#39;.Bears&#39;</span><span>, </span><span style="color:#5c6370;">// Mandatory, CSS selector
</span><span>    vh: </span><span style="color:#e5c07b;">150</span><span>,  </span><span style="color:#5c6370;">// Mandatory, height in vh units
</span><span>  },
</span><span>  {
</span><span>    selector: </span><span style="color:#98c379;">&#39;.Foxes&#39;</span><span>,
</span><span>    vh: </span><span style="color:#e5c07b;">50
</span><span>  },
</span><span>  {
</span><span>    selector: </span><span style="color:#98c379;">&#39;.Horses&#39;</span><span>,
</span><span>    vh: </span><span style="color:#e5c07b;">100
</span><span>  }
</span><span>];
</span><span>
</span><span style="color:#c678dd;">var </span><span style="color:#e06c75;">vhFix </span><span style="color:#c678dd;">= new </span><span>VHChromeFix(</span><span style="color:#e06c75;">options</span><span>);
</span></code></pre>
<h2 id="react-component-is-wip">React Component is WIP<a
  class="header-anchor"
  href="#react-component-is-wip" aria-label="Anchor link for: react-component-is-wip"
  title="Anchor link for: react-component-is-wip"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I have a React component already done in a another project,
but I need to extract it, and pack it up as a separate <code>npm</code> package for easier usage.</p>
<p>Grab the code on <a href="https://github.com/Stanko/mobile-chrome-vh-fix">GitHub</a>.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Deploying React (Router) app to the subfolder on server</title>
		<published>2017-01-18T00:00:00+00:00</published>
		<updated>2017-01-18T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/react-router-subfolder-on-server/" type="text/html"/>
		<id>https://muffinman.io/blog/react-router-subfolder-on-server/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><ul>
<li>May 2018 - Updated to match React Router v4 API.</li>
<li>September 2019 - Updated to match React Router v5 API, added React Create App part.</li>
</ul>
<p>If you ever had to deploy React Router app to the subfolder on the server, you know what the problem is.
Routes will get messed up once you upload it to the server.
Here are two solutions I use in these cases.</p>
<h2 id="easy-way-just-use-hashrouter">Easy way, just use <code>HashRouter</code><a
  class="header-anchor"
  href="#easy-way-just-use-hashrouter" aria-label="Anchor link for: easy-way-just-use-hashrouter"
  title="Anchor link for: easy-way-just-use-hashrouter"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>The easiest way to achieve this is to use <code>HashRouter</code> instead of <code>BrowserRouter</code>.</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#c678dd;">import </span><span>{ </span><span style="color:#e06c75;">HashRouter</span><span>, </span><span style="color:#e06c75;">Route </span><span>} </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;react-router-dom&#39;</span><span>;
</span><span>
</span><span style="color:#5c6370;">// Then in render
</span><span>&lt;HashRouter&gt;
</span><span>  </span><span style="color:#c678dd;">&lt;</span><span style="color:#e06c75;">Route path</span><span style="color:#c678dd;">=</span><span style="color:#98c379;">&#39;/&#39; </span><span style="color:#e06c75;">component</span><span style="color:#c678dd;">=</span><span>{ </span><span style="color:#e06c75;">Home </span><span>} </span><span style="color:#e06c75;">exact </span><span style="color:#c678dd;">/&gt;
</span><span>  </span><span style="color:#c678dd;">&lt;</span><span style="color:#e06c75;">Route path</span><span style="color:#c678dd;">=</span><span style="color:#98c379;">&#39;/about&#39; </span><span style="color:#e06c75;">component</span><span style="color:#c678dd;">=</span><span>{ </span><span style="color:#e06c75;">About </span><span>} </span><span style="color:#e06c75;">exact </span><span style="color:#c678dd;">/&gt;
</span><span>  {</span><span style="color:#5c6370;">/*...*/</span><span>}
</span><span style="color:#c678dd;">&lt;/</span><span style="color:#e06c75;">HashRouter</span><span style="color:#c678dd;">&gt;
</span></code></pre>
<p>This is the best approach if your subfolder name changes
(for example, if folder name is a build version).
But you'll have <code>/#/</code> included in the every URL.
If this bothers you, check the second solution.</p>
<span id="continue-reading"></span>
<p>Example of the routes</p>
<ul>
<li><code>http://yourserver.com/path/to/subfolder/</code></li>
<li><code>http://yourserver.com/path/to/subfolder/#/about</code></li>
<li><code>http://yourserver.com/path/to/subfolder/#/search</code></li>
</ul>
<h2 id="hard-way-setting-base-path-by-hand">Hard way, setting base path by hand<a
  class="header-anchor"
  href="#hard-way-setting-base-path-by-hand" aria-label="Anchor link for: hard-way-setting-base-path-by-hand"
  title="Anchor link for: hard-way-setting-base-path-by-hand"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>If you want to keep browser history implementation, you'll need to change few things.
First, we need to update our routes to include full absolute path to the subfolder.</p>
<h3 id="using-react-router-s-basename">Using React Router's <code>basename</code><a
  class="header-anchor"
  href="#using-react-router-s-basename" aria-label="Anchor link for: using-react-router-s-basename"
  title="Anchor link for: using-react-router-s-basename"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>As Davis Cabral pointed out in the comments, instead of manually adding <code>publicPath</code>
to all routes, it can be achieved by using React Router's <a href="https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/docs/api/BrowserRouter.md#basename-string">basename</a> prop.</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span style="color:#c678dd;">import </span><span>{ </span><span style="color:#e06c75;">BrowserRouter</span><span>, </span><span style="color:#e06c75;">Route </span><span>} </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;react-router-dom&#39;</span><span>;
</span><span>
</span><span style="color:#5c6370;">// Then in render
</span><span style="color:#c678dd;">&lt;</span><span style="color:#e06c75;">BrowserRouter basename</span><span style="color:#c678dd;">=</span><span style="color:#98c379;">&#39;/path/to/subfolder/&#39;</span><span style="color:#c678dd;">&gt;
</span><span>  </span><span style="color:#c678dd;">&lt;</span><span style="color:#e06c75;">Route path</span><span style="color:#c678dd;">=</span><span style="color:#98c379;">&#39;/&#39; </span><span style="color:#e06c75;">component</span><span style="color:#c678dd;">=</span><span>{ </span><span style="color:#e06c75;">Home </span><span>} </span><span style="color:#e06c75;">exact </span><span style="color:#c678dd;">/&gt;
</span><span>  </span><span style="color:#c678dd;">&lt;</span><span style="color:#e06c75;">Route path</span><span style="color:#c678dd;">=</span><span style="color:#98c379;">&#39;/about&#39; </span><span style="color:#e06c75;">component</span><span style="color:#c678dd;">=</span><span>{ </span><span style="color:#e06c75;">About </span><span>} </span><span style="color:#e06c75;">exact </span><span style="color:#c678dd;">/&gt;
</span><span>  {</span><span style="color:#5c6370;">/*...*/</span><span>}
</span><span style="color:#c678dd;">&lt;/</span><span style="color:#e06c75;">BrowserRouter</span><span style="color:#c678dd;">&gt;
</span></code></pre>
<h3 id="doing-it-by-the-hand">Doing it by the hand<a
  class="header-anchor"
  href="#doing-it-by-the-hand" aria-label="Anchor link for: doing-it-by-the-hand"
  title="Anchor link for: doing-it-by-the-hand"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>I define my routes something like this:</p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#c678dd;">const </span><span style="color:#e06c75;">publicPath </span><span style="color:#c678dd;">= </span><span style="color:#98c379;">&#39;/path/to/subfolder/&#39;</span><span>;
</span><span>
</span><span style="color:#c678dd;">export const </span><span style="color:#e06c75;">routeCodes </span><span style="color:#c678dd;">= </span><span>{
</span><span>  HOME: </span><span style="color:#e06c75;">publicPath</span><span>,
</span><span>  SEARCH: </span><span style="color:#98c379;">`${ </span><span style="color:#e06c75;">publicPath </span><span style="color:#98c379;">}search`</span><span>,
</span><span>  ABOUT: </span><span style="color:#98c379;">`${ </span><span style="color:#e06c75;">publicPath </span><span style="color:#98c379;">}about`</span><span>,
</span><span>};
</span><span>
</span><span style="color:#5c6370;">// Then you can use them like this
</span><span style="color:#5c6370;">// &lt;Route exact path={ routeCodes.ABOUT } component={ About } /&gt;
</span></code></pre>
<h3 id="setting-up-htaccess-file">Setting up <code>.htaccess</code> file<a
  class="header-anchor"
  href="#setting-up-htaccess-file" aria-label="Anchor link for: setting-up-htaccess-file"
  title="Anchor link for: setting-up-htaccess-file"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Once uplodaded to the server any route (but root <code>/</code>) will return 404 error.
For example, if you try to open <code>http://yourserver.com/path/to/subfolder/about</code>,
server will look for file (or folder) named <code>about</code> in the app subfolder.
As it doesn't exist, it will fail with 404.</p>
<p>You'll need to add a simple <code>.htaccess</code> file,
in order to tell the server to fallback to our <code>index.html</code> file.
This is the same configuration we would use if the application was on the server root,
just with a different absolute path to our index file.</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>RewriteEngine On
</span><span>RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -f [OR]
</span><span>RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -d
</span><span>RewriteRule ^ - [L]
</span><span>
</span><span># Fallback all other routes to index.html
</span><span>RewriteRule ^ /path/to/subfolder/index.html [L]
</span></code></pre>
<p>Now our example routes will look like this</p>
<ul>
<li><code>http://yourserver.com/path/to/subfolder/</code></li>
<li><code>http://yourserver.com/path/to/subfolder/about</code></li>
<li><code>http://yourserver.com/path/to/subfolder/search</code></li>
</ul>
<h3 id="notice-about-webpack-s-output-publicpath-configuration">Notice about webpack's <code>output -&gt; publicPath</code> configuration<a
  class="header-anchor"
  href="#notice-about-webpack-s-output-publicpath-configuration" aria-label="Anchor link for: notice-about-webpack-s-output-publicpath-configuration"
  title="Anchor link for: notice-about-webpack-s-output-publicpath-configuration"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>If you are using <code>publicPath</code> in webpack's <code>output</code> object,
make sure you either remove it or update to match your server build path.
Removing it  is easier, as it will create relative links,
which should work with your new configuration.</p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span>output: {
</span><span>  publicPath: </span><span style="color:#98c379;">&#39;/&#39;</span><span>, </span><span style="color:#5c6370;">// Remove, or update it
</span><span>  path: </span><span style="color:#98c379;">&#39;./build&#39;</span><span>,
</span><span>  filename: </span><span style="color:#98c379;">&#39;app-[hash].js&#39;</span><span>,
</span><span>},
</span></code></pre>
<h2 id="create-react-app">Create React App<a
  class="header-anchor"
  href="#create-react-app" aria-label="Anchor link for: create-react-app"
  title="Anchor link for: create-react-app"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>A lot of people are using Create React App. To deploy it in subfolder, you can set <code>homepage</code> in your <code>package.json</code>, for more details <a href="https://create-react-app.dev/docs/deployment#building-for-relative-paths">check their documentation</a></p>
<hr />
<p>I'm also interested if anyone has different/better ideas, cheers!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Winter Tech Meetup Vol 5</title>
		<published>2017-01-12T00:00:00+00:00</published>
		<updated>2017-01-12T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/winter-tech-meetup-vol-5/" type="text/html"/>
		<id>https://muffinman.io/blog/winter-tech-meetup-vol-5/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>We prepared another tech meetup, this time with four presentations.
There will be a break after the second one.
This should be the biggest one so far, with two guest speakers.</p>
<p>It will happen on February the 4th, at Belgrade Youth Centre.
Hope to see you there!</p>
<p><a href="https://www.facebook.com/events/171047483377472/">
<img src="/img/winter-meetup-vol-5/poster.jpg" alt="Meetup poster" />
</a></p>
<p>Visit <a href="https://www.facebook.com/events/171047483377472/">Facebook event</a>
or <a href="https://www.meetup.com/Tech-Meetup-Vol-5/">meetup.com page</a>.
And apply
<a href="https://docs.google.com/forms/d/e/1FAIpQLSc_HFx5M6rhQYqmXkV5V1dPhkw0-M8L4R-1L7LoN6p2zgfnOA/viewform">here</a>.</p>
<p>Thanks to everyone who participated!</p>
<h3 id="slides">Slides<a
  class="header-anchor"
  href="#slides" aria-label="Anchor link for: slides"
  title="Anchor link for: slides"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<ul>
<li><a href="/pdf/Nikola Pantovic - Pet cula u poslovnom nastupu.pdf">Five senses in a business performance</a> - Nikola Pantović</li>
<li><a href="/pdf/Ivan Nikitovic - Go fast with web workers.pdf">Go fast with Web Workers</a> - Ivan Nikitović</li>
<li><a href="/pdf/Sasa Ranisavljevic - How to become more professional developer.pdf">Become more professional developer</a> - Saša Ranisavljević</li>
<li><a href="/pdf/Stanko Tadic - State of modern JS development.pdf">State of a modern JavaScript development</a> - Stanko Tadić (myself)</li>
</ul>
<h3 id="photos">Photos<a
  class="header-anchor"
  href="#photos" aria-label="Anchor link for: photos"
  title="Anchor link for: photos"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>
  <img
    class="image image--lg   "
    src="&#x2F;img&#x2F;winter-meetup-vol-5&#x2F;1.jpg"
    alt="Nikola Pantović"
  />
  



  <img
    class="image image--lg   "
    src="&#x2F;img&#x2F;winter-meetup-vol-5&#x2F;2.jpg"
    alt="Tech meetup audience"
  />
  



  <img
    class="image image--lg   "
    src="&#x2F;img&#x2F;winter-meetup-vol-5&#x2F;3.jpg"
    alt="Stanko Tadić talking about JavaScript"
  />
  



  <img
    class="image image--lg   "
    src="&#x2F;img&#x2F;winter-meetup-vol-5&#x2F;4.jpg"
    alt="Saša Ranisavljević"
  />
  

</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Counting sheep</title>
		<published>2016-12-28T00:00:00+00:00</published>
		<updated>2016-12-28T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/counting-sheep/" type="text/html"/>
		<id>https://muffinman.io/blog/counting-sheep/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Just something to cheer you up for the holidays :)
I got this idea while I was sick in bed, and had nothing smarter to do.
Pure CSS, no JavaScript at all. Hope you like it, I may add some more details.</p>
<iframe
  height="400"
  
  scrolling="no"
  title="Counting sheep"
  src="https://codepen.io/stanko/embed/BQgZda?default-tab=result"
  frameborder="no"
  loading="lazy"
  allowtransparency="true"
  allowfullscreen="true"
>
  See the Pen <a href="https://codepen.io/stanko/pen/BQgZda">
  Counting sheep</a> by Stanko (<a href="https://codepen.io/stanko">@stanko</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
<p>Check the code on <a href="http://codepen.io/stanko/pen/BQgZda/">codepen</a>.</p>
<p>Happy new year!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Looking forward to the 2017</title>
		<published>2016-12-21T00:00:00+00:00</published>
		<updated>2016-12-21T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/looking-forward-to-2017/" type="text/html"/>
		<id>https://muffinman.io/blog/looking-forward-to-2017/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>2016 was quite a ride.
I just want to write a couple of random things,
to close this year with one last post.</p>
<h2 id="work-co">Work &amp; Co<a
  class="header-anchor"
  href="#work-co" aria-label="Anchor link for: work-co"
  title="Anchor link for: work-co"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Big news here, my company became a part of <a href="http://work.co">Work &amp; Co</a>.
We're really excited about that, and I'm looking forward to the great stuff we are going to build.
Our collaboration goes back for a few years now, it was very productive,
and this is a great step forward.</p>
<p>My current title is a <em>Technology Director</em> and I'm in charge of a tech team,
here in the Belgrade office.</p>
<span id="continue-reading"></span><h2 id="winter-meetup">Winter Meetup<a
  class="header-anchor"
  href="#winter-meetup" aria-label="Anchor link for: winter-meetup"
  title="Anchor link for: winter-meetup"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>We are preparing a new tech meetup, this time a bit bigger one,
with four speakers. I'll talk about JavaScript, if it is going in the right direction.
About it's problems, misunderstandings, fear and hate that are involved around it.
Don't worry, I'll talk about the good parts too.</p>
<p>All of the presentations include:</p>
<ul>
<li>Five senses in a business performance - Nikola Pantović</li>
<li>Go fast with Web Workers - Ivan Nikitović</li>
<li>Become more professional developer - Saša Ranisavljević</li>
<li>State of a modern JavaScript development - Stanko Tadić (myself)</li>
</ul>
<p>It will probably happen on the first Saturday in February of 2017,
but I'll post updates with the exact date and venue.</p>
<p>So be sure to come to <em>Work &amp; Co Belgrade Winter Meetup</em>.</p>
<h2 id="few-articles-i-want-to-share">Few articles I want to share<a
  class="header-anchor"
  href="#few-articles-i-want-to-share" aria-label="Anchor link for: few-articles-i-want-to-share"
  title="Anchor link for: few-articles-i-want-to-share"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I rarely find articles that I think are really worth sharing.
But there are two that I like a lot.</p>
<ul>
<li><a href="http://paulgraham.com/wealth.html">How to Make Wealth</a></li>
<li><a href="https://gist.github.com/Stanko/cb3e287f9ee6b836cdfad5d04a3fb208">Short guide for Startup Software Engineers in 2nd/3rd World Countries</a></li>
</ul>
<p>The first one is a cliche in the startup world,.
In case you haven't read it yet, and you are interested in making a startup, please do.</p>
<p>The second one, unfortunately, is not online anymore, but I found it cached,
and made a gist copy of it.
It is written by a colleague Serbian, here in Belgrade.
He really puts some light on how startup scene is totally different here,
and in The valley and western world.
To me, it was really an eye opener when I first read it.</p>
<p>I hope original author won't mind I shared it. Here are links to the <a href="http://blog.prng.org/2010/short-guide-startup/">original blog</a>,
and the <a href="http://web.archive.org/web/20150718230004/http://blog.prng.org/2010/short-guide-startup/">cached version</a>.</p>
<h2 id="pet-projects">Pet projects<a
  class="header-anchor"
  href="#pet-projects" aria-label="Anchor link for: pet-projects"
  title="Anchor link for: pet-projects"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I really enjoy these, and I will continue sharing small projects and libraries,
with a hope that community finds them useful.
Feel free to check my <a href="https://github.com/Stanko">GitHub account</a>.</p>
<p>This blog will get updated, hopefully a bit more often.
Btw, this blog is also open source and powered by Jekyll + Travis + Github Pages.</p>
<p>Other than that I hope to roll out a one or two small mvp products.</p>
<h2 id="see-you-next-year">See you next year<a
  class="header-anchor"
  href="#see-you-next-year" aria-label="Anchor link for: see-you-next-year"
  title="Anchor link for: see-you-next-year"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>This is probably it for this year, it was exhausting, but fun year for me.
Now, I took some days off, to get prepared for the new chapter the 2017 will bring.</p>
<p>Cheers, and happy holidays!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Setting up Webpack, Babel and React from scratch - Part 3</title>
		<published>2016-11-24T00:00:00+00:00</published>
		<updated>2016-11-24T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/setting-up-webpack-babel-and-react-from-scratch-part-3/" type="text/html"/>
		<id>https://muffinman.io/blog/setting-up-webpack-babel-and-react-from-scratch-part-3/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><h2 id="part-three-also-the-last-part">Part three - also the last part<a
  class="header-anchor"
  href="#part-three-also-the-last-part" aria-label="Anchor link for: part-three-also-the-last-part"
  title="Anchor link for: part-three-also-the-last-part"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Other parts:</p>
<ul>
<li><a href="/blog/setting-up-webpack-babel-and-react-from-scratch">Part 1</a> - Webpack, Babel, React, Router, ESLint</li>
<li><a href="/blog/setting-up-webpack-babel-and-react-from-scratch-part-2">Part 2</a> - SASS, more ES6 goodness (Static props, decorators, deconstruction...)</li>
<li>Part 3 - Where to go from here</li>
</ul>
<h2 id="where-to-go-from-here">Where to go from here<a
  class="header-anchor"
  href="#where-to-go-from-here" aria-label="Anchor link for: where-to-go-from-here"
  title="Anchor link for: where-to-go-from-here"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I really wanted to continue this series, but unfortunately whole JavaScript / Node community
is moving so fast, that I found really hard to keep these tutorials up to date.
Webpack 2 and React Hot Loader 3 are on the horizon.
Some package versions break the other ones. Usual JavaScript business :)</p>
<p>So I'll leave you with a link or two below.</p>
<span id="continue-reading"></span><h3 id="create-react-app">Create React App<a
  class="header-anchor"
  href="#create-react-app" aria-label="Anchor link for: create-react-app"
  title="Anchor link for: create-react-app"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Facebook released <a href="https://github.com/facebookincubator/create-react-app">Create React App</a>.
That is a CLI tool for creating React apps with zero configuration.
It is still missing some features, like universal rendering, decorators, SASS (or LESS), hot reload...
But it is a really solid start, and backed up by the React team.</p>
<h3 id="my-webpack-2-boilerplate">My Webpack 2 boilerplate<a
  class="header-anchor"
  href="#my-webpack-2-boilerplate" aria-label="Anchor link for: my-webpack-2-boilerplate"
  title="Anchor link for: my-webpack-2-boilerplate"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Also, I just published <a href="https://github.com/Stanko/react-redux-webpack2-boilerplate">Webpack 2 boilerplate</a> on GitHub. It has a lot of nice features, check <a href="/blog/webpack-2-react-redux">post about it</a> on this blog.</p>
<h2 id="thanks">Thanks<a
  class="header-anchor"
  href="#thanks" aria-label="Anchor link for: thanks"
  title="Anchor link for: thanks"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Hope you found this series useful.
Don't worry, blog will still be updated, but this series is over for now.</p>
<p>And before using boilerplates, try making it yourself,
so you understand the flow and the tooling behind it.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>React and Redux, Webpack 2 boilerplate</title>
		<published>2016-11-24T00:00:00+00:00</published>
		<updated>2016-11-24T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/webpack-2-react-redux/" type="text/html"/>
		<id>https://muffinman.io/blog/webpack-2-react-redux/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Currently, I'm working on a relatively small pet project.
While setting it up, I decided to extract a webpack boilerplate from it.</p>
<p>As whole JS community is moving really fast, I found very hard to
set everything up using Webpack 1.x. One package would ask to update the other,
that would break the third one, then that one... and so on.</p>
<p>Luckily, I was able to set everything up using Webpack 2.
It is still in beta, but I had no problems so far.</p>
<p>You can find the <a href="https://github.com/Stanko/react-redux-webpack2-boilerplate">boilerplate on GitHub</a>.</p>
<span id="continue-reading"></span><h2 id="implemented-features">Implemented Features<a
  class="header-anchor"
  href="#implemented-features" aria-label="Anchor link for: implemented-features"
  title="Anchor link for: implemented-features"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<ul>
<li>React</li>
<li>React router</li>
<li>Redux</li>
<li>Redux Thunk</li>
<li>Immutable reducer data</li>
<li>Webpack 2 (development and production config)</li>
<li>Hot Module Replacement</li>
<li>Babel - static props, decorators</li>
<li>SASS with autoprefixing</li>
<li>Webpack dashboard</li>
<li>Linting</li>
<li>Included <code>es6-promise</code> and <code>isomorphic-fetch</code></li>
<li>File imports relative to the app root</li>
</ul>
<h3 id="planned-features">Planned features<a
  class="header-anchor"
  href="#planned-features" aria-label="Anchor link for: planned-features"
  title="Anchor link for: planned-features"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<ul>
<li>Redux Dev Tools</li>
<li>Generating icon font from SVGs</li>
<li>Preview production build</li>
<li>Git hooks - lint before commit (or push)</li>
</ul>
<h3 id="future-features">Future features<a
  class="header-anchor"
  href="#future-features" aria-label="Anchor link for: future-features"
  title="Anchor link for: future-features"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Universal may be added at some point.</p>
<ul>
<li>Universal rendering</li>
<li>Server async data</li>
</ul>
<h2 id="about">About<a
  class="header-anchor"
  href="#about" aria-label="Anchor link for: about"
  title="Anchor link for: about"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>This boilerplate is a complete, but minimal React application.
It includes reducers (redux), actions (sync and async), routing, SASS...
My goal was to be ready immediately after cloning the repo (and running <code>npm i</code>).</p>
<p>My plan is to reuse this as much as possible.</p>
<p>It will updated so make sure you follow the <a href="https://github.com/Stanko/react-redux-webpack2-boilerplate">documentation on GitHub</a>.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Another web development awesome list</title>
		<published>2016-11-07T00:00:00+00:00</published>
		<updated>2016-11-07T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/another-web-development-awesome-list/" type="text/html"/>
		<id>https://muffinman.io/blog/another-web-development-awesome-list/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><h3 id="update-november-2017">Update November 2017<a
  class="header-anchor"
  href="#update-november-2017" aria-label="Anchor link for: update-november-2017"
  title="Anchor link for: update-november-2017"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Unfortunately, I'm not maintaining this repo anymore.
Still, there are couple of really useful links on it.</p>
<hr />
<p>People are making <em>awesome</em> lists on the Git these days.</p>
<p>I'm spamming our company's slack dev channel, and someone suggested to put all of those links in one place.
So I created one awesome list as well.</p>
<p><a href="https://github.com/Stanko/awesome-web-development">Awesome web development</a></p>
<p>Feel free to contribute!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>My two cents on the new MacBook Pro</title>
		<published>2016-10-31T00:00:00+00:00</published>
		<updated>2016-10-31T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/my-two-cents-on-the-new-macbook-pro/" type="text/html"/>
		<id>https://muffinman.io/blog/my-two-cents-on-the-new-macbook-pro/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>After the recent Apple keynote, it seems that community is not happy with the new MacBook Pro.
Well, I'm not either.</p>
<p>As for iPhone/iPad, those are toys, I could use pretty much any other modern smartphone/tablet.
But MBP is my working horse, and I was always saying that
it doesn't matter how much it costs, I would always get it.</p>
<p>Things have changed...</p>
<span id="continue-reading"></span><h3 id="macbook-pro-is-now-a-consumer-machine">MacBook Pro is now a consumer machine<a
  class="header-anchor"
  href="#macbook-pro-is-now-a-consumer-machine" aria-label="Anchor link for: macbook-pro-is-now-a-consumer-machine"
  title="Anchor link for: macbook-pro-is-now-a-consumer-machine"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>New MacBook Pro really lacks the <strong>pro</strong> part.</p>
<p>I do understand that companies revolve around profit,
and it seems that we (developers/geeks) are not Apple's target audience anymore.
It is hard to say if we ever were. I'm not mad, just disappointed.
There is so many people out there with the same problem,
and I really hope that someone from Apple will try to tackle our issues.</p>
<p>MacBooks are getting more and more expensive every year, with kinda outdated hardware
and shiny stuff I don't need. Also removing the option to upgrade anything really sucks.
3k machine with max 16gigs of RAM?!
Touchbar is a gimmick - I don't give a shit about emoji touch screen on my keyboard.
I want physical keys that I don't have to look at when I type.</p>
<p><img src="/img/touchbar.png" alt="Emojis? Really?" /></p>
<p>Making things thinner and lighter is nice, but don't sacrifice power or keyboard for it.
Same goes for iPhone, if they just made it 2-3mm thicker,
and use all of that space for the bigger battery.
But it ain't gonna happen.</p>
<p>First time in a long time, I'm thinking about alternatives.
Not that I'm going to throw away my laptop and get a new one,
but I feel like a need a plan if they continue this way.</p>
<p>Razor laptops seem really sweet, but then I need to choose between Linux or Windows.
I consider myself being a UNIX guy, so Linux is clearly a way to go,
but as I'm working in a digital agency Sketch and Adobe are a must.
Maybe run them in a virtual machine? We'll see where it goes.</p>
<p>To be honest, I will continue to use the MacBook I own.
As I would really like to stay on the OSX, as it a polished, UNIX like system.
But, I hate that feeling Apple is pushing this down our throats -
&quot;we made this toy, but you'll buy it, as there is no better alternative&quot;.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Setting up Travis, Jekyll and GitHub pages</title>
		<published>2016-10-24T00:00:00+00:00</published>
		<updated>2016-10-24T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/travis-jekyll-and-github-pages/" type="text/html"/>
		<id>https://muffinman.io/blog/travis-jekyll-and-github-pages/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><h2 id="update-november-2017">Update, November 2017<a
  class="header-anchor"
  href="#update-november-2017" aria-label="Anchor link for: update-november-2017"
  title="Anchor link for: update-november-2017"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I don't use this setup anymore, it might be outdated, proceed with caution.</p>
<h2 id="original-post">Original post<a
  class="header-anchor"
  href="#original-post" aria-label="Anchor link for: original-post"
  title="Anchor link for: original-post"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>As I already mentioned, GitHub pages do not work with the Jekyll plugins.
It is a security measure. So I researched it a bit, and colleague of mine
proposed a simple solution - Travis CI.</p>
<p>There is a great repo with instructions how to set everything up -
<a href="https://github.com/mfenner/jekyll-travis">jekyll-travis</a>.
But few steps are kinda confusing, and it took me 10 failed builds to make
it work. So I'll try to help you with those.</p>
<span id="continue-reading"></span>
<p>I copied the steps from the original repo and updated steps where I got stuck.
Be sure to check the original readme as well.</p>
<h2 id="flow">Flow<a
  class="header-anchor"
  href="#flow" aria-label="Anchor link for: flow"
  title="Anchor link for: flow"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<ul>
<li>When you push to your GitHub repo, it triggers Travis</li>
<li>Travis starts up a virtual machine and installs all required software (mostly Ruby gems). We use a custom rake task to tell Travis how to build our Jekyll site and push the updated content back to Github</li>
<li>Travis clones a source branch (usually <code>master</code> or <code>source</code>, in my case <code>source</code>)</li>
<li>Travis runs <code>jekyll build</code> on the source branch</li>
<li>Travis does a <code>git push</code> to the branch holding static site files (usually <code>gh-pages</code> or <code>master</code>, in my case <code>master</code>)</li>
<li>Github Pages starts serving the updated site</li>
</ul>
<h2 id="steps-to-make-it-work">Steps to make it work<a
  class="header-anchor"
  href="#steps-to-make-it-work" aria-label="Anchor link for: steps-to-make-it-work"
  title="Anchor link for: steps-to-make-it-work"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<ul>
<li>
<p>Move your Jekyll source files to the <code>source</code> branch (name it as you like).
We'll use <code>master</code> or <code>gh-pages</code> branch to host generated HTML website.</p>
</li>
<li>
<p>Make sure you have enabled your source repo in the Travis CI admin dashboard so that the webhook is triggered</p>
</li>
<li>
<p>Create a GitHub Personal Access Token from you <a href="https://github.com/settings/tokens">profile page</a>.</p>
</li>
<li>
<p>If you haven't already, create a <code>Gemfile</code>, and add <code>rake</code> gem to it.</p>
<pre data-lang="ruby" style="background-color:#282c34;color:#dcdfe4;" class="language-ruby "><code class="language-ruby" data-lang="ruby"><span>source </span><span style="color:#98c379;">&quot;http://production.cf.rubygems.org/&quot;
</span><span>
</span><span style="color:#61afef;">gem </span><span style="color:#98c379;">&quot;rake&quot;</span><span style="color:#61afef;">, </span><span style="color:#98c379;">&quot;~&gt; 10.1.1&quot;
</span><span style="color:#61afef;">gem </span><span style="color:#98c379;">&quot;jekyll-paginate&quot;
</span><span style="color:#61afef;">gem </span><span style="color:#98c379;">&quot;jekyll-archives&quot;
</span></code></pre>
<p>We have seen <a href="http://blog.travis-ci.com/2013-05-20-network-timeouts-build-retries/">intermittent timeouts</a> fetching gems from Rubygems.org. <code>install: bundle install</code> lets Travis CI automatically retry, and we are using <code>source &quot;http://production.cf.rubygems.org/&quot;</code> in Gemfile to point to a different repository.</p>
</li>
<li>
<p>Install the travis gem (<code>gem install travis</code>) and create <code>.travis.yml</code>.
It will tell Travis what to install and how build our Jekyll site.
Add following data to it.</p>
<pre data-lang="yaml" style="background-color:#282c34;color:#dcdfe4;" class="language-yaml "><code class="language-yaml" data-lang="yaml"><span style="color:#e06c75;">language</span><span>: </span><span style="color:#98c379;">ruby
</span><span style="color:#e06c75;">rvm</span><span>:
</span><span>- </span><span style="color:#e5c07b;">2.3.1
</span><span style="color:#e06c75;">install</span><span>:
</span><span>- </span><span style="color:#98c379;">bundle install
</span><span style="color:#e06c75;">script</span><span>: </span><span style="color:#98c379;">bundle exec rake site:deploy --quiet
</span><span style="color:#e06c75;">env</span><span>:
</span><span>  </span><span style="color:#e06c75;">global</span><span>:
</span><span>    </span><span style="color:#e06c75;">secure</span><span>: </span><span style="color:#98c379;">YOUR_ENCRYPTED_INFO
</span></code></pre>
<p>Replace the <code>YOUR_ENCRYPTED_INFO</code> with the output of the following command:</p>
<pre data-lang="bash" style="background-color:#282c34;color:#dcdfe4;" class="language-bash "><code class="language-bash" data-lang="bash"><span style="color:#e06c75;">travis</span><span> encrypt </span><span style="color:#98c379;">&#39;GIT_NAME=&quot;Your Username&quot; GIT_EMAIL=&quot;your@email.com&quot; GH_TOKEN=GITHUB_PERSONAL_TOKEN_YOU_CREATED&#39;
</span></code></pre>
</li>
<li>
<p>Make sure you add <code>vendor</code> to your .gitignore as Travis CI is vendoring the Ruby gems there. The <code>vendor</code> folder should also be excluded in the Jekyll <code>_config.yml</code>.</p>
</li>
<li>
<p>Add the following to your Jekyll <code>_config.yml</code> file: <code>username</code>, <code>repo</code> and <code>branch</code>.</p>
<pre data-lang="yaml" style="background-color:#282c34;color:#dcdfe4;" class="language-yaml "><code class="language-yaml" data-lang="yaml"><span style="color:#5c6370;"># GitHub
</span><span style="color:#e06c75;">username</span><span>:             </span><span style="color:#98c379;">Stanko
</span><span style="color:#e06c75;">repo</span><span>:                 </span><span style="color:#98c379;">Stanko.github.io
</span><span style="color:#e06c75;">branch</span><span>:               </span><span style="color:#98c379;">source
</span><span>
</span><span style="color:#5c6370;"># Jekyll source / destination
</span><span style="color:#e06c75;">source</span><span>:               </span><span style="color:#e5c07b;">.
</span><span style="color:#e06c75;">destination</span><span>:          </span><span style="color:#98c379;">_site
</span></code></pre>
</li>
<li>
<p>Add the contents of <code>Rakefile</code> to your Jekyll Rakefile (or replace it).
The provided <a href="https://github.com/Stanko/Stanko.github.io/blob/source/Rakefile">Rakefile</a>
has some additional commands, but the important one here is <code>rake site:deploy</code>.</p>
</li>
</ul>
<p>And you are done! That should be it, of course you need to create a Travis CI account.
Travis is free for the open source projects. If you are using it for the commercial stuff,
play fair and check their payed tiers.</p>
<p>Build for my blog takes about a minute.
It depends of the software Travis installs on every build.</p>
<p>Now you can use custom plugins and asset pipeline with Jekyll. Cheers!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Blog redesign and new features</title>
		<published>2016-10-20T00:00:00+00:00</published>
		<updated>2016-10-20T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/new-design-and-features/" type="text/html"/>
		<id>https://muffinman.io/blog/new-design-and-features/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>As you probably noticed I redesigned my blog and added some new features.
This is a list of the new stuff.</p>
<ul>
<li>New design</li>
<li>Category pages</li>
<li>Comments</li>
<li>Search</li>
<li>Reading time</li>
<li>Share buttons</li>
</ul>
<span id="continue-reading"></span><h3 id="new-design">New design<a
  class="header-anchor"
  href="#new-design" aria-label="Anchor link for: new-design"
  title="Anchor link for: new-design"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>My friend Nikola, from <a href="http://mida.rs">MIDA</a> digital agency, helped me a lot with this one.
I gave him a basic idea what I wanted, and he came up with this simple but beautiful design.
It might go through some smaller changes in the future, but nothing major.
Hope you like it.</p>
<h3 id="category-pages">Category pages<a
  class="header-anchor"
  href="#category-pages" aria-label="Anchor link for: category-pages"
  title="Anchor link for: category-pages"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>These are accessible from the main menu, or by clicking on the category link at the end of the post.
Obviosly, they list all of the posts for the selected category.
This is the plugin I used: <a href="https://github.com/jekyll/jekyll-archives">jekyll-archives</a>.</p>
<h3 id="comments">Comments<a
  class="header-anchor"
  href="#comments" aria-label="Anchor link for: comments"
  title="Anchor link for: comments"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p><a href="https://staticman.net/">Staticman</a> brings user generated content to the static site generators.
You can add their bot to your repo, and then hitting specific endpoint will
generate a pull request (or push directly) with the data user entered.
My comments are going through pull requests, which enables me to moderate them.</p>
<h3 id="search">Search<a
  class="header-anchor"
  href="#search" aria-label="Anchor link for: search"
  title="Anchor link for: search"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Also accessible from the main menu. Search is done by JavaScript and it
goes through JSON object with post titles.
It uses fuzzy search algorithm, so it will find every title
that has all of the letters you entered.
Longer word matched will give higher priority to a result.
(Try typing <code>SASS</code> for example.)</p>
<h3 id="reading-time">Reading time<a
  class="header-anchor"
  href="#reading-time" aria-label="Anchor link for: reading-time"
  title="Anchor link for: reading-time"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>At the top of each post, you'll see estimated reading time.
It is a very simple plugin I found somewhere on the internet and modified a bit.</p>
<p>Here it is:</p>
<pre data-lang="ruby" style="background-color:#282c34;color:#dcdfe4;" class="language-ruby "><code class="language-ruby" data-lang="ruby"><span style="color:#5c6370;"># Outputs the reading time
</span><span>
</span><span style="color:#5c6370;"># Read this in &quot;about 4 minutes&quot;
</span><span style="color:#5c6370;"># Put into your _plugins dir in your Jekyll site
</span><span style="color:#5c6370;"># Usage: Read this in about &quot;page.content | reading_time&quot;
</span><span>
</span><span style="color:#c678dd;">module </span><span>ReadingTimeFilter
</span><span>  </span><span style="color:#c678dd;">def </span><span style="color:#61afef;">reading_time</span><span>( </span><span style="color:#e06c75;">input </span><span>)
</span><span>    words_per_minute </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">180
</span><span>
</span><span>    words </span><span style="color:#c678dd;">=</span><span> input.split.size;
</span><span>    minutes </span><span style="color:#c678dd;">= </span><span>( words </span><span style="color:#c678dd;">/</span><span> words_per_minute ).floor
</span><span>    minutes_label </span><span style="color:#c678dd;">=</span><span> minutes </span><span style="color:#c678dd;">=== </span><span style="color:#e5c07b;">1 </span><span style="color:#c678dd;">? </span><span style="color:#98c379;">&quot; minute&quot; </span><span style="color:#c678dd;">: </span><span style="color:#98c379;">&quot; minutes&quot;
</span><span>    minutes </span><span style="color:#c678dd;">&gt; </span><span style="color:#e5c07b;">0 </span><span style="color:#c678dd;">? </span><span style="color:#98c379;">&quot;about </span><span>#{minutes} #{minutes_label}</span><span style="color:#98c379;">&quot; </span><span style="color:#c678dd;">: </span><span style="color:#98c379;">&quot;less than 1 minute&quot;
</span><span>  </span><span style="color:#c678dd;">end
</span><span style="color:#c678dd;">end
</span><span>
</span><span style="color:#e5c07b;">Liquid</span><span>::</span><span style="color:#e5c07b;">Template</span><span>.register_filter(</span><span style="color:#e06c75;">ReadingTimeFilter</span><span>)
</span></code></pre>
<h3 id="share-buttons">Share buttons<a
  class="header-anchor"
  href="#share-buttons" aria-label="Anchor link for: share-buttons"
  title="Anchor link for: share-buttons"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>At the end of each post, there are three simple sharing buttons.
For Facebook, Twitter and Google+. No API or third party scripts are loaded.</p>
<h3 id="other-stuff-i-want-to-add">Other stuff I want to add<a
  class="header-anchor"
  href="#other-stuff-i-want-to-add" aria-label="Anchor link for: other-stuff-i-want-to-add"
  title="Anchor link for: other-stuff-i-want-to-add"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<ul>
<li>Real related posts - Jekyll by default as related posts actually shows latest posts.
I'm still looking for a nice way to implement this.
Probably I'll just match posts by tags.</li>
<li>Meta data (for sharing and SEO) - just need to add few meta tags to the head.</li>
<li>JSX syntax highlighting - not sure how to make this one, still at the drawing board.</li>
<li>Add icon for the <a href="/atom.xml">ATOM feed</a></li>
</ul>
<h3 id="custom-plugins-and-github-pages">Custom plugins and GitHub pages<a
  class="header-anchor"
  href="#custom-plugins-and-github-pages" aria-label="Anchor link for: custom-plugins-and-github-pages"
  title="Anchor link for: custom-plugins-and-github-pages"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>When I first pushed new version of the blog, most of the new features were missing.
I quickly learned that GitHub pages doesn't allow custom plugins.
It is a reasonable security feature.</p>
<p>I decided to get a hosting for the blog, and then use Jenkins to make a Jekyll builds.
But colleague told me that this is easily doable using <a href="https://travis-ci.org/">Travis</a>,
without any outside hosting.
There will be a <a href="/blog/travis-jekyll-and-github-pages/">new post</a> about it, with detailed description how to set it up.</p>
<p>Basically I use the <code>source</code> branch for the Jekyll website, and Travis is watching for the pushes on that branch.
When push is detected, Travis builds static HTML and pushes it to the <code>master</code> branch.
From there GitHub pages takes over and deploys it.</p>
<h3 id="for-the-end">For the end<a
  class="header-anchor"
  href="#for-the-end" aria-label="Anchor link for: for-the-end"
  title="Anchor link for: for-the-end"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Hope you guys like the changes, if you are interested in anything specific, feel free to leave a comment.
I'll try to answer it, or even write a completely new post about it. Thanks!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Plain JavaScript animated window scroll function</title>
		<published>2016-09-28T00:00:00+00:00</published>
		<updated>2016-09-28T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/animate-window-scroll-to/" type="text/html"/>
		<id>https://muffinman.io/blog/animate-window-scroll-to/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Before modern frameworks, I always used jQuery's <code>scrollTo</code> method.
At some point, not every project included jQuery, so I wrote simple function
to animate window scroll.</p>
<p>I have kept copying that function from project to project.
Finally I took some time, cleaned it up and published it on the npm
(this is the first npm package I published).</p>
<p>Check the <a href="https://muffinman.io/animated-scroll-to/">demo</a> and read documentation of <a href="https://github.com/Stanko/animated-scroll-to">Github</a>.</p>
<span id="continue-reading"></span>
<p>Find it on <a href="https://github.com/Stanko/animated-scroll-to">Github</a>
and <a href="https://www.npmjs.com/package/animated-scroll-to">npm</a></p>
<h3 id="installation">Installation<a
  class="header-anchor"
  href="#installation" aria-label="Anchor link for: installation"
  title="Anchor link for: installation"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>npm install animated-scroll-to
</span></code></pre>
<h3 id="usage">Usage<a
  class="header-anchor"
  href="#usage" aria-label="Anchor link for: usage"
  title="Anchor link for: usage"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#c678dd;">import </span><span style="color:#e06c75;">animateScrollTo </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;animated-scroll-to&#39;</span><span>;
</span><span>
</span><span style="color:#5c6370;">// desiredOffset - page offset to scroll
</span><span style="color:#5c6370;">// options - object with options
</span><span>
</span><span style="color:#5c6370;">// default options
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">options </span><span style="color:#c678dd;">= </span><span>{
</span><span>  </span><span style="color:#5c6370;">// duration of the scroll per 1000px, default 500
</span><span>  speed: </span><span style="color:#e5c07b;">500</span><span>,
</span><span>
</span><span>  </span><span style="color:#5c6370;">// minimum duration of the scroll
</span><span>  minDuration: </span><span style="color:#e5c07b;">250</span><span>,
</span><span>
</span><span>  </span><span style="color:#5c6370;">// maximum duration of the scroll
</span><span>  maxDuration: </span><span style="color:#e5c07b;">1500</span><span>,
</span><span>
</span><span>  </span><span style="color:#5c6370;">// DOM element to scroll, default window
</span><span>  </span><span style="color:#5c6370;">// Pass a reference to a DOM object
</span><span>  </span><span style="color:#5c6370;">// Example: document.querySelector(&#39;#element-to-scroll&#39;),
</span><span>  element: window,
</span><span>
</span><span>  </span><span style="color:#5c6370;">// should animated scroll be canceled on user scroll/keypress
</span><span>  </span><span style="color:#5c6370;">// if set to &quot;false&quot; user input will be disabled until animated scroll is complete
</span><span>  cancelOnUserAction: </span><span style="color:#e5c07b;">true
</span><span>};
</span><span>
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">desiredOffset </span><span style="color:#c678dd;">= </span><span style="color:#e5c07b;">1000</span><span>;
</span><span>
</span><span style="color:#61afef;">animateScrollTo</span><span>(</span><span style="color:#e06c75;">desiredOffset</span><span>, </span><span style="color:#e06c75;">options</span><span>);
</span></code></pre>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Implementing PhotoShop font sizes and tracking in CSS, points to pixels conversion</title>
		<published>2016-09-08T00:00:00+00:00</published>
		<updated>2016-09-08T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/font-size-and-tracking-points-to-pixels/" type="text/html"/>
		<id>https://muffinman.io/blog/font-size-and-tracking-points-to-pixels/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>We've all been there - trying to get right font sizes from PhotoShop to CSS.
Designers usually work with points, which are used in the print, but not common on the web.
They also use term <em>tracking</em> a lot, which is actually only a letter spacing with different units.</p>
<p>You can recalculate everything by hand and try to keep track of it.
But we can use the goodies of SCSS to make that process a bit easier.</p>
<p>Point to pixel ratio is <code>1pt = 1.333333px</code>. We'll create SASS function to do conversion for us.</p>
<p>And PhotoShop tracking works relative to the font size.
One point of tracking is 1/1000 of the font size.
For this one we'll create a mixin.</p>
<span id="continue-reading"></span><pre data-lang="css" style="background-color:#282c34;color:#dcdfe4;" class="language-css "><code class="language-css" data-lang="css"><span>// </span><span style="color:#c678dd;">Converts pt to px
</span><span>@</span><span style="color:#c678dd;">function </span><span style="color:#e06c75;">pt-to-px</span><span style="color:#c678dd;">($</span><span style="color:#e06c75;">size-in-points</span><span>){
</span><span>    @return #{ round($size-in-points * 1.333333) }</span><span style="color:#c678dd;">px;
</span><span style="color:#c678dd;">}
</span><span style="color:#c678dd;">
</span><span>// </span><span style="color:#c678dd;">Adds letter spacing to match photoshop tracking
</span><span>@</span><span style="color:#c678dd;">mixin tracking($</span><span style="color:#e06c75;">ps-tracking</span><span>){
</span><span>    letter-spacing: #{ $ps-tracking / </span><span style="color:#e5c07b;">1000 </span><span>}</span><span style="color:#e06c75;">em</span><span style="color:#c678dd;">;
</span><span style="color:#c678dd;">}
</span><span style="color:#c678dd;">
</span><span>// </span><span style="color:#c678dd;">Usage
</span><span style="color:#e5c07b;">.Component </span><span>{
</span><span>    @include tracking(-5);
</span><span>    font-size: pt-to-px(</span><span style="color:#e5c07b;">20</span><span>);
</span><span>    line-height: pt-to-px(</span><span style="color:#e5c07b;">30</span><span>);
</span><span>}
</span></code></pre>
<p>This will generate following CSS:</p>
<pre data-lang="css" style="background-color:#282c34;color:#dcdfe4;" class="language-css "><code class="language-css" data-lang="css"><span style="color:#e5c07b;">.Component </span><span>{
</span><span>    letter-spacing: </span><span style="color:#e5c07b;">-.005</span><span style="color:#c678dd;">em</span><span>;
</span><span>    font-size: </span><span style="color:#e5c07b;">15</span><span style="color:#c678dd;">px</span><span>;
</span><span>    line-height: </span><span style="color:#e5c07b;">23</span><span style="color:#c678dd;">px</span><span>;
</span><span>}
</span></code></pre>
<p>Note that function and mixin can do pretty much the same job.
But it makes more sense to use mixins when including complete styles,
and functions to return values.
So conversion makes sense to be a function,
as we can use it for font size, line height or anything else.
Conversion of tracking to letter spacing is including a specific style,
so keep it in a mixin.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Always use &amp;lt;button&amp;gt; for clickable elements</title>
		<published>2016-09-02T00:00:00+00:00</published>
		<updated>2016-09-02T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/always-use-button-for-clickable-elements/" type="text/html"/>
		<id>https://muffinman.io/blog/always-use-button-for-clickable-elements/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Always try to use <code>&lt;button&gt;</code> when  <strong>element is clickable, but it is not a link</strong>.
Avoid <code>&lt;a&gt;</code>, <code>&lt;span&gt;</code>, <code>&lt;div&gt;</code> and other elements.</p>
<p>Note that <code>display: flex</code> works differently on buttons in different browsers,
but we have easy fix for that.</p>
<span id="continue-reading"></span><h2 id="why">Why?<a
  class="header-anchor"
  href="#why" aria-label="Anchor link for: why"
  title="Anchor link for: why"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>You will get multiple benefits - user can &quot;tab&quot; to it,
and to activate it by pressing enter (that will trigger <code>click</code> event).
There is no need to <code>preventDefault</code> like when you are using <code>&lt;a&gt;</code>.
User can't open it in the new tab/window, using right or middle click.
Screen readers recognize it out of the box.</p>
<p>Long story short - it is way more accessible. And when you think about it,
it is actually really logical thing to do. Buttons are made to be clickable :)</p>
<h2 id="gotchas">Gotchas<a
  class="header-anchor"
  href="#gotchas" aria-label="Anchor link for: gotchas"
  title="Anchor link for: gotchas"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<h3 id="buttons-in-forms">Buttons in forms<a
  class="header-anchor"
  href="#buttons-in-forms" aria-label="Anchor link for: buttons-in-forms"
  title="Anchor link for: buttons-in-forms"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>If you need your clickable button to be in a form, remember to put <code>type='button'</code> to it,
as default button type is <code>submit</code>, and it will submit your form on click.
Again, you could use <code>preventDefault</code>, but I think this is a way cleaner approach.</p>
<h3 id="button-flex-maddnes">Button flex maddnes<a
  class="header-anchor"
  href="#button-flex-maddnes" aria-label="Anchor link for: button-flex-maddnes"
  title="Anchor link for: button-flex-maddnes"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>For some reason <code>display: flex</code> on buttons is behaving really different across browsers.
It is crazy! If you don't believe me, just check the examples below.</p>
<p>The easiest fix is to add another div in (to wrap button content), and apply <code>display: flex</code> to it.
From there on, you should be fine. I made a CodePen with an example.
On the left side, you can see a button with flex applied directly to it,
and on the right, a button with inner div and flex applied to it.</p>
<p>I overcame my laziness and made a bunch of cross browser screenshots.
Original CodePen is included at the end.</p>
<p>At the moment, it seems only Chrome gets it right.</p>
<hr />
<h4 id="chrome">Chrome<a
  class="header-anchor"
  href="#chrome" aria-label="Anchor link for: chrome"
  title="Anchor link for: chrome"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h4>
<img src="/img/button-flex/chrome.png" alt="Display flex on buttons, Chrome" />
<h4 id="firefox">Firefox<a
  class="header-anchor"
  href="#firefox" aria-label="Anchor link for: firefox"
  title="Anchor link for: firefox"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h4>
<img src="/img/button-flex/firefox.png" alt="Display flex on buttons, Firefox" />
<h4 id="safari-8">Safari 8<a
  class="header-anchor"
  href="#safari-8" aria-label="Anchor link for: safari-8"
  title="Anchor link for: safari-8"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h4>
<img src="/img/button-flex/safari8.png" alt="Display flex on buttons, Safari 8" />
<h4 id="safari-9">Safari 9<a
  class="header-anchor"
  href="#safari-9" aria-label="Anchor link for: safari-9"
  title="Anchor link for: safari-9"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h4>
<img src="/img/button-flex/safari9.png" alt="Display flex on buttons, Safari 9" />
<h4 id="ie10">IE10<a
  class="header-anchor"
  href="#ie10" aria-label="Anchor link for: ie10"
  title="Anchor link for: ie10"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h4>
<img src="/img/button-flex/ie10.png" alt="Display flex on buttons, IE10" />
<h4 id="ie11">IE11<a
  class="header-anchor"
  href="#ie11" aria-label="Anchor link for: ie11"
  title="Anchor link for: ie11"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h4>
<img src="/img/button-flex/ie11.png" alt="Display flex on buttons, IE11" />
<h4 id="codepen">CodePen<a
  class="header-anchor"
  href="#codepen" aria-label="Anchor link for: codepen"
  title="Anchor link for: codepen"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h4>
<iframe
  height="300"
  
  scrolling="no"
  title="Fix for button display:flex"
  src="https://codepen.io/stanko/embed/ALjvYj?default-tab=result"
  frameborder="no"
  loading="lazy"
  allowtransparency="true"
  allowfullscreen="true"
>
  See the Pen <a href="https://codepen.io/stanko/pen/ALjvYj">
  Fix for button display:flex</a> by Stanko (<a href="https://codepen.io/stanko">@stanko</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>SASS random() and circle animation</title>
		<published>2016-08-30T00:00:00+00:00</published>
		<updated>2016-08-30T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/sass-random-and-circle-animation/" type="text/html"/>
		<id>https://muffinman.io/blog/sass-random-and-circle-animation/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>I decided to move my CSS playground to the CodePen, and this is the first one I made.</p>
<p>Idea came to me while I was riding on a bus, and I might use it on this blog,
as a part of it's redesign.</p>
<p>This is CSS only animation (I used JS to create 50 elements though).
And you can see the usage of SASS <code>random()</code> function.</p>
<span id="continue-reading"></span><iframe
  height="400"
  
  scrolling="no"
  title="Circle Logo Animation"
  src="https://codepen.io/stanko/embed/VKkaJB?default-tab=result"
  frameborder="no"
  loading="lazy"
  allowtransparency="true"
  allowfullscreen="true"
>
  See the Pen <a href="https://codepen.io/stanko/pen/VKkaJB">
  Circle Logo Animation</a> by Stanko (<a href="https://codepen.io/stanko">@stanko</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
<p><code>random()</code> will return random integer between 1 and <code>n</code>, where <code>n</code> is the number you pass to it.
Default param is 100.</p>
<p>Note that random does not return 0.</p>
<p>To get different random ranges just add or subtract your base.</p>
<p>This will return number between 11 and 20.</p>
<pre data-lang="scss" style="background-color:#282c34;color:#dcdfe4;" class="language-scss "><code class="language-scss" data-lang="scss"><span style="color:#e06c75;">$random-number</span><span>: </span><span style="color:#61afef;">random</span><span>(</span><span style="color:#e5c07b;">10</span><span>) </span><span style="color:#c678dd;">+ </span><span style="color:#e5c07b;">10</span><span>;
</span></code></pre>
<p>Same thing with negative numbers, this one covers the range between -10 and 10.</p>
<pre data-lang="scss" style="background-color:#282c34;color:#dcdfe4;" class="language-scss "><code class="language-scss" data-lang="scss"><span style="color:#e06c75;">$random-number</span><span>: </span><span style="color:#61afef;">random</span><span>(</span><span style="color:#e5c07b;">21</span><span>) </span><span style="color:#c678dd;">- </span><span style="color:#e5c07b;">11</span><span>;
</span></code></pre>
<p>Something to have in mind, new random numbers will be generated on every SASS compilation.
But once generated, CSS will stay static, until the next compilation.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Setting up Webpack, Babel and React from scratch - Part 2</title>
		<published>2016-08-29T00:00:00+00:00</published>
		<updated>2016-08-29T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/setting-up-webpack-babel-and-react-from-scratch-part-2/" type="text/html"/>
		<id>https://muffinman.io/blog/setting-up-webpack-babel-and-react-from-scratch-part-2/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><h2 id="part-two">Part two<a
  class="header-anchor"
  href="#part-two" aria-label="Anchor link for: part-two"
  title="Anchor link for: part-two"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Update: Part two is pretty much done. Part three will cover redux and production builds.</p>
<p>Other parts:</p>
<ul>
<li><a href="/blog/setting-up-webpack-babel-and-react-from-scratch">Part 1</a> - Webpack, Babel, React, Router, ESLint</li>
<li>Part 2 - SASS, More ES6 goodness (Static props, decorators, deconstruction...)</li>
<li><a href="/blog/setting-up-webpack-babel-and-react-from-scratch-part-3">Part 3</a> - Where to go from here</li>
</ul>
<h2 id="adding-sass">Adding SASS<a
  class="header-anchor"
  href="#adding-sass" aria-label="Anchor link for: adding-sass"
  title="Anchor link for: adding-sass"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>We will use SASS loader for webpack, so let's install it together with node-sass compiler,
css and style loaders</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>npm install --save-dev style-loader css-loader sass-loader node-sass
</span></code></pre>
<p>Create <code>scss</code> folder in the <code>app</code> folder, and main <code>app.scss</code> file in it.
This file will include all of the other scss files.</p>
<p>Now we need to add a loader to webpack config file.</p>
<span id="continue-reading"></span><pre style="background-color:#282c34;color:#dcdfe4;"><code><span>...
</span><span>{
</span><span>  test: /\.scss$/,
</span><span>  loader: &#39;style!css!sass&#39;
</span><span>}
</span><span>...
</span></code></pre>
<p>This will handle importing SCSS files in our JavaScript code.
So we need to import <code>app.scss</code> manually in the JavaScript code.
You'll need to add only one line to your <code>app.js</code>.</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>import &#39;../scss/app.scss&#39;;
</span></code></pre>
<p>This includes your styles by calling loaders we defined in the webpack config.</p>
<p>Restart your webpack, and voala, now we have styles and hot reloading for them.
Try changing your styles to check it.</p>
<h3 id="source-maps">Source maps<a
  class="header-anchor"
  href="#source-maps" aria-label="Anchor link for: source-maps"
  title="Anchor link for: source-maps"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>To enable source maps, we'll pass the <code>sourceMap</code> option to the sass and the css loaders.
Enable devtool, and update the loader</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>...
</span><span>  devtool: &#39;inline-source-map&#39;, // or &#39;source-map&#39;
</span><span>
</span><span>  module: {
</span><span>    loaders: [
</span><span>      ...
</span><span>      {
</span><span>        test: /\.scss$/,
</span><span>        loader: &#39;style!css?sourceMap!sass?sourceMap&#39;,
</span><span>      }
</span><span>    ]
</span><span>  }
</span><span>...
</span></code></pre>
<p>If you want to read more, here's link to the
<a href="https://github.com/jtangelder/sass-loader">official documentation</a></p>
<h3 id="autoprefixer">Autoprefixer<a
  class="header-anchor"
  href="#autoprefixer" aria-label="Anchor link for: autoprefixer"
  title="Anchor link for: autoprefixer"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Always use autoprefixer - I can't stress this enough.</p>
<p>We'll need postcss loader, precss and autoprefixer</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>npm install --save-dev postcss-loader precss autoprefixer
</span></code></pre>
<p>At the top of our webpack config, require precss and autoprefixer</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>const precss = require(&#39;precss&#39;);
</span><span>const autoprefixer = require(&#39;autoprefixer&#39;);
</span></code></pre>
<p>Update our sass loader config and and postcss config</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>...
</span><span>  module: {
</span><span>    loaders: [
</span><span>      ...
</span><span>      {
</span><span>        test: /\.scss$/,
</span><span>        loader: &#39;style!css?sourceMap!postcss!sass?sourceMap&#39;,
</span><span>      }
</span><span>    ]
</span><span>  },
</span><span>
</span><span>  postcss() {
</span><span>    return [autoprefixer, precss];
</span><span>  },
</span><span>...
</span></code></pre>
<p>Restart webpack, and you should have autoprefixing in place.
Try adding <code>display: flex</code> to one of the elements to check if autoprefixer added
<code>-ms-display: flex</code> and <code>-webkit-display: flex</code>.</p>
<p>Again here's link to the <a href="https://github.com/postcss/postcss-loader">official documentation</a></p>
<h2 id="method-shorthand">Method shorthand<a
  class="header-anchor"
  href="#method-shorthand" aria-label="Anchor link for: method-shorthand"
  title="Anchor link for: method-shorthand"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Note that</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span>{
</span><span>  </span><span style="color:#c678dd;">...
</span><span>  </span><span style="color:#61afef;">postcss</span><span>() {
</span><span>    </span><span style="color:#c678dd;">return </span><span>[</span><span style="color:#e06c75;">autoprefixer</span><span>, </span><span style="color:#e06c75;">precss</span><span>];
</span><span>  }
</span><span>}
</span></code></pre>
<p>is the same as</p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span>{
</span><span>  </span><span style="color:#c678dd;">...
</span><span>  postcss: </span><span style="color:#c678dd;">function </span><span>() {
</span><span>    </span><span style="color:#c678dd;">return </span><span>[</span><span style="color:#e06c75;">autoprefixer</span><span>, </span><span style="color:#e06c75;">precss</span><span>];
</span><span>  }
</span><span>}
</span></code></pre>
<p>but only using <a href="http://eslint.org/docs/rules/object-shorthand">method shorthand</a>.
ES6 rules!</p>
<h2 id="more-es6-stuff">More ES6 stuff<a
  class="header-anchor"
  href="#more-es6-stuff" aria-label="Anchor link for: more-es6-stuff"
  title="Anchor link for: more-es6-stuff"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>To be able to use deconstruction (<code>...object</code>), static class properties and decorators (<code>@connect</code>) we need to add
a couple of Babel plugins.</p>
<p>Install them using following command</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>npm i --save-dev babel-plugin-syntax-decorators babel-plugin-transform-class-properties babel-plugin-transform-decorators-legacy babel-preset-stage-0
</span></code></pre>
<p>Few links to read more about this plugins:</p>
<ul>
<li><a href="https://babeljs.io/docs/plugins/syntax-decorators/">Synthax only for decorators</a></li>
<li><a href="https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy">Decorators plugin</a>
- We are using a 3rd party plugin as &quot;Decorators are disabled in Babel v6, pending a proposal update&quot;.
Read more on the first link.</li>
<li><a href="https://babeljs.io/docs/plugins/transform-class-properties/">Static properties</a></li>
<li><a href="https://babeljs.io/docs/plugins/preset-stage-0/">Stage 0 (plugin group)</a></li>
</ul>
<p>Now we need to add it to our Babel configuration. Open your <code>.babelrc</code> file and add them.</p>
<p>Add these to the <code>&quot;plugins&quot;</code> array</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>&quot;syntax-decorators&quot;
</span><span>&quot;transform-decorators-legacy&quot;
</span><span>&quot;transform-class-properties&quot;
</span></code></pre>
<p>And <code>&quot;stage-0&quot;</code> to the <code>&quot;presets&quot;</code> array</p>
<p>Your <code>.babelrc</code> should be looking something like this</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>{
</span><span>  &quot;plugins&quot;: [
</span><span>    &quot;syntax-decorators&quot;,
</span><span>    &quot;transform-decorators-legacy&quot;,
</span><span>    &quot;transform-class-properties&quot;
</span><span>  ],
</span><span>  &quot;presets&quot;: [
</span><span>    &quot;es2015&quot;,
</span><span>    &quot;react&quot;,
</span><span>    &quot;stage-0&quot;
</span><span>  ]
</span><span>}
</span></code></pre>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Setting up Webpack, Babel and React from scratch</title>
		<published>2016-08-23T00:00:00+00:00</published>
		<updated>2016-08-23T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/setting-up-webpack-babel-and-react-from-scratch/" type="text/html"/>
		<id>https://muffinman.io/blog/setting-up-webpack-babel-and-react-from-scratch/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><h2 id="update-october-2017">Update, October 2017<a
  class="header-anchor"
  href="#update-october-2017" aria-label="Anchor link for: update-october-2017"
  title="Anchor link for: update-october-2017"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I just released updated tutorial <a href="/blog/webpack-babel-react-revisited/">right here</a>.
So feel free to skip this one, and read a new one.
It uses updated tools, and hopefully it will grow into a new series of webpack/react posts.</p>
<h2 id="update-march-2017">Update, March 2017<a
  class="header-anchor"
  href="#update-march-2017" aria-label="Anchor link for: update-march-2017"
  title="Anchor link for: update-march-2017"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Webpack 2 is out, so this post is slowly becoming outdated.
For webpack 2 - react boilerplate please check <a href="/blog/webpack-2-react-redux/">this post</a>.</p>
<h2 id="this-is-a-living-guide">This is a living guide<a
  class="header-anchor"
  href="#this-is-a-living-guide" aria-label="Anchor link for: this-is-a-living-guide"
  title="Anchor link for: this-is-a-living-guide"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>This is the first part of the guide that will be changed over time.
For now it covers Webpack, Babel (for ES6) and React with React Router.</p>
<p>Next parts will contain more stuff - static properties, decorators, SASS,
development and production configs, immutables... Also redux part should be updated really soon.</p>
<p>So stay tuned!</p>
<p>Other parts:</p>
<ul>
<li>Part 1 - Webpack, Babel, React, Router, ESLint</li>
<li><a href="/blog/setting-up-webpack-babel-and-react-from-scratch-part-2">Part 2</a> - SASS, more ES6 goodness (Static props, decorators, deconstruction...)</li>
<li><a href="/blog/setting-up-webpack-babel-and-react-from-scratch-part-3">Part 3</a> - Where to go from here</li>
</ul>
<h3 id="before-we-start">Before we start<a
  class="header-anchor"
  href="#before-we-start" aria-label="Anchor link for: before-we-start"
  title="Anchor link for: before-we-start"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>I'll assume that you have a basic knowledge of the unix terminal,
and that you have read what Webpack, Babel and React are.</p>
<h2 id="webpack">Webpack<a
  class="header-anchor"
  href="#webpack" aria-label="Anchor link for: webpack"
  title="Anchor link for: webpack"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>For a start, install <code>node</code> and <code>npm</code> from <a href="https://nodejs.org/en/">https://nodejs.org/en/</a>.</p>
<span id="continue-reading"></span>
<p>Make a git repo (this is optional, but recommended),
or create an empty folder. Navigate to it in the terminal.</p>
<p>Initialize npm (<code>package.json</code>) by running</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>npm init
</span></code></pre>
<p>Now we can start adding npm packages.
Install babel core and it's loader for webpack.</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>npm install --save-dev webpack webpack-dev-server
</span></code></pre>
<p>Tip: you can use <code>npm i</code> instead of <code>npm install</code>.</p>
<p>Create <code>app/js/app.js</code> with a simple <code>console.log('hello world');</code>.
This will be the entry point for webpack.</p>
<p>Now we need to create a webpack config file <code>webpack.config.js</code>.</p>
<p>Tip: you can create files by using touch command - <code>touch FILENAME</code></p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span>module.exports </span><span style="color:#c678dd;">= </span><span>{
</span><span>  context: __dirname </span><span style="color:#c678dd;">+ </span><span style="color:#98c379;">&quot;/app&quot;</span><span>,
</span><span>
</span><span>  entry: </span><span style="color:#98c379;">&quot;./js/app.js&quot;</span><span>,
</span><span>
</span><span>  output: {
</span><span>    filename: </span><span style="color:#98c379;">&quot;app.js&quot;</span><span>,
</span><span>    path: __dirname </span><span style="color:#c678dd;">+ </span><span style="color:#98c379;">&quot;/dist&quot;</span><span>,
</span><span>  }
</span><span>};
</span></code></pre>
<p>It is important to understand what is going on so far.
This tells webpack that our main application file (<code>app.js</code>) is the entry point,
and bundled application should be outputted to the <code>dist</code> folder.</p>
<p><code>__dirname</code> is the name of the directory that the currently executing script resides in.</p>
<p>Now we can run</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>node ./node_modules/webpack/bin/webpack.js
</span></code></pre>
<p>It will generate <code>dist/app.js</code>.
(Tip: to be able to run <code>webpack</code> globally, you'll need to install it using <code>npm i --global webpack</code>. Then you can run it by using only <code>webpack</code>.)</p>
<h2 id="babel">Babel<a
  class="header-anchor"
  href="#babel" aria-label="Anchor link for: babel"
  title="Anchor link for: babel"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Noew can add Babel transpiler goodness.</p>
<p>Install babel core and it's loader for webpack and presets for ES6 (aka ES2015) and React</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>npm i --save-dev babel-loader babel-core babel-preset-es2015 babel-preset-react
</span></code></pre>
<p>Create <code>.babelrc</code> in the project root folder and add presets</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>{
</span><span>  &quot;presets&quot;: [
</span><span>    &quot;es2015&quot;,
</span><span>    &quot;react&quot;
</span><span>  ]
</span><span>}
</span></code></pre>
<p>Add js/jsx loader to your webpack config, as well as extensions we want to resolve (More about this later).</p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#c678dd;">...
</span><span>  resolve: {
</span><span>    extensions: [</span><span style="color:#98c379;">&#39;&#39;</span><span>, </span><span style="color:#98c379;">&#39;.js&#39;</span><span>, </span><span style="color:#98c379;">&#39;.jsx&#39;</span><span>, </span><span style="color:#98c379;">&#39;.json&#39;</span><span>]
</span><span>  },
</span><span>  module: {
</span><span>    loaders: [
</span><span>      {
</span><span>        test: </span><span style="color:#98c379;">/</span><span style="color:#56b6c2;">\.</span><span style="color:#98c379;">jsx</span><span style="color:#c678dd;">?$</span><span style="color:#98c379;">/</span><span>,
</span><span>        exclude: </span><span style="color:#98c379;">/node_modules/</span><span>,
</span><span>        loaders: [</span><span style="color:#98c379;">&quot;babel-loader&quot;</span><span>]
</span><span>      }
</span><span>    ]
</span><span>  }
</span><span style="color:#c678dd;">...
</span></code></pre>
<p>Webpack accepts the array of the loaders. Loader has a test for the filenames,
in our case it matches all of the <code>.js</code> and <code>.jsx</code> files.
Then it applies babel loader to it. Basically this will transpile our
fancy ES6 to ES5 which can be understood by browsers
(some browsers can execute ES6 already, but most of them still can't).</p>
<p>If you re-run our webpack command, nothing will change, yet.</p>
<h2 id="react">React<a
  class="header-anchor"
  href="#react" aria-label="Anchor link for: react"
  title="Anchor link for: react"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Install react and react DOM</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>npm i react react-dom --save
</span></code></pre>
<p>Your <code>app.js</code> should look something like this. For this example we are just rendering main menu.
Later we'll replace that with react router component.</p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#c678dd;">import </span><span style="color:#e06c75;">React </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;react&#39;</span><span>;
</span><span style="color:#c678dd;">import </span><span style="color:#e06c75;">ReactDOM </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;react-dom&#39;</span><span>;
</span><span style="color:#c678dd;">import </span><span style="color:#e06c75;">Menu </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;./components/Global/Menu.jsx&#39;</span><span>;
</span><span>
</span><span style="color:#e06c75;">ReactDOM</span><span>.</span><span style="color:#61afef;">render</span><span>(
</span><span>  &lt;</span><span style="color:#e5c07b;">Menu </span><span>/&gt;,
</span><span>  document.</span><span style="color:#61afef;">getElementById</span><span>(</span><span style="color:#98c379;">&#39;app&#39;</span><span>)
</span><span>);
</span></code></pre>
<p>Now we can start adding react components. Create <code>app/js/components/Global/Menu.jsx</code></p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#c678dd;">import </span><span style="color:#e06c75;">React</span><span>, { </span><span style="color:#e06c75;">Component </span><span>} </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;react&#39;</span><span>;
</span><span>
</span><span style="color:#c678dd;">export default class </span><span style="color:#e5c07b;">Menu </span><span style="color:#c678dd;">extends </span><span style="color:#e5c07b;">Component {
</span><span style="color:#e5c07b;">  </span><span style="color:#61afef;">render</span><span style="color:#e5c07b;">() {
</span><span style="color:#e5c07b;">    </span><span style="color:#c678dd;">return </span><span style="color:#e5c07b;">(
</span><span style="color:#e5c07b;">      &lt;</span><span style="color:#e06c75;">div </span><span style="color:#e5c07b;">className</span><span style="color:#c678dd;">=</span><span style="color:#98c379;">&#39;Menu&#39;</span><span style="color:#e5c07b;">&gt;
</span><span style="color:#e5c07b;">        Main Menu
</span><span style="color:#e5c07b;">      &lt;/</span><span style="color:#e06c75;">div</span><span style="color:#e5c07b;">&gt;
</span><span style="color:#e5c07b;">    );
</span><span style="color:#e5c07b;">  }
</span><span style="color:#e5c07b;">}
</span></code></pre>
<h2 id="index-page">Index Page<a
  class="header-anchor"
  href="#index-page" aria-label="Anchor link for: index-page"
  title="Anchor link for: index-page"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Create index page in the <code>app</code> folder.</p>
<pre data-lang="html" style="background-color:#282c34;color:#dcdfe4;" class="language-html "><code class="language-html" data-lang="html"><span>&lt;!</span><span style="color:#c678dd;">DOCTYPE </span><span style="color:#e5c07b;">html</span><span>&gt;
</span><span>&lt;</span><span style="color:#e06c75;">html</span><span>&gt;
</span><span>&lt;</span><span style="color:#e06c75;">head</span><span>&gt;
</span><span>  &lt;</span><span style="color:#e06c75;">title</span><span>&gt;Your app name&lt;/</span><span style="color:#e06c75;">title</span><span>&gt;
</span><span>  &lt;</span><span style="color:#e06c75;">meta </span><span style="color:#e5c07b;">charset</span><span>=</span><span style="color:#98c379;">&quot;utf-8&quot;</span><span>&gt;
</span><span>&lt;/</span><span style="color:#e06c75;">head</span><span>&gt;
</span><span>&lt;</span><span style="color:#e06c75;">body</span><span>&gt;
</span><span>  &lt;</span><span style="color:#e06c75;">div </span><span style="color:#e5c07b;">id</span><span>=</span><span style="color:#98c379;">&quot;app&quot;</span><span>&gt;&lt;/</span><span style="color:#e06c75;">div</span><span>&gt;
</span><span>  &lt;</span><span style="color:#e06c75;">script </span><span style="color:#e5c07b;">src</span><span>=</span><span style="color:#98c379;">&quot;app.js&quot;</span><span>&gt;&lt;/</span><span style="color:#e06c75;">script</span><span>&gt;
</span><span>&lt;/</span><span style="color:#e06c75;">body</span><span>&gt;
</span><span>&lt;/</span><span style="color:#e06c75;">html</span><span>&gt;
</span></code></pre>
<p>We'll need file loader for it</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>npm install file-loader --save-dev
</span></code></pre>
<p>Update webpack config to add entry</p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#c678dd;">...
</span><span>  entry: {
</span><span>    javascript: </span><span style="color:#98c379;">&quot;./js/app.js&quot;</span><span>,
</span><span>    html: </span><span style="color:#98c379;">&quot;./index.html&quot;</span><span>,
</span><span>  }
</span><span style="color:#c678dd;">...
</span></code></pre>
<p>and add loader</p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#c678dd;">...
</span><span>  {
</span><span>    test: </span><span style="color:#98c379;">/</span><span style="color:#56b6c2;">\.</span><span style="color:#98c379;">html</span><span style="color:#c678dd;">$</span><span style="color:#98c379;">/</span><span>,
</span><span>    loader: </span><span style="color:#98c379;">&quot;file?name=[name].[ext]&quot;</span><span>,
</span><span>  }
</span><span style="color:#c678dd;">...
</span></code></pre>
<p>Now when we run webpack again, we'll get <code>index.html</code> and <code>app.js</code> in dist folder.</p>
<h2 id="dev-server-and-hot-reload">Dev server and hot reload<a
  class="header-anchor"
  href="#dev-server-and-hot-reload" aria-label="Anchor link for: dev-server-and-hot-reload"
  title="Anchor link for: dev-server-and-hot-reload"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Install webpack development server, and run it</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>npm install --save-dev webpack webpack-dev-server
</span><span>node ./node_modules/webpack-dev-server/bin/webpack-dev-server.js
</span></code></pre>
<p>(Tip: Same as with webpack, you can install it globally <code>npm i --global webpack-dev-server</code> and run it using <code>webpack-dev-server</code>.)</p>
<p>Now open <code>http://localhost:8080/</code> in your browser of choice. You should see your app.
Development server will watch for your changes and rerun the bundler.
Still we need to manually refresh the browser.</p>
<p>So let's add hot reloading.</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>npm install react-hot-loader --save-dev
</span></code></pre>
<p>Update webpack js/jsx loader to use hot reloading</p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#c678dd;">...
</span><span>  {
</span><span>    test: </span><span style="color:#98c379;">/</span><span style="color:#56b6c2;">\.</span><span style="color:#98c379;">jsx</span><span style="color:#c678dd;">?$</span><span style="color:#98c379;">/</span><span>,
</span><span>    exclude: </span><span style="color:#98c379;">/node_modules/</span><span>,
</span><span>    loaders: [</span><span style="color:#98c379;">&quot;react-hot&quot;</span><span>, </span><span style="color:#98c379;">&quot;babel-loader&quot;</span><span>],
</span><span>  }
</span><span style="color:#c678dd;">...
</span></code></pre>
<p>Now we need to add two more options when running dev server <code>--hot</code> and <code>--inline</code>.
We will also add <code>--history-api-fallback</code> which will be useful when we add react router.
This option tells server to fallback to <code>index.html</code> which will handle routing (as we are building single page app).</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>node ./node_modules/webpack-dev-server/bin/webpack-dev-server.js --hot --inline
</span></code></pre>
<p>Not only the hot reload watches the changes and updates the browser, but it injects the code and keeps the application state.
Note that not all modules can be replaced.
The code in <code>app/js/app.js</code> cannot be reloaded and will cause a full page reload but changing the children components will trigger a hot module replacement.</p>
<p>To make things easier, we'll add our script to the <code>package.json</code> file.</p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#c678dd;">...
</span><span>  </span><span style="color:#98c379;">&quot;scripts&quot;</span><span>: {
</span><span>    </span><span style="color:#98c379;">&quot;dev&quot;</span><span>: </span><span style="color:#98c379;">&quot;node ./node_modules/webpack-dev-server/bin/webpack-dev-server.js --hot --inline --history-api-fallback&quot;
</span><span>  }
</span><span style="color:#c678dd;">...
</span></code></pre>
<p>Now we can run only <code>npm run dev</code></p>
<h2 id="eslint">ESLint<a
  class="header-anchor"
  href="#eslint" aria-label="Anchor link for: eslint"
  title="Anchor link for: eslint"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>We are going to use AirBNB's set of rules for linting, as their standards are really good.
Also, creating eslint by hand would take a long time.</p>
<p>Pro tip: <strong>ALWAYS LINT</strong>. No matter what people say - <strong>always use linters</strong>.
You will catch errors earlier, and enforce your (the best) standards.</p>
<p><a href="https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb">https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb</a></p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>npm install --save-dev eslint eslint-config-airbnb eslint-plugin-import eslint-plugin-react eslint-plugin-jsx-a11y eslint
</span></code></pre>
<p>Now we need to create <code>.eslintrc</code> that only needs extends param,
but if you want to customize it, add your rules to the <code>rules</code> object.
Personally I like single quotes more, and spaces in the react curly synthax.</p>
<p>You might have to restart your editor for changes to take effect.
For beginners I would recommend <a href="https://atom.io/">Atom</a> editor.</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>{
</span><span>  &quot;extends&quot;: &quot;airbnb&quot;,
</span><span>  &quot;rules&quot;: {
</span><span>    &quot;jsx-quotes&quot;: [2, &quot;prefer-single&quot;],
</span><span>    &quot;react/jsx-curly-spacing&quot;: [2, &quot;always&quot;],
</span><span>    &quot;react/prefer-stateless-function&quot;: [0]
</span><span>  }
</span><span>}
</span></code></pre>
<h2 id="react-router">React Router<a
  class="header-anchor"
  href="#react-router" aria-label="Anchor link for: react-router"
  title="Anchor link for: react-router"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>Install it from the NPM</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>npm install --save react-router
</span></code></pre>
<p>What we'll do is pretty much the same thing from the official getting started guide.</p>
<p><a href="https://github.com/reactjs/react-router/blob/master/docs/Introduction.md">https://github.com/reactjs/react-router/blob/master/docs/Introduction.md</a></p>
<p>Your <code>app.js</code> should look like this. You'll have to create <code>App</code>, <code>Home</code> and <code>About</code> views.</p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#c678dd;">import </span><span style="color:#e06c75;">React </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;react&#39;</span><span>;
</span><span style="color:#c678dd;">import </span><span style="color:#e06c75;">ReactDOM </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;react-dom&#39;</span><span>;
</span><span>
</span><span style="color:#c678dd;">import </span><span style="color:#e06c75;">App </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;./views/App&#39;</span><span>;
</span><span style="color:#c678dd;">import </span><span style="color:#e06c75;">Home </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;./views/Home&#39;</span><span>;
</span><span style="color:#c678dd;">import </span><span style="color:#e06c75;">About </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;./views/About&#39;</span><span>;
</span><span>
</span><span style="color:#c678dd;">import </span><span>{ </span><span style="color:#e06c75;">Router</span><span>, </span><span style="color:#e06c75;">Route</span><span>, </span><span style="color:#e06c75;">IndexRoute</span><span>, </span><span style="color:#e06c75;">browserHistory </span><span>} </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;react-router&#39;</span><span>;
</span><span>
</span><span style="color:#e06c75;">ReactDOM</span><span>.</span><span style="color:#61afef;">render</span><span>(
</span><span>  &lt;</span><span style="color:#e5c07b;">Router history</span><span style="color:#c678dd;">=</span><span>{ </span><span style="color:#e06c75;">browserHistory </span><span>}&gt;
</span><span>    &lt;</span><span style="color:#e5c07b;">Route path</span><span style="color:#c678dd;">=</span><span style="color:#98c379;">&#39;/&#39; </span><span style="color:#e5c07b;">component</span><span style="color:#c678dd;">=</span><span>{ </span><span style="color:#e06c75;">App </span><span>}&gt;
</span><span>      &lt;</span><span style="color:#e5c07b;">IndexRoute component</span><span style="color:#c678dd;">=</span><span>{ </span><span style="color:#e06c75;">Home </span><span>} /&gt;
</span><span>      &lt;</span><span style="color:#e5c07b;">Route path</span><span style="color:#c678dd;">=</span><span style="color:#98c379;">&#39;about&#39; </span><span style="color:#e5c07b;">component</span><span style="color:#c678dd;">=</span><span>{ </span><span style="color:#e06c75;">About </span><span>} /&gt;
</span><span>    &lt;/</span><span style="color:#e5c07b;">Route</span><span>&gt;
</span><span>  &lt;/</span><span style="color:#e5c07b;">Router</span><span>&gt;,
</span><span>  document.</span><span style="color:#61afef;">getElementById</span><span>(</span><span style="color:#98c379;">&#39;app&#39;</span><span>)
</span><span>);
</span></code></pre>
<p>And your <code>views/App/index.jsx</code> should like this. It is just a simple wrapper around your views.
It has simple menu so we can test routing. <code>chilren</code> prop is every child component that is passed to it.
In our case, children will be route that is matched in our <code>app.js</code>.</p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#c678dd;">import </span><span style="color:#e06c75;">React</span><span>, { </span><span style="color:#e06c75;">Component </span><span>} </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;react&#39;</span><span>;
</span><span style="color:#c678dd;">import </span><span>{ </span><span style="color:#e06c75;">Link </span><span>} </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;react-router&#39;</span><span>;
</span><span>
</span><span style="color:#c678dd;">export default class </span><span style="color:#e5c07b;">App </span><span style="color:#c678dd;">extends </span><span style="color:#e5c07b;">Component {
</span><span style="color:#e5c07b;">  </span><span style="color:#61afef;">render</span><span style="color:#e5c07b;">() {
</span><span style="color:#e5c07b;">    </span><span style="color:#c678dd;">const </span><span style="color:#e5c07b;">{ </span><span style="color:#e06c75;">children </span><span style="color:#e5c07b;">} </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">this</span><span style="color:#e5c07b;">.</span><span style="color:#e06c75;">props</span><span style="color:#e5c07b;">;
</span><span style="color:#e5c07b;">
</span><span style="color:#e5c07b;">    </span><span style="color:#c678dd;">return </span><span style="color:#e5c07b;">(
</span><span style="color:#e5c07b;">      &lt;</span><span style="color:#e06c75;">div </span><span style="color:#e5c07b;">className</span><span style="color:#c678dd;">=</span><span style="color:#98c379;">&#39;App&#39;</span><span style="color:#e5c07b;">&gt;
</span><span style="color:#e5c07b;">        &lt;Link to</span><span style="color:#c678dd;">=</span><span style="color:#98c379;">&#39;/&#39;</span><span style="color:#e5c07b;">&gt;Home&lt;/Link&gt;
</span><span style="color:#e5c07b;">        &lt;Link to</span><span style="color:#c678dd;">=</span><span style="color:#98c379;">&#39;/about&#39;</span><span style="color:#e5c07b;">&gt;About&lt;/Link&gt;
</span><span style="color:#e5c07b;">
</span><span style="color:#e5c07b;">        { </span><span style="color:#e06c75;">children </span><span style="color:#e5c07b;">}
</span><span style="color:#e5c07b;">      &lt;/</span><span style="color:#e06c75;">div</span><span style="color:#e5c07b;">&gt;
</span><span style="color:#e5c07b;">    );
</span><span style="color:#e5c07b;">  }
</span><span style="color:#e5c07b;">}
</span></code></pre>
<h2 id="redux">Redux<a
  class="header-anchor"
  href="#redux" aria-label="Anchor link for: redux"
  title="Anchor link for: redux"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<ul>
<li>Note that this part will be updated soon with more details.</li>
</ul>
<p>Install redux</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>npm i redux react-redux --save
</span></code></pre>
<p>To learn what redux is, the best place to start are lessons taught by the redux's creator himself, Dan Abramov.</p>
<p><a href="https://egghead.io/series/getting-started-with-redux">https://egghead.io/series/getting-started-with-redux</a></p>
<p>And to add it to your React app, for now follow official documentation (more info coming soon);</p>
<p><a href="http://redux.js.org/docs/basics/UsageWithReact.html">http://redux.js.org/docs/basics/UsageWithReact.html</a></p>
<h2 id="nice-to-have">Nice to have<a
  class="header-anchor"
  href="#nice-to-have" aria-label="Anchor link for: nice-to-have"
  title="Anchor link for: nice-to-have"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>This is everything you need, following the best practices for react and javascipt development in general.
Beside that there is couple of more things, that I usually add to my projects.
Check it yourself, and add it if you thing these are useful to you.</p>
<h5 id="absolute-path-resolving">Absolute path resolving<a
  class="header-anchor"
  href="#absolute-path-resolving" aria-label="Anchor link for: absolute-path-resolving"
  title="Anchor link for: absolute-path-resolving"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h5>
<p>To be able to include your files with absolute paths you need to set root path.
(Example: <code>components/views/App</code> instead of <code>../../views/App</code>.)
In your webpack config, under resolve add <code>root</code> param. Note that you have add <code>path</code> at the top of the file.</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>const path = require(&#39;path&#39;);
</span><span>
</span><span>...
</span><span>resolve: {
</span><span>  extensions: [&#39;&#39;, &#39;.js&#39;, &#39;.jsx&#39;, &#39;.json&#39;],
</span><span>  root: path.resolve(__dirname, &#39;./app/js&#39;),
</span><span>},
</span><span>...
</span></code></pre>
<p>Using this will probably still give you linting errors in the editor, so we need to add
Install eslint import resolver package</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>npm install --save-dev eslint-import-resolver-webpack
</span></code></pre>
<p>And add settings to your <code>.eslintrc</code></p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#c678dd;">...
</span><span>settings: {
</span><span>  </span><span style="color:#98c379;">&quot;import/resolver&quot;</span><span>: </span><span style="color:#98c379;">&quot;webpack&quot;
</span><span>}
</span><span style="color:#c678dd;">...
</span></code></pre>
<h2 id="update">Update<a
  class="header-anchor"
  href="#update" aria-label="Anchor link for: update"
  title="Anchor link for: update"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>As promised in comments, here you can find complete <code>webpack.config.js</code> and <code>package.json</code>.</p>
<p>To make it even easier, I created a git repository to go along with this blog post.
You can find it on <a href="https://github.com/Stanko/react-tutorial">GitHub</a>.</p>
<h4 id="webpack-config-js">webpack.config.js<a
  class="header-anchor"
  href="#webpack-config-js" aria-label="Anchor link for: webpack-config-js"
  title="Anchor link for: webpack-config-js"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h4>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#c678dd;">const </span><span style="color:#e06c75;">path </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">require</span><span>(</span><span style="color:#98c379;">&#39;path&#39;</span><span>);
</span><span>
</span><span>module.exports </span><span style="color:#c678dd;">= </span><span>{
</span><span>  context: __dirname </span><span style="color:#c678dd;">+ </span><span style="color:#98c379;">&quot;/app&quot;</span><span>,
</span><span>
</span><span>  entry: {
</span><span>    javascript: </span><span style="color:#98c379;">&quot;./js/app.js&quot;</span><span>,
</span><span>    html: </span><span style="color:#98c379;">&quot;./index.html&quot;</span><span>,
</span><span>  },
</span><span>
</span><span>  output: {
</span><span>    filename: </span><span style="color:#98c379;">&quot;app.js&quot;</span><span>,
</span><span>    path: __dirname </span><span style="color:#c678dd;">+ </span><span style="color:#98c379;">&quot;/dist&quot;</span><span>,
</span><span>  },
</span><span>
</span><span>  resolve: {
</span><span>    extensions: [</span><span style="color:#98c379;">&#39;&#39;</span><span>, </span><span style="color:#98c379;">&#39;.js&#39;</span><span>, </span><span style="color:#98c379;">&#39;.jsx&#39;</span><span>, </span><span style="color:#98c379;">&#39;.json&#39;</span><span>],
</span><span>    root: </span><span style="color:#e06c75;">path</span><span>.</span><span style="color:#61afef;">resolve</span><span>(__dirname, </span><span style="color:#98c379;">&#39;./app/js&#39;</span><span>),
</span><span>  },
</span><span>
</span><span>  module: {
</span><span>    loaders: [
</span><span>      {
</span><span>        test: </span><span style="color:#98c379;">/</span><span style="color:#56b6c2;">\.</span><span style="color:#98c379;">jsx</span><span style="color:#c678dd;">?$</span><span style="color:#98c379;">/</span><span>,
</span><span>        exclude: </span><span style="color:#98c379;">/node_modules/</span><span>,
</span><span>        loaders: [</span><span style="color:#98c379;">&quot;react-hot&quot;</span><span>, </span><span style="color:#98c379;">&quot;babel-loader&quot;</span><span>],
</span><span>      },
</span><span>      {
</span><span>        test: </span><span style="color:#98c379;">/</span><span style="color:#56b6c2;">\.</span><span style="color:#98c379;">html</span><span style="color:#c678dd;">$</span><span style="color:#98c379;">/</span><span>,
</span><span>        loader: </span><span style="color:#98c379;">&quot;file?name=[name].[ext]&quot;</span><span>,
</span><span>      },
</span><span>    ],
</span><span>  },
</span><span>}
</span></code></pre>
<h4 id="package-json">package.json<a
  class="header-anchor"
  href="#package-json" aria-label="Anchor link for: package-json"
  title="Anchor link for: package-json"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h4>
<p>This is minimal version of the file. Yours will probably have more stuff like <code>author</code>, <code>license</code>...</p>
<pre data-lang="json" style="background-color:#282c34;color:#dcdfe4;" class="language-json "><code class="language-json" data-lang="json"><span>{
</span><span>  </span><span style="color:#98c379;">&quot;scripts&quot;</span><span>: {
</span><span>    </span><span style="color:#98c379;">&quot;dev&quot;</span><span>: </span><span style="color:#98c379;">&quot;node ./node_modules/webpack-dev-server/bin/webpack-dev-server.js --hot --inline --history-api-fallback&quot;
</span><span>  },
</span><span>  </span><span style="color:#98c379;">&quot;devDependencies&quot;</span><span>: {
</span><span>    </span><span style="color:#98c379;">&quot;babel-core&quot;</span><span>: </span><span style="color:#98c379;">&quot;^6.21.0&quot;</span><span>,
</span><span>    </span><span style="color:#98c379;">&quot;babel-loader&quot;</span><span>: </span><span style="color:#98c379;">&quot;^6.2.10&quot;</span><span>,
</span><span>    </span><span style="color:#98c379;">&quot;babel-preset-es2015&quot;</span><span>: </span><span style="color:#98c379;">&quot;^6.18.0&quot;</span><span>,
</span><span>    </span><span style="color:#98c379;">&quot;babel-preset-react&quot;</span><span>: </span><span style="color:#98c379;">&quot;^6.16.0&quot;</span><span>,
</span><span>    </span><span style="color:#98c379;">&quot;eslint&quot;</span><span>: </span><span style="color:#98c379;">&quot;^3.13.1&quot;</span><span>,
</span><span>    </span><span style="color:#98c379;">&quot;eslint-config-airbnb&quot;</span><span>: </span><span style="color:#98c379;">&quot;^14.0.0&quot;</span><span>,
</span><span>    </span><span style="color:#98c379;">&quot;eslint-plugin-import&quot;</span><span>: </span><span style="color:#98c379;">&quot;^2.2.0&quot;</span><span>,
</span><span>    </span><span style="color:#98c379;">&quot;eslint-plugin-jsx-a11y&quot;</span><span>: </span><span style="color:#98c379;">&quot;^3.0.2&quot;</span><span>,
</span><span>    </span><span style="color:#98c379;">&quot;eslint-plugin-react&quot;</span><span>: </span><span style="color:#98c379;">&quot;^6.9.0&quot;</span><span>,
</span><span>    </span><span style="color:#98c379;">&quot;file-loader&quot;</span><span>: </span><span style="color:#98c379;">&quot;^0.9.0&quot;</span><span>,
</span><span>    </span><span style="color:#98c379;">&quot;react-hot-loader&quot;</span><span>: </span><span style="color:#98c379;">&quot;^1.3.1&quot;</span><span>,
</span><span>    </span><span style="color:#98c379;">&quot;react-router&quot;</span><span>: </span><span style="color:#98c379;">&quot;^3.0.2&quot;</span><span>,
</span><span>    </span><span style="color:#98c379;">&quot;webpack&quot;</span><span>: </span><span style="color:#98c379;">&quot;^1.14.0&quot;</span><span>,
</span><span>    </span><span style="color:#98c379;">&quot;webpack-dev-server&quot;</span><span>: </span><span style="color:#98c379;">&quot;^1.16.2&quot;
</span><span>  },
</span><span>  </span><span style="color:#98c379;">&quot;dependencies&quot;</span><span>: {
</span><span>    </span><span style="color:#98c379;">&quot;react&quot;</span><span>: </span><span style="color:#98c379;">&quot;^15.4.2&quot;</span><span>,
</span><span>    </span><span style="color:#98c379;">&quot;react-dom&quot;</span><span>: </span><span style="color:#98c379;">&quot;^15.4.2&quot;
</span><span>  }
</span><span>}
</span></code></pre>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>I washed my headphones</title>
		<published>2016-08-03T00:00:00+00:00</published>
		<updated>2016-08-03T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/i-washed-my-headphones/" type="text/html"/>
		<id>https://muffinman.io/blog/i-washed-my-headphones/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Recently I lost my iPhone headphones.
I didn't care much, as they were almost three years old, and I had a brand new ones.
But today, while getting ready for work, I found them in the pocket
of the pants I washed about week ago.</p>
<p>I was sure they wouldn't work, but guess what? They do!
Probably the fact that they dried for days helped.</p>
<p>So I guees I have a spare pair of headphones now :)</p>
<h3 id="update-april-2019">Update, April 2019.<a
  class="header-anchor"
  href="#update-april-2019" aria-label="Anchor link for: update-april-2019"
  title="Anchor link for: update-april-2019"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>This time headphones with lightning connector were washed. And dried. Plastic and cable warped, so I won't be using them. But they are still working and can play music.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Null Object Tech Meetup Vol 3</title>
		<published>2016-07-13T00:00:00+00:00</published>
		<updated>2016-07-13T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/null-object-meetup-vol-3/" type="text/html"/>
		<id>https://muffinman.io/blog/null-object-meetup-vol-3/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Another tech meetup is behind us, even more people came this time.
As promised, we will keep them coming more often.</p>

  <img
    class="image image--lg   "
    src="&#x2F;img&#x2F;meetup-vol-3&#x2F;2.JPG"
    alt="Me, talking at the meetup"
  />
  

<p>Miloš spoke first about learning in tech, and keeping up with it.
My talk was about SPAs, and how hard they are.</p>
<span id="continue-reading"></span>
<p>We hope that meetups like this will help to build and strengthen the community in Belgrade, and Serbia in general.
At this point that is not something we can brag about.
We are planning charity hackatons as well and I'll keep you posted about them.</p>
<p>Grab the slides:</p>
<ul>
<li><a href="/pdf/Null Object Tech Meetup - Keeping up with the tech.pdf">Keeping up with the tech</a></li>
<li><a href="/pdf/Null Object Tech Meetup - SPAs are hard.pdf">Single Page Applications are hard</a></li>
</ul>
<p>
  <img
    class="image image--lg   "
    src="&#x2F;img&#x2F;meetup-vol-3&#x2F;1.JPG"
    alt="Miloš"
  />
  



  <img
    class="image image--lg   "
    src="&#x2F;img&#x2F;meetup-vol-3&#x2F;3.JPG"
    alt="Audience"
  />
  

</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Sektor - draw and animate SVG sectors</title>
		<published>2016-06-29T00:00:00+00:00</published>
		<updated>2016-06-29T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/sektor-draw-and-animate-svg-circle-sectors-2016/" type="text/html"/>
		<id>https://muffinman.io/blog/sektor-draw-and-animate-svg-circle-sectors-2016/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>For a current project I'm on, we needed both circular timer, and progress bar.
Again, I wasn't able to find small library to do that. But I found
<a href="http://stackoverflow.com/questions/21205652/how-to-draw-a-circle-sector-in-css/21206274#21206274">awesome answer</a>
on Stack Overflow, decided SVG is way to go, and wrote <a href="https://muffinman.io/sektor/">Sektor</a>.</p>
<p>Sektor is a plain JavaScript library that draws circle sector (or an arc).
Once it is drawn, you can change it's angle and animate the change.</p>
<p><a href="https://muffinman.io/sektor/">
<img src="https://muffinman.io/sektor/img/sektor.png" alt="Sektor - draw and animate SVG circle" />
</a></p>
<p>It works in every browser with SVG and <code>requestAnimationFrane</code> support (IE10+ and modern browsers).
Check <a href="https://muffinman.io/sektor/">demo and docs</a>.</p>
<p>I may use this for example how much better is to use <code>requestAnimationFrame</code> than <code>setInterval</code>.
If you are bored, try it yourself, and you'll see that animating using <code>requestAnimationFrame</code> is way smoother.</p>
<p>React component is coming soon as well. Cheers!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Change to position fixed on iOS Safari while scrolling</title>
		<published>2016-06-15T00:00:00+00:00</published>
		<updated>2016-06-15T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/ios-safari-scroll-position-fixed/" type="text/html"/>
		<id>https://muffinman.io/blog/ios-safari-scroll-position-fixed/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>If you ever had to fix element on scroll, you probably had an issue on iOS Safari (and other mobile devices).
Element will usually flicker, and disappear until scrolling has stopped completely.</p>
<p>Just force GPU acceleration by adding <code>transform: translate3d(0,0,0);</code> to your element.</p>
<p>You will have something like this:</p>
<pre data-lang="css" style="background-color:#282c34;color:#dcdfe4;" class="language-css "><code class="language-css" data-lang="css"><span style="color:#e5c07b;">.Element-header </span><span>{
</span><span>  transform: </span><span style="color:#61afef;">translate3d</span><span>(</span><span style="color:#e5c07b;">0</span><span>,</span><span style="color:#e5c07b;">0</span><span>,</span><span style="color:#e5c07b;">0</span><span>);
</span><span>}
</span><span>
</span><span style="color:#e5c07b;">.Element-header--fixed </span><span>{
</span><span>  top: </span><span style="color:#e5c07b;">0</span><span>;
</span><span>  position: fixed;
</span><span>}
</span></code></pre>
<p>Enjoy <code>¯\_(ツ)_/¯</code></p>
<h3 id="update-if-the-element-inside-fixed-one-flickers">Update, if the element inside fixed one flickers<a
  class="header-anchor"
  href="#update-if-the-element-inside-fixed-one-flickers" aria-label="Anchor link for: update-if-the-element-inside-fixed-one-flickers"
  title="Anchor link for: update-if-the-element-inside-fixed-one-flickers"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>In the comments Matt made a great tip, so I'm adding it here as well:</p>
<p>If you are styling the element within fixed element,
you need to apply the <code>translate3d</code> hack to the nested element
in order for it to not flicker/disappear.</p>
<p>Thanks Matt!</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Highlight variables in Atom, Babel template strings</title>
		<published>2016-05-07T00:00:00+00:00</published>
		<updated>2016-05-07T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/highlight-vars-in-atom-babel-javascript/" type="text/html"/>
		<id>https://muffinman.io/blog/highlight-vars-in-atom-babel-javascript/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Atom <a href="https://babeljs.io/">Babel</a> plugin doesn't highlight variables
in ES6 (ES2015) template strings.</p>
<p>You'll need to add this snippet to your Atom's <code>style.less</code></p>
<pre data-lang="css" style="background-color:#282c34;color:#dcdfe4;" class="language-css "><code class="language-css" data-lang="css"><span style="color:#e06c75;">atom-text-editor</span><span style="color:#e5c07b;">::</span><span style="color:#c678dd;">shadow </span><span style="color:#e5c07b;">.variable.js </span><span>{
</span><span>  color: </span><span style="color:#e5c07b;">#F8F8F2</span><span>;
</span><span>}
</span></code></pre>
<p><img src="/img/template-string-vars.png" alt="ES6 template string with variable highlighted in Atom" /></p>
<p>In general, you can just inspect stuff in Atom, find out what classes
element are using, and then style it via CSS (LESS).
Just don't forget to add <code>atom-text-editor::shadow</code> before your rules.</p>
<p>If anyone is interested, I'm using <a href="https://atom.io/themes/monokai-seti">Monokai Seti</a> theme.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Switching to Atom, this time for good</title>
		<published>2016-04-18T00:00:00+00:00</published>
		<updated>2016-04-18T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/trying-atom-for-the-third-time/" type="text/html"/>
		<id>https://muffinman.io/blog/trying-atom-for-the-third-time/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>I'm a big fan of <a href="https://www.sublimetext.com/">Sublime Text</a> editor, which I was using for years now.
Minimal, fast, reliable. But there is one big problem with it.
Only one man is working on it's development and community really slowed down.
JavaScript ecosystem is going forward at incredible speed, and I'm not sure if Sublime will be able to keep up.</p>
<p>Even <a href="https://en.wikipedia.org/wiki/Bus_factor">bus factor</a> comes to mind.</p>
<p>That's why I tried couple of alternatives.
When comes to bigger IDEs JetBrains is really good, but it is not as snappy as I would like.
Logical move was to try GitHub's <a href="https://atom.io">Atom</a> editor again.</p>
<p><a href="https://atom.io/"><img src="/img/atom.png" alt="Atom editor" /></a></p>
<span id="continue-reading"></span>
<p>Atom is basically a open source clone of Sublime Text, built on web technologies.
I've tried it two times in the past, but both times I was going back to Sublime.
It just wasn't as polished and fast as Sublime is.
Couple of weeks ago I gave it another chance.</p>
<p>This time it blew me away. It is so much faster than it was last time I tried it.
Community released and updated so many great packages.
Linters, support for React, Angular, Babel, ES2015...
UI is better, everything improved so much.</p>
<p>Small disclaimer, I'm a frontend developer, and Atom is awesome for it.
People are using it for everything else too, but I don't have much experience with other languages.</p>
<p>Issue with large files is still here though. Opening 5MB+ log files is painful.
This is something that I hope will be solved in the future, but it is not a deal breaker for me.
Also when you open a file, there is a brief flash of white text,
before syntax highlighting kicks in, but I got used to it after couple of days.</p>
<p>Long story short - I'm sticking with Atom this time.</p>
<p>Thanks to everyone in the Atom team and community, for making awesome development tool,
and keeping it open source.</p>
<hr />
<p>Edit: I even used Atom recently on live coding session on <a href="/blog/null-object-tech-meetup-vol-2/">Null Object Tech Meetup</a>.</p>

<a href="&#x2F;blog&#x2F;null-object-tech-meetup-vol-2&#x2F;" class="image__link">

  <img
    class="image image--lg   "
    src="&#x2F;img&#x2F;meetup-vol-2&#x2F;4.jpg"
    alt="Me, live coding on a meetup"
  />
  

</a>


    </content>

	</entry>
	<entry xml:lang="en">
		<title>Null Object Tech Meetup Vol 2</title>
		<published>2016-04-15T00:00:00+00:00</published>
		<updated>2016-04-15T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/null-object-tech-meetup-vol-2/" type="text/html"/>
		<id>https://muffinman.io/blog/null-object-tech-meetup-vol-2/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Two days ago, we held the second Tech Meetup.
There were two speakers including myself, and Nemanja Nićiforović, our CEO.
Nemanja spoke <i>How to Freelance</i>, and I covered <i>Intro to React</i>.</p>
<p>Grab slides:</p>
<ul>
<li><a href="/pdf/Null Object Tech Meetup - How To Freelance.pdf">How To Freelance</a></li>
<li><a href="/pdf/Null Object Tech Meetup - Intro To React.pdf">Intro To React</a></li>
</ul>
<p>We are very thankful to our friends at
<a href="https://www.facebook.com/zaokret/">Zaokret</a> where meetup took place.
There were around 60 people and we hope even more people will come to the next one.
Hopefully, we are not going to make a year long pause like we did between this and the last one.</p>
<p>
  <img
    class="image image--lg   "
    src="&#x2F;img&#x2F;meetup-vol-2&#x2F;1.jpg"
    alt="Null Object tech meetup atmosphere"
  />
  



  <img
    class="image image--lg   "
    src="&#x2F;img&#x2F;meetup-vol-2&#x2F;2.jpg"
    alt="Stanko Tadić talking at the meetup"
  />
  



  <img
    class="image image--lg   "
    src="&#x2F;img&#x2F;meetup-vol-2&#x2F;3.jpg"
    alt="Audience"
  />
  

</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>HTML canvas video player</title>
		<published>2016-04-05T00:00:00+00:00</published>
		<updated>2016-04-05T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/html-canvas-video-player-ios/" type="text/html"/>
		<id>https://muffinman.io/blog/html-canvas-video-player-ios/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>This is the one of my most popular repos. Once client asked for inline video that works on iPhone too.
As Apple doesn't allow that (all videos are full screen in native player, and autoplay is not supported),.
There was no easy solution, so this player was born.</p>
<p>It uses HTML <code>video</code> and <code>canvas</code>. Script picks up the frame from the video and draws it on the canvas.
For sound, there is <code>audio</code> element using video files (you can provide different audio file for it).</p>
<p><a href="https://muffinman.io/html-canvas-video-player/"><img src="/img/projects/canvas-video.jpg" alt="HTML canvas video player - Demo" /></a></p>
<p>Play, pause, jump to time and autoplay are all supported.
But please check the <a href="https://muffinman.io/html-canvas-video-player/">documentation and demo</a>.</p>
<p>You shouldn't use this on any device that supports HTML video natively, but as a fallback.</p>
<p>Grab the code on <a href="https://github.com/Stanko/html-canvas-video-player">GitHub</a>.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>My favorite bash oneliner</title>
		<published>2016-04-04T00:00:00+00:00</published>
		<updated>2016-04-04T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/my-favorite-bash-oneliner/" type="text/html"/>
		<id>https://muffinman.io/blog/my-favorite-bash-oneliner/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>This simple bash command finds all of the files matching <code>*~</code> recursively, executes <code>rm</code> on them
and prints out which files are affected.</p>
<p>You can replace file matching pattern, and command you want to execute.</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>find ./ -name &#39;*~&#39; -exec rm &#39;{}&#39; &#39;;&#39; -print
</span></code></pre>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Custom scroll bars</title>
		<published>2016-03-21T00:00:00+00:00</published>
		<updated>2016-03-21T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/custom-scroll-bars/" type="text/html"/>
		<id>https://muffinman.io/blog/custom-scroll-bars/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Generally when comes to replacing native UI components, I'm strongly against it.
But, we've all been there, when the client insists on it.</p>
<p>You'll see how to style it via CSS (webkit only),
apply pure JavaScipt plugin with native scrolling or apply simple CSS hack.</p>
<p>Well, let's go :)</p>
<span id="continue-reading"></span><h3 id="css-solution-but-only-for-webkit">CSS solution, but only for webkit<a
  class="header-anchor"
  href="#css-solution-but-only-for-webkit" aria-label="Anchor link for: css-solution-but-only-for-webkit"
  title="Anchor link for: css-solution-but-only-for-webkit"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>Webkit scrollbars can be styles via CSS. This is great, but still not cross browser.
CSS tricks has a <a href="https://css-tricks.com/custom-scrollbars-in-webkit/">great article</a> on it.</p>
<p>You can use pseudo selectors, these ones are used in the demo:</p>
<pre data-lang="css" style="background-color:#282c34;color:#dcdfe4;" class="language-css "><code class="language-css" data-lang="css"><span style="color:#e5c07b;">::</span><span style="color:#c678dd;">-webkit-scrollbar </span><span>{
</span><span>  background: </span><span style="color:#e5c07b;">#CCF6ED</span><span>;
</span><span>  border-radius: </span><span style="color:#e5c07b;">4</span><span style="color:#c678dd;">px</span><span>;
</span><span>  height: </span><span style="color:#e5c07b;">8</span><span style="color:#c678dd;">px</span><span>;
</span><span>  width: </span><span style="color:#e5c07b;">8</span><span style="color:#c678dd;">px</span><span>;
</span><span>}
</span><span>
</span><span style="color:#e5c07b;">::</span><span style="color:#c678dd;">-webkit-scrollbar-thumb </span><span>{
</span><span>  background: </span><span style="color:#e5c07b;">#21BB9A</span><span>;
</span><span>  border-radius: </span><span style="color:#e5c07b;">4</span><span style="color:#c678dd;">px</span><span>;
</span><span>}
</span></code></pre>
<p>Check jsfiddle demo with green-ish scrollbars <i>webkit only</i>.</p>
<iframe
  height="300"
  
  scrolling="no"
  title="Example of customizing webkit scrollbars using CSS"
  src="https://codepen.io/stanko/embed/jpLJbQ?default-tab=result"
  frameborder="no"
  loading="lazy"
  allowtransparency="true"
  allowfullscreen="true"
>
  See the Pen <a href="https://codepen.io/stanko/pen/jpLJbQ">
  Example of customizing webkit scrollbars using CSS</a> by Stanko (<a href="https://codepen.io/stanko">@stanko</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
<h3 id="custom-javascript-plugin-using-native-scroll">Custom JavaScript plugin, using native scroll<a
  class="header-anchor"
  href="#custom-javascript-plugin-using-native-scroll" aria-label="Anchor link for: custom-javascript-plugin-using-native-scroll"
  title="Anchor link for: custom-javascript-plugin-using-native-scroll"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>This one I wrote years ago, and it is fully supporting IE8. It needs some love,
as it should updated with I have learned since then.</p>
<p>Using browser native scroll so it is smooth as you can get.
Scrollbars are customizable via CSS.</p>
<p><a href="https://muffinman.io/rocketScroll/">
<img src="/img/projects/rocket-scroll.png" alt="Demo - Custom scroll bars using javascript plugin" />
</a></p>
<p>Check the <a href="https://muffinman.io/rocketScroll/">demo</a>.</p>
<p>Grab the code on <a href="https://github.com/Stanko/rocketScroll">GitHub</a>.</p>
<h3 id="css-solution-all-browsers">CSS solution, all browsers<a
  class="header-anchor"
  href="#css-solution-all-browsers" aria-label="Anchor link for: css-solution-all-browsers"
  title="Anchor link for: css-solution-all-browsers"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<ul>
<li>Idea - Show scrollbars only on mouse hover.</li>
<li>Problem - content will be shrunk for the width of the scrollbar on hover, and jump.</li>
</ul>
<p>We are going to exploit the fast that all of the browsers have sub 20px wide scrollbar.
This demo is using two divs, outer one which will be scrolled, and content wrapped in the inner one.
Just put <code>overflow: hidden</code> on the outer div, and on mouse hover, switch to <code>overflow: scroll</code>
Having inner div smaller for 20px, you will be able to create enough
space for the scroll bar, and content won't jump around.</p>
<p>You'll need to add modernizr, or some other way to detect touch devices.
That's why we are using <code>overflow-y: scroll</code> by default.
Scrolling on touch devices is already nice and smooth.</p>
<pre data-lang="css" style="background-color:#282c34;color:#dcdfe4;" class="language-css "><code class="language-css" data-lang="css"><span style="color:#e5c07b;">.scroll-y </span><span>{
</span><span>  width: </span><span style="color:#e5c07b;">300</span><span style="color:#c678dd;">px</span><span>;
</span><span>  height: </span><span style="color:#e5c07b;">300</span><span style="color:#c678dd;">px</span><span>;
</span><span>  overflow-y: scroll; </span><span style="color:#5c6370;">/* not to mess up scroll on touch devices */
</span><span>}
</span><span>
</span><span style="color:#e5c07b;">.scroll-y-content </span><span>{
</span><span>  padding: </span><span style="color:#e5c07b;">20</span><span style="color:#c678dd;">px </span><span style="color:#e5c07b;">0 20</span><span style="color:#c678dd;">px </span><span style="color:#e5c07b;">20</span><span style="color:#c678dd;">px</span><span>;
</span><span>  width: </span><span style="color:#e5c07b;">280</span><span style="color:#c678dd;">px</span><span>; </span><span style="color:#5c6370;">/* 20px less than parent width */
</span><span>}
</span><span>
</span><span style="color:#5c6370;">/* no-touchevents class is added by modernizr
</span><span style="color:#5c6370;"> * as we don&#39;t want to apply this on touch devices */
</span><span style="color:#e5c07b;">.no-touchevents .scroll-y </span><span>{
</span><span>  overflow-y: hidden;
</span><span>}
</span><span>
</span><span style="color:#e5c07b;">.no-touchevents .scroll-y:</span><span style="color:#c678dd;">hover </span><span>{
</span><span>  overflow-y: scroll;
</span><span>}
</span></code></pre>
<p>Check demo on CodePen (please note that demo was updated to work without modernizr).</p>
<iframe
  height="420"
  
  scrolling="no"
  title="Show scrollbars on hover only"
  src="https://codepen.io/stanko/embed/BaBEQQG?default-tab=result"
  frameborder="no"
  loading="lazy"
  allowtransparency="true"
  allowfullscreen="true"
>
  See the Pen <a href="https://codepen.io/stanko/pen/BaBEQQG">
  Show scrollbars on hover only</a> by Stanko (<a href="https://codepen.io/stanko">@stanko</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Simple React slider with touch support</title>
		<published>2016-03-12T00:00:00+00:00</published>
		<updated>2016-03-12T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/simple-react-slider/" type="text/html"/>
		<id>https://muffinman.io/blog/simple-react-slider/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>I needed simple React slider component, as we are building our new website as a universal React application.
But I did not find anything lightweight. There is a crazy trend in JavaScript world - add gazillion dependencies.</p>
<p>So again, I made something myself.</p>

<a href="https:&#x2F;&#x2F;muffinman.io&#x2F;react-slider&#x2F;" class="image__link">

  <img
    class="image image--md   "
    src="&#x2F;img&#x2F;projects&#x2F;react-slider.png"
    alt="Demo - React slider with touch support"
  />
  

</a>

<p>Check the <a href="https://muffinman.io/react-slider/">demo</a>.</p>
<p>It has <b>no dependencies</b>, and about 200 lines of code.
Very simple and extensible. Every modern browser is supported and IE10+.</p>
<p>IE9 should work (if you adapt the CSS), but I didn't test it.</p>
<p>Grab the code on <a href="https://github.com/Stanko/react-slider">GitHub</a>.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>What is the point of the website if it kills my laptop?</title>
		<published>2016-02-29T00:00:00+00:00</published>
		<updated>2016-02-29T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/what-is-the-point/" type="text/html"/>
		<id>https://muffinman.io/blog/what-is-the-point/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>People need to realize that is not enough to have a nice website with a ton of animations and effects.
There is no point having such website if I can't scroll it, while CPU and coolers go crazy.
And I use latest MacBook with maxed hardware. Can't imagine trying to use those websites on the old machine (or IE8-9).</p>
<p>Get your performance together.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Jekyll and Gulp workflow</title>
		<published>2016-02-27T00:00:00+00:00</published>
		<updated>2016-02-27T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/jekyll-gulp-workflow/" type="text/html"/>
		<id>https://muffinman.io/blog/jekyll-gulp-workflow/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><h2 id="update-november-2017">Update, November 2017<a
  class="header-anchor"
  href="#update-november-2017" aria-label="Anchor link for: update-november-2017"
  title="Anchor link for: update-november-2017"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>I don't use this setup anymore, it might be outdated, proceed with caution.</p>
<h2 id="original-post">Original post<a
  class="header-anchor"
  href="#original-post" aria-label="Anchor link for: original-post"
  title="Anchor link for: original-post"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h2>
<p>As you probably know this blog is powered by <a href="http://jekyllrb.com/">Jekyll</a>.
It is a really nice platform, but it lacks a few things I'm used to during development.
First one is live reload on file changes (and injecting CSS), using SASS, autoprefixer, ES6...</p>
<span id="continue-reading"></span>
<p>I tried to find a boilerplate, but everything I found didn't match my needs.
Usually people would run gulp tasks for SASS and JavaScript files, and on change
run <code>jekyll build</code>, which is insanely slow.
They would use <a href="https://www.browsersync.io/">BrowserSync</a> to serve <code>_site</code> folder.</p>
<p>So I did what programmers do - written my own. I quickly made usual gulp tasks:</p>
<ul>
<li><code>styles</code> - to compile SASS and autoprefix it</li>
<li><code>scripts</code> - to transpile ES6 goodness, and concatenate JavaScript files</li>
<li><code>serve</code> - to start local server, watch for changes and auto reload</li>
</ul>
<p>First thing I did is that I was running <code>jekyll serve</code> in one terminal,
and <code>gulp serve</code> with BrowserSync in the other.
This was working decently, but I wanted to run only one command, and let the tasks do everything for me.</p>
<p>That is where node child process comes in.</p>
<pre data-lang="tsx" style="background-color:#282c34;color:#dcdfe4;" class="language-tsx "><code class="language-tsx" data-lang="tsx"><span style="color:#c678dd;">import </span><span style="color:#e06c75;">childProcess </span><span style="color:#c678dd;">from </span><span style="color:#98c379;">&#39;child_process&#39;</span><span>;
</span><span>
</span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">spawn </span><span style="color:#c678dd;">= </span><span style="color:#e06c75;">childProcess</span><span>.</span><span style="color:#e06c75;">spawn</span><span>;
</span><span>
</span><span style="color:#e06c75;">gulp</span><span>.</span><span style="color:#61afef;">task</span><span>(</span><span style="color:#98c379;">&#39;jekyll&#39;</span><span>, </span><span style="color:#c678dd;">function </span><span>(){
</span><span>  </span><span style="color:#c678dd;">const </span><span style="color:#e06c75;">jekyll </span><span style="color:#c678dd;">= </span><span style="color:#61afef;">spawn</span><span>(</span><span style="color:#98c379;">&#39;jekyll&#39;</span><span>, [</span><span style="color:#98c379;">&#39;serve&#39;</span><span>], {
</span><span>    stdio: </span><span style="color:#98c379;">&#39;inherit&#39;
</span><span>  });
</span><span>});
</span></code></pre>
<p>This task spawns a child process from gulp.
Nice thing is that we can start it, and gulp will kill it on exit.
Now we have up and running Jekyll server, and proxy it to BrowserSync.</p>
<p>But darn, injecting CSS files didn't really work. Server was expeting CSS file
to come from <code>/css/style.css</code>, but <code>browserSync.stream</code> in gulp pipe would
inject it from the <code>_sass</code> folder. I solved this by copying css file to the <code>.tmp/css</code> and
adding <code>.tmp</code> to the <code>serveStatic</code> option of the BrowserSync.</p>
<p>One thing I should mention, that I keep my SASS files in the <code>_sass</code> folder, and
JavaScript in the <code>_js</code> one.</p>
<ol>
<li>Gulp watches changes on SASS/JS, and compiles them into <code>public</code> folder.</li>
<li>Then <code>jekyll serve</code> takes them and moves them to <code>_site</code>. Jekyll also takes care of <code>.md</code> files.</li>
<li>Gulp watches changes on <code>_site</code> and reloads the browser if html/js is changed.</li>
</ol>
<p>Complete code is available <a href="https://github.com/Stanko/Stanko.github.io">here</a>.</p>
<hr />
<h3 id="tl-dr">TL;DR<a
  class="header-anchor"
  href="#tl-dr" aria-label="Anchor link for: tl-dr"
  title="Anchor link for: tl-dr"
> <span class="sr-only" aria-hidden="true">#</span></a>
</h3>
<p>To enable live reload, SASS and JS transpiling in your Jekyll development grab my
<a href="https://github.com/Stanko/Stanko.github.io/blob/master/gulpfile.babel.js">gulpfile.babel.js</a>,
<a href="https://github.com/Stanko/Stanko.github.io/blob/master/package.json">package.json</a></p>
<p>Add this to your <code>_config.yml</code></p>
<pre data-lang="js" style="background-color:#282c34;color:#dcdfe4;" class="language-js "><code class="language-js" data-lang="js"><span>exclude: [
</span><span>  </span><span style="color:#98c379;">&#39;node_modules&#39;</span><span>,
</span><span>  </span><span style="color:#98c379;">&#39;gulpfile.babel.js&#39;</span><span>,
</span><span>  </span><span style="color:#98c379;">&#39;package.json&#39;</span><span>,
</span><span>  </span><span style="color:#98c379;">&#39;_sass&#39;</span><span>,
</span><span>  </span><span style="color:#98c379;">&#39;_js&#39;</span><span>,
</span><span>  </span><span style="color:#98c379;">&#39;.sass-cache&#39;
</span><span>]
</span></code></pre>
<p>Run <code>npm install</code> then <code>gulp</code> when it is finished and open <code>http://localhost:9000</code> in your browser.
Then write your posts and enjoy much smoother workflow.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Jekyll Read more link</title>
		<published>2016-02-27T00:00:00+00:00</published>
		<updated>2016-02-27T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/jekyll-read-more-link/" type="text/html"/>
		<id>https://muffinman.io/blog/jekyll-read-more-link/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>It is nice to use <code>post.excerpt</code> instead of <code>post.content</code>
on your Jekyll home page, but then users can't see if there is more to read until they open
the whole post.</p>
<p>To add <code>Read more</code> link, you can use this simple snippet.</p>
<pre style="background-color:#282c34;color:#dcdfe4;"><code><span>{% if post.excerpt != post.content %}
</span><span>    &lt;a href=&quot;{{ site.baseurl }}{{ post.url }}&quot;&gt;Read more&lt;/a&gt;
</span><span>{% endif %}
</span></code></pre>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>3D Rotating cubes hover effect</title>
		<published>2016-02-23T00:00:00+00:00</published>
		<updated>2016-02-23T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/3d-rotating-cube-effect/" type="text/html"/>
		<id>https://muffinman.io/blog/3d-rotating-cube-effect/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Again, I've seen it somewhere on the internet and recreated it.
This one uses jQuery, although I plan to rewrite it to vanilla JavaScript.</p>
<p>It switches between two <i>sides</i> of the cube, every time you hover.
Depending from which side cursor entered the cube, it will rotate in opposite direction.
It is fully responsive, and on touch devices, direction depends of where you tap.</p>
<p>Cube side is a regular <code>div</code>, and you can put any type of content in it.</p>

<a href="https:&#x2F;&#x2F;muffinman.io&#x2F;cube-3D-rotate-grid&#x2F;" class="image__link">

  <img
    class="image image--lg   "
    src="&#x2F;img&#x2F;projects&#x2F;cube-3D-rotate-grid.png"
    alt="Demo - 3D Rotating cubes hover effect"
  />
  

</a>

<span id="continue-reading"></span>
<p>Works on every modern browser, but on IE it falls back to the fade effect.
Thing is that Internet Explorers do not support <code>transform-style: preserve-3d</code> property.
More on <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-style">MDN</a>.</p>
<p>Check the <a href="https://muffinman.io/cube-3D-rotate-grid/">demo</a>.
Documentation is on the same page.</p>
<p>Grab the code on <a href="https://github.com/Stanko/cube-3D-rotate-grid">GitHub</a>.</p>
<p>Warning: Every person introduced to these cubes, played with them for ages :)</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Animated login and signup forms</title>
		<published>2016-02-22T00:00:00+00:00</published>
		<updated>2016-02-22T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/animated-login-signup-forms/" type="text/html"/>
		<id>https://muffinman.io/blog/animated-login-signup-forms/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Well I saw pretty nice mockup on <a href="https://dribbble.com/shots/2311260-Day-1-Sign-Up-and-Login-Animated-Download-Template">Dribbble</a>
and decided to make it for fun. It didn't include mobile/responsive solution, so I came up with my own.</p>

<a href="https:&#x2F;&#x2F;muffinman.io&#x2F;animated-onboarding&#x2F;" class="image__link">

  <img
    class="image image--lg   "
    src="&#x2F;img&#x2F;projects&#x2F;animated-onboarding.png"
    alt="Animated onboarding demo"
  />
  

</a>

<p>Check the <a href="https://muffinman.io/animated-onboarding/">demo</a>.</p>
<p>This is pure CSS solution - it uses <code>:target</code> selector for changing states.
Find more about <code>:target</code> on <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:target">MDN</a>.
This is neat, as it also can be bookmarked on both states, and browser button work too.</p>
<p>Grab the code on <a href="https://github.com/Stanko/animated-onboarding">GitHub</a>.</p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Custom Jekyll pagination</title>
		<published>2016-02-22T00:00:00+00:00</published>
		<updated>2016-02-22T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/custom-jekyll-pagination/" type="text/html"/>
		<id>https://muffinman.io/blog/custom-jekyll-pagination/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Jekyll comes with simple pagination which has only <code>Newer</code> and <code>Older</code> links.
I wanted a little bit more, now pagination shows at least five pages, with current in the middle.
On the larger screens there are also first and last page links.
<code>Newer</code> and <code>Older</code> links are, of course, still there.</p>
<p>Check the <a href="https://gist.github.com/Stanko/4e379a72715fc596c1cc">gist with the code</a>.</p>
<p>You can see it at the bottom of this website, or just check the screenshot below:</p>
<p><img src="/img/projects/jekyll-pagination.png" alt="Custom Jekyll pagination" /></p>

    </content>

	</entry>
	<entry xml:lang="en">
		<title>Hello World</title>
		<published>2016-02-21T00:00:00+00:00</published>
		<updated>2016-02-21T00:00:00+00:00</updated>
		<link href="https://muffinman.io/blog/hello-world/" type="text/html"/>
		<id>https://muffinman.io/blog/hello-world/</id>
    <author>
      <name>Stanko</name>
    </author>
		<content type="html"><p>Everything starts with a <code>Hello World</code> so does this blog.</p>
<p>In the first couple of weeks, everything will be under heavy development, until I get it the way I want.</p>
<p>As I really enjoy making stuff, I decided to try to make small JavaScript or CSS (SASS) plugin/script every week.
Those are going to be both big and small, proof of concepts and production ready stuff.</p>

    </content>

	</entry>
</feed>
