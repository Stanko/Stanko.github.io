<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Muffin Man's writings</title>
 <link href="http://stanko.github.io/atom.xml" rel="self"/>
 <link href="http://stanko.github.io/"/>
 <updated>2017-06-26T10:01:42+00:00</updated>
 <id>http://stanko.github.io</id>
 <author>
   <name>Stanko</name>
   <email>stanko.tadic@gmail.com</email>
 </author>

 
 <entry>
   <title>waifu2x super resolution image resizer</title>
   <link href="http://stanko.github.io/super-resolution-image-resizer/"/>
   <updated>2017-06-26T00:00:00+00:00</updated>
   <id>http://stanko.github.io/super-resolution-image-resizer</id>
   <content type="html">&lt;p&gt;I use &lt;a href=&quot;/public/img/image-resize/odin-2x.png&quot;&gt;the same wallpaper&lt;/a&gt;&lt;sup&gt;1&lt;/sup&gt; (warning, 6mb file) for a long time now.
Not sure who is the author (if anyone knows the original author, please let me know in the comments).
But with high resolution displays, wallpaper started to look blurry and noisy, so I stopped using it.&lt;/p&gt;

&lt;p&gt;But recently, my girlfriend reminded me of &lt;a href=&quot;http://waifu2x.udp.jp/&quot;&gt;this great website&lt;/a&gt; which super-scales images using magic. Ok, not magic, but it uses “Deep Convolutional Neural Networks”, which is pretty much the same thing. Results are amazing, try it yourself.&lt;/p&gt;

&lt;p&gt;The best thing, website is free to use and project is opensource. Code is available on &lt;a href=&quot;https://github.com/nagadomi/waifu2x&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It supports max scaling of 2x, so if you need more you’ll need to process image multiple times. Or you can dig in the code and add option for arbitrary scaling.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;sup&gt;1&lt;/sup&gt; This is the resized image using waifu2x.&lt;/small&gt;&lt;/p&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;Original, 250x250px jpeg &lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;Image&quot; style=&quot;max-width: 500px; width: 100%;&quot; src=&quot;/public/img/image-resize/rickmorty-250x250.jpg&quot; alt=&quot;Original 250x250px image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Result, 500x500px png&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;Image&quot; style=&quot;max-width: 500px; width: 100%;&quot; src=&quot;/public/img/image-resize/rickmorty-500x500.png&quot; alt=&quot;Resized 2x 500x500px image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you ask me, results are really impressive, kudos to nagadomi!&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;sup&gt;2&lt;/sup&gt; Image is from my favorite animated show &lt;a href=&quot;https://en.wikipedia.org/wiki/Rick_and_Morty&quot;&gt;Rick and Morty&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Animate React component by calling 'setState' in 'componentDidMount'</title>
   <link href="http://stanko.github.io/react-rerender-in-component-did-mount/"/>
   <updated>2017-06-23T00:00:00+00:00</updated>
   <id>http://stanko.github.io/react-rerender-in-component-did-mount</id>
   <content type="html">&lt;p&gt;On the front end, we do a lot of animations. Most of the simple animations I create by using CSS transitions.
Either I will change class or inline style of the element, and define transitions in CSS file.&lt;/p&gt;

&lt;p&gt;Easiest way to do this in React is to render initial state, and then when it renders, change the state to apply class or style to animate. The easiest way to do it in React is to change state in &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt;.
Setting state in &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt; is considered to be anti-pattern, as it forces rerender and can lead to property/layout thrashing. But in our case, that is exactly what we want to do.&lt;/p&gt;

&lt;p&gt;When we do that, we hit the wall - only second state is rendered and there is no transition between two states. It happens because of browsers optimization - &lt;strong&gt;browsers are not rerendering stuff that changed in the same animation frame.&lt;/strong&gt; But they merge changes and render the end result.&lt;/p&gt;

&lt;p&gt;The problem I just described is not React exclusive, but browser related.
Same will happen if we try something like this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.AnimateMe'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'50px'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'250px'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So let’s start with example of the problem.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;animate-component-by-changing-state-in-componentdidmount-doesnt-work&quot;&gt;Animate component by changing state in &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt; doesn’t work&lt;/h2&gt;

&lt;p&gt;The scenario I described above. Element height depends on &lt;code class=&quot;highlighter-rouge&quot;&gt;this.state.animation&lt;/code&gt; property.
It is initially set to &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; and element height should be 50px.
In &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt; we’ll change the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;this.props.animation&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;
and element height should be 250px. As we added transition, it should animate.&lt;/p&gt;

&lt;p&gt;But it doesn’t as all of this happens really fast, and browser decides to merge changes
and render only the end result. This way our element immediately gets height of 250px.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AnimateMe&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#eee'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1px solid black'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'all 2s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Animate&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;iframe height=&quot;400px&quot; scrolling=&quot;no&quot; src=&quot;//codepen.io/stanko/embed/preview/XgaNyq/?height=400&amp;amp;theme-id=light&amp;amp;default-tab=result&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot;&gt;
See the Pen &lt;a href=&quot;http://codepen.io/stanko/pen/XgaNyq/&quot;&gt;Counting sheep&lt;/a&gt; by Stanko (&lt;a href=&quot;http://codepen.io/stanko&quot;&gt;@stanko&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;

&lt;h2 id=&quot;solution-add-a-short-timeout&quot;&gt;Solution, add a short timeout&lt;/h2&gt;

&lt;p&gt;I’ve run multiple times into this problem, but I was lazy to dig deeper and find the real reason why it is happening. My solution was to add a timeout, first I tried immediate timeout (&lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout(fn, 0)&lt;/code&gt;), but alas, it didn’t work in some browsers (as it happened too fast again and browser did their optimizations). Then I increased it to the magical value 50 (&lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout(fn, 50)&lt;/code&gt;), and it worked in every browser.&lt;/p&gt;

&lt;p&gt;Now I get the reason why it works. Because 50ms is larger than animation frame (which is around 16ms to achieve 60fps).&lt;/p&gt;

&lt;p&gt;&lt;small&gt;(I’ll show you just the part of the code that is changed)&lt;/small&gt;&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Added timeout&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ANIMATION_TIMEOUT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ANIMATION_TIMEOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;iframe height=&quot;400px&quot; scrolling=&quot;no&quot; src=&quot;//codepen.io/stanko/embed/preview/WOERrE/?height=400&amp;amp;theme-id=light&amp;amp;default-tab=result&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot;&gt;
See the Pen &lt;a href=&quot;http://codepen.io/stanko/pen/WOERrE/&quot;&gt;Counting sheep&lt;/a&gt; by Stanko (&lt;a href=&quot;http://codepen.io/stanko&quot;&gt;@stanko&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;

&lt;p&gt;So this is cross browser solution, but I always cringe a little when I’m forced to use timeouts like this. And I have been talking about animation frames a lot, so why don’t we try that next?&lt;/p&gt;

&lt;h2 id=&quot;using-requestanimationframe-insted-on-timeout&quot;&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;requestAnimationFrame&lt;/code&gt; insted on timeout&lt;/h2&gt;

&lt;p&gt;We’ll just replace timeout with &lt;code class=&quot;highlighter-rouge&quot;&gt;requestAnimationFrame&lt;/code&gt; and it should work.
But not in Firefox :( to make things worse, sometimes it does, and sometimes doesn’t.
My guess that sometimes it gets squeezed in to the same animation frame.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;(Again just the part of the code that is changed)&lt;/small&gt;&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Added requestAnimationFrame&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;requestAnimationFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;iframe height=&quot;400px&quot; scrolling=&quot;no&quot; src=&quot;//codepen.io/stanko/embed/preview/JJyEoz/?height=400&amp;amp;theme-id=light&amp;amp;default-tab=result&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot;&gt;
See the Pen &lt;a href=&quot;http://codepen.io/stanko/pen/JJyEoz/&quot;&gt;Counting sheep&lt;/a&gt; by Stanko (&lt;a href=&quot;http://codepen.io/stanko&quot;&gt;@stanko&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;

&lt;p&gt;So now we need to make sure our two states belong to different animation frames each.&lt;/p&gt;

&lt;h2 id=&quot;nested-requestanimationframe-to-the-rescue&quot;&gt;Nested &lt;code class=&quot;highlighter-rouge&quot;&gt;requestAnimationFrame&lt;/code&gt; to the rescue&lt;/h2&gt;

&lt;p&gt;Idea is to separate renders of two states to different animation frames.
As we are not going to wrap React’s &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; method into animation frame,
we need to nest them instead in &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This way we guarantee first render won’t be merged together with the second one.
Problem we had in Firefox is now gone.&lt;/p&gt;

&lt;p&gt;This looks hacky, but I think it is a legit solution. Instead of trying to get a &lt;em&gt;magic&lt;/em&gt;
value for timeout, just use native methods that browsers provide.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;(Again just the part of the code that is changed)&lt;/small&gt;&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Added two nested requestAnimationFrames&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;requestAnimationFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Firefox will sometimes merge changes that happened here&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;requestAnimationFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;iframe height=&quot;400px&quot; scrolling=&quot;no&quot; src=&quot;//codepen.io/stanko/embed/preview/JJyEXq/?height=400&amp;amp;theme-id=light&amp;amp;default-tab=result&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot;&gt;
See the Pen &lt;a href=&quot;http://codepen.io/stanko/pen/JJyEXq/&quot;&gt;Counting sheep&lt;/a&gt; by Stanko (&lt;a href=&quot;http://codepen.io/stanko&quot;&gt;@stanko&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;

&lt;h2 id=&quot;finally-put-it-in-a-helper&quot;&gt;Finally, put it in a helper&lt;/h2&gt;

&lt;p&gt;To make things a bit cleaner, I extract this to a helper function and then use whenever I need it.
This can be used in our React examples but also with any other framework or vanilla JavaScript.&lt;/p&gt;

&lt;p&gt;If you support browsers without &lt;code class=&quot;highlighter-rouge&quot;&gt;requestAnimationFrame&lt;/code&gt; be sure to polyfill it. Paul Irish has a great one  &lt;a href=&quot;https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Start animation helper using nested requestAnimationFrames&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;startAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;requestAnimationFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;requestAnimationFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;small&gt;(Our &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt; code using helper)&lt;/small&gt;&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// You'll need to import startAnimation at the top of the file&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;startAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;at-the-end&quot;&gt;At the end&lt;/h2&gt;

&lt;p&gt;Hope you learned something, and I’m interested to hear if somebody is using different approach to solve this problem. Cheers!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Introducing Marvin</title>
   <link href="http://stanko.github.io/introducing-marvin/"/>
   <updated>2017-05-25T00:00:00+00:00</updated>
   <id>http://stanko.github.io/introducing-marvin</id>
   <content type="html">&lt;p&gt;I’m happy to announce &lt;a href=&quot;https://github.com/workco/marvin&quot;&gt;Marvin&lt;/a&gt;, boilerplate for kicking off React/Redux applications.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/workco/marvin&quot;&gt;&lt;img src=&quot;/public/img/marvin.jpg&quot; alt=&quot;Marvin on Github&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically my &lt;a href=&quot;/webpack-2-react-redux/&quot;&gt;boilerplate&lt;/a&gt; became Work &amp;amp; Co’s internal project. It is meant to be a starting point for our React projects. This way faster development is assured along with higher quality code. It is open source, and external contributions are welcome.&lt;/p&gt;

&lt;p&gt;Name comes from a fictional character Marvin, android from the The Hitchhiker’s Guide to the Galaxy book as a homage to it’s author Douglas Adams.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>React scroll decorator</title>
   <link href="http://stanko.github.io/react-scroll-position-decorator/"/>
   <updated>2017-05-17T00:00:00+00:00</updated>
   <id>http://stanko.github.io/react-scroll-position-decorator</id>
   <content type="html">&lt;p&gt;I love JavaScript decorators. One that I copy to every React project is scroll decorator.
It is fairly simple way of injecting scroll position to react components. This way you can handle scroll using react lifecycle.&lt;/p&gt;

&lt;p&gt;This decorator is not listening to a scroll event, as that is the performance killer (especially when you push it to react lifecycle). Instead, it is using interval to check if scroll position has changed. To keep it performant, I’m using &lt;code class=&quot;highlighter-rouge&quot;&gt;requestAnimationFrame&lt;/code&gt;. Interval is only there to throttle animation frame from triggering too often.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Please note that it still may cause performance issues if you apply it to a large number of components. Personally, I never had to apply it to a more than three of four per page.&lt;/p&gt;

&lt;p&gt;So here it is:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;withScroll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ComposedComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ScrollDecorator&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Initial scroll position&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;scrollPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getWindowScrollTop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Bind handlers&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleInterval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleRequestAnimationFrame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleRequestAnimationFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;componentWillMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 50 times per second, change to your needs&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;INTERVAL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;intervalID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;INTERVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;componentWillUnmount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Remove and reset interval/animationFrame&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;clearInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;intervalID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;cancelAnimationFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;intervalID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;getWindowScrollTop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Get scroll position, with IE fallback&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pageYOffset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;documentElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scrollTop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;handleInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Interval is only used to throttle animation frame&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;cancelAnimationFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requestAnimationFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleRequestAnimationFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;handleRequestAnimationFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scrollPosition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newScrollPosition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getWindowScrollTop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Update the state only when scroll position is changed&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newScrollPosition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scrollPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;scrollPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newScrollPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scrollPosition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ComposedComponent&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;scrollPosition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scrollPosition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;withScroll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;usage&quot;&gt;Usage&lt;/h3&gt;

&lt;p&gt;Import the decorator and apply it to your component, easy-peasy.&lt;/p&gt;

&lt;p&gt;This will inject &lt;code class=&quot;highlighter-rouge&quot;&gt;scrollPosition&lt;/code&gt; to it’s props.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;withScroll&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./scroll-decorator'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;withScroll&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CoolComponent&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scrollPosition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Current&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scroll&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scrollPosition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Time Pills tracks, stems, presets, loops and midi</title>
   <link href="http://stanko.github.io/time-pills-tracks-stems/"/>
   <updated>2017-05-14T00:00:00+00:00</updated>
   <id>http://stanko.github.io/time-pills-tracks-stems</id>
   <content type="html">&lt;p&gt;Friends of mine from the band &lt;a href=&quot;https://soundcloud.com/timepills&quot;&gt;Time Pills&lt;/a&gt; opensourced bunch of their tracks. You can find them on &lt;a href=&quot;https://github.com/nndmlsvc/time-pills&quot;&gt;GitHub&lt;/a&gt;. They are looking forward to having them remixed by creative people and sharing it with the world&lt;/p&gt;

&lt;p&gt;Repo contains all of the tracks, stems, presets, loops and even midi files.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://soundcloud.com/timepills&quot;&gt;
  &lt;img class=&quot;Image Image--small&quot; src=&quot;/public/img/timepills.jpg&quot; alt=&quot;Time Pills SoundCloud profile&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Be sure to check them on &lt;a href=&quot;https://soundcloud.com/timepills&quot;&gt;SoundCloud&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Work&amp;Co Tech Meetup Vol 6</title>
   <link href="http://stanko.github.io/work-co-tech-meetup-vol-6/"/>
   <updated>2017-05-09T00:00:00+00:00</updated>
   <id>http://stanko.github.io/work-co-tech-meetup-vol-6</id>
   <content type="html">&lt;p&gt;Another tech meetup coming up. This time we have three great talks about engineering and project planning. We also have a special guest - &lt;strong&gt;IT girls team&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The IT Girls team will share their advances in promoting the professional development of women in technology in Serbia.&lt;/p&gt;

&lt;p&gt;This one will be held on Tuesday, May 16th at &lt;a href=&quot;https://www.google.com/maps/place/Impact+Hub+Belgrade/@44.8157208,20.460881,17z/data=!3m1!4b1!4m5!3m4!1s0x475a7ab185427a37:0x2344b5ab238871dc!8m2!3d44.815717!4d20.463075&quot;&gt;Impact Hub Belgrade&lt;/a&gt;.
See you there!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.meetup.com/Tech-Meetup-Vol-6/events/239775158/&quot;&gt;
  &lt;img class=&quot;Image Image--large&quot; src=&quot;/public/img/meetup-vol-6/poster.jpg&quot; alt=&quot;Work&amp;amp;Co Meetup Tech Meetup Vol 6&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check the details and sign up at &lt;a href=&quot;https://www.meetup.com/Tech-Meetup-Vol-6/events/239775158/&quot;&gt;meetup.com page&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;talks&quot;&gt;Talks&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Docker IRL, &lt;strong&gt;Miloš Pavlićević&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Find out how to incorporate Docker into your deployment/delivery process, with images! (pun intended)&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/public/pdf/Milos - Docker-IRL.pdf&quot;&gt;Slides&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Javascript Unit Testing, &lt;strong&gt;Sarah Mogin&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Learn the value of testing your Javascript applications and the tools and techniques for effective testing. We’ll focus on how to test React components, selectors, reducers, and sagas using the Jest and Enzyme libraries. &lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/public/pdf/Sarah - UnitTesting.pdf&quot;&gt;Slides&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Introduction to React Native, &lt;strong&gt;Zeh Fernando&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;We had last minute change, and replaced Nemanja’s talk (Plan Smart) with Zeh’s great introduction to React Native.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/public/pdf/Zeh - Introduction to React Native.pdf&quot;&gt;Slides&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;photos&quot;&gt;Photos&lt;/h3&gt;

&lt;p&gt;&lt;img class=&quot;Image&quot; src=&quot;/public/img/meetup-vol-6/audience.jpg&quot; alt=&quot;Meetup audience&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;DualImage&quot;&gt;
  &lt;div&gt;
    &lt;img class=&quot;Image&quot; src=&quot;/public/img/meetup-vol-6/sarah.jpg&quot; alt=&quot;Sarah speaking about JavaScript testing&quot; /&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;img class=&quot;Image&quot; src=&quot;/public/img/meetup-vol-6/milos.jpg&quot; alt=&quot;Milos AKA Docker overlord&quot; /&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img class=&quot;Image&quot; src=&quot;/public/img/meetup-vol-6/zeh.jpg&quot; alt=&quot;React Native introducion by Zeh&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Nicer git log</title>
   <link href="http://stanko.github.io/nicer-git-log/"/>
   <updated>2017-04-25T00:00:00+00:00</updated>
   <id>http://stanko.github.io/nicer-git-log</id>
   <content type="html">&lt;p&gt;Just a short one. I want to share a simple command to display nicer &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt; in the terminal. &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt; has &lt;code class=&quot;highlighter-rouge&quot;&gt;--pretty=format&lt;/code&gt; option built-in, we are just going to pass formatting to it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And it looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/nicer-git-log.png&quot; alt=&quot;Nicer git log&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then add it to your &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt; as an alias (I’m using &lt;code class=&quot;highlighter-rouge&quot;&gt;glog&lt;/code&gt;) and that’s it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alias glog=&quot;git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset'&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Being a tech lead, the thing I miss the most</title>
   <link href="http://stanko.github.io/being-a-tech-lead/"/>
   <updated>2017-03-09T00:00:00+00:00</updated>
   <id>http://stanko.github.io/being-a-tech-lead</id>
   <content type="html">&lt;p&gt;I started leading teams relatively early in my career.
Mentoring and leading younger developers is something I tremendously enjoy.
But there is one thing I really miss about being a “regular” developer.&lt;/p&gt;

&lt;p&gt;And that is - being able to put my headphones, play some rock ‘n’ roll,
and code for a couple of hours without any distractions.&lt;/p&gt;

&lt;p&gt;Something that is almost impossible today. I’m not complaining,
but the truth is that I really miss it.
Luckily, I can fulfill my geek needs working on pet projects.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>React animate height (slide up/down) component</title>
   <link href="http://stanko.github.io/react-animate-height-slide-up-down/"/>
   <updated>2017-03-06T00:00:00+00:00</updated>
   <id>http://stanko.github.io/react-animate-height-slide-up-down</id>
   <content type="html">&lt;p&gt;Most JavaScript developers used jQuery’s &lt;code class=&quot;highlighter-rouge&quot;&gt;.slideUp()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.slideDown()&lt;/code&gt; methods,
and got used to them. As component based frameworks usually do not include such functionality,
the first logic choice is to turn to CSS. But alas, CSS transitions do not work with &lt;code class=&quot;highlighter-rouge&quot;&gt;height: auto&lt;/code&gt;.
(Transitions can do a tween only between two numeric values.)&lt;/p&gt;

&lt;p&gt;As we use this a lot in our company, I tried to find React component that does it.
Found a couple, didn’t like them, as most of them rely on a tone of dependencies.
Again, I decided to write my own - small, fast and with no dependencies.&lt;/p&gt;

&lt;h2 id=&quot;demo&quot;&gt;Demo&lt;/h2&gt;

&lt;p&gt;You can see it live &lt;a href=&quot;https://stanko.github.io/react-animate-height/&quot;&gt;here&lt;/a&gt;.
Same page has the documentation and links to the npm and GitHub.&lt;/p&gt;

&lt;p&gt;Component can animate from (and to) &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; (collapsed), &lt;code class=&quot;highlighter-rouge&quot;&gt;auto&lt;/code&gt; (expanded),
and to any specific value in pixels.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;Install it from npm&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install --save react-animate-height
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;import it in your React project,
and wrap the content you want to animate in it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import AnimateHeight from 'react-animate-height';

&amp;lt;AnimateHeight
  duration={ 500 }
  height={ 'auto' }&amp;gt;
  &amp;lt;h1&amp;gt;Your content goes here&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;Put as many React or HTML components here.&amp;lt;/p&amp;gt;
&amp;lt;/AnimateHeight&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For more detailed documentation and all props explained,
check the &lt;a href=&quot;https://github.com/Stanko/react-animate-height&quot;&gt;GitHub repo&lt;/a&gt;,&lt;/p&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;/h2&gt;

&lt;p&gt;Component is using CSS transitions, but with a small trick to make it work.
We mentioned that transitions only work between two numeric values.
We’ll replace &lt;code class=&quot;highlighter-rouge&quot;&gt;auto&lt;/code&gt; with numeric value just before transition happens.&lt;/p&gt;

&lt;p&gt;There are three possible cases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Specific height to the other specific height&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;This is the easiest one. Element will have &lt;code class=&quot;highlighter-rouge&quot;&gt;overflow: hidden&lt;/code&gt; and translate from
one height value to the other. Piece of cake.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Specific height (0 included) to auto&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;This one is a bit more interesting. As we can’t transition to &lt;code class=&quot;highlighter-rouge&quot;&gt;auto&lt;/code&gt;,
component will take the content height, apply it to the element, and transition will happen.
But important thing is that after the transition is complete,
component will reset &lt;code class=&quot;highlighter-rouge&quot;&gt;height&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;auto&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;overflow&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;visible&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;This is important if you add more content to the component, it will natively grow.
As well for the potential absolute elements that you want to go outside of the container.
Note that when specific height is applied element will always have &lt;code class=&quot;highlighter-rouge&quot;&gt;overflow: hidden&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Auto to specific height (0 included)&lt;/strong&gt;
Similar to the previous case but reversed. Component will grab the expanded height and
apply it to the element. Then with a timeout of 0, apply specific height.
(Check &lt;a href=&quot;/talks-i-like/#what-the-heck-is-the-event-loop-anyway-brsmallphilip-roberts-2014small&quot;&gt;this&lt;/a&gt; if you are confused about the timeout of 0.) Again, transition will work as it goes between two numeric values.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I guess everyone took slide up/down for granted, but in the end there is a little
logic that needs to be put in to make it work properly.
On the other hand some people are solving it by pilling up the 3rd party code.
Please, when you are open sourcing a library, keep it small and simple!&lt;/p&gt;

&lt;p&gt;Hope you’ll use it!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Couple of talks I really liked</title>
   <link href="http://stanko.github.io/talks-i-like/"/>
   <updated>2017-03-05T00:00:00+00:00</updated>
   <id>http://stanko.github.io/talks-i-like</id>
   <content type="html">&lt;p&gt;In this post you can find seven talks I really liked in no particular order, most of them development related. I’ll explain why I liked them, and why I should recommend watching every single one of them.&lt;/p&gt;

&lt;p&gt;Every talks is embedded, but link to a website or youtube is included as well.&lt;/p&gt;

&lt;p&gt;Please comment with the talks you think are worth watching.&lt;/p&gt;

&lt;!--more--&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;wat-gary-bernhardt-2012&quot;&gt;Wat &lt;br /&gt;&lt;small&gt;Gary Bernhardt, 2012&lt;/small&gt;&lt;/h3&gt;

&lt;p&gt;The talk I shared too many times. Gary talks about weird stuff in Ruby and JavaScript.
It is witty and educational at the same time. I guarantee it will make you laugh.
Only four minutes long, give it a try.&lt;/p&gt;

&lt;video poster=&quot;/public/img/wat.png&quot; preload=&quot;none&quot; controls=&quot;&quot;&gt;
&lt;source src=&quot;/public/videos/wat.mov&quot; /&gt;
&lt;/video&gt;

&lt;p&gt;&lt;a href=&quot;https://www.destroyallsoftware.com/talks/wat&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;live-react-hot-reloading-with-time-travel-dan-abramov-2015&quot;&gt;Live React: Hot Reloading with Time Travel &lt;br /&gt;&lt;small&gt;Dan Abramov, 2015&lt;/small&gt;&lt;/h3&gt;

&lt;p&gt;We all know Dan Abramov and what he has done for the React/JS community.
This is his talk before he became famous and started working for Facebook.
It is about hot reloading in React, which he made mainstream.&lt;/p&gt;

&lt;p&gt;It is best described with a YouTube comment: “All that was missing was the mic drop at the end.﻿”&lt;/p&gt;

&lt;div class=&quot;AspectRatioVideo&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/xsSnOQynTHs?rel=0?ecver=2&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=xsSnOQynTHs&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;what-the-heck-is-the-event-loop-anyway-philip-roberts-2014&quot;&gt;What the heck is the event loop anyway? &lt;br /&gt;&lt;small&gt;Philip Roberts, 2014&lt;/small&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Every&lt;/em&gt; JavaScript developer should watch this. Philip explained what event loop is, how it works, in a simple language and beautiful examples.&lt;/p&gt;

&lt;div class=&quot;AspectRatioVideo&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/8aGhZQkoFbQ?rel=0?ecver=2&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=8aGhZQkoFbQ&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;the-early-days-of-id-softwarejohn-romero-2016&quot;&gt;The Early Days of id Software&lt;br /&gt;&lt;small&gt;John Romero, 2016&lt;/small&gt;&lt;/h3&gt;

&lt;p&gt;Wow! This reminded me why I started programming, and how I ended up where I am today.
I started with the only one thing in mind - to write games.&lt;/p&gt;

&lt;p&gt;Historical talk about couple of kids who wanted to do exactly that.
How they started, what they principles were. For those who don’t know id Software is behind
Doom, Quake, Commander Keen, Wolfenstein, and many more games.
Don’t get scared because it is almost one hour long, talk itself if about thirty minutes.&lt;/p&gt;

&lt;p&gt;It got me thinking about writing games again,
and hopefully I will have a blog post about that soon.&lt;/p&gt;

&lt;div class=&quot;AspectRatioVideo&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/E2MIpi8pIvY?rel=0?ecver=2&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=E2MIpi8pIvY&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;adjusting-the-dials-in-the-circuits-of-the-human-brain-with-deep-by-brain-stimulation-dr-andres-lozan-2016&quot;&gt;Adjusting the Dials in the Circuits of the Human Brain with Deep by Brain Stimulation&lt;br /&gt; &lt;small&gt;Dr Andres Lozan, 2016&lt;/small&gt;&lt;/h3&gt;

&lt;p&gt;I watched this one live and the ng-conf 2016, and it blew me away.
It has nothing to do with a development, but medicine.
How doctors are able to adjust brain functions by applying electricity to a certain parts.&lt;/p&gt;

&lt;p&gt;It still sounds like a science fiction to me.&lt;/p&gt;

&lt;div class=&quot;AspectRatioVideo&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/IEMLGrKJeK0?rel=0?ecver=2&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=IEMLGrKJeK0&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;heres-what-happens-when-an-18-year-old-buys-a-mainframe-connor-krukosky-2016&quot;&gt;Here’s What Happens When an 18 Year Old Buys a Mainframe &lt;br /&gt;&lt;small&gt;Connor Krukosky, 2016&lt;/small&gt;&lt;/h3&gt;

&lt;p&gt;Title is self-explanatory - young enthusiast got his hands on an old mainframe.&lt;/p&gt;

&lt;div class=&quot;AspectRatioVideo&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/45X4VP8CGtk?rel=0?ecver=2&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=45X4VP8CGtk&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;do-schools-kill-creativitysir-ken-robinson-2007&quot;&gt;Do schools kill creativity?&lt;br /&gt;&lt;small&gt;Sir Ken Robinson, 2007&lt;/small&gt;&lt;/h3&gt;

&lt;p&gt;Last, but not the least. This is the most watched TED talk on YouTube.
Sir Ken Robinson needs no introduction, and he talks about the school system,
and how it may be killing kid’s creativity.&lt;/p&gt;

&lt;div class=&quot;AspectRatioVideo&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/iG9CE55wbtY?rel=0?ecver=2&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=iG9CE55wbtY&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Hope you found any of these interesting to watch, and that you learned something new.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Mobile Chrome vh units fix</title>
   <link href="http://stanko.github.io/mobile-chrome-vh-units-fix/"/>
   <updated>2017-01-21T00:00:00+00:00</updated>
   <id>http://stanko.github.io/mobile-chrome-vh-units-fix</id>
   <content type="html">&lt;p&gt;If you ever used &lt;code class=&quot;highlighter-rouge&quot;&gt;vh&lt;/code&gt; units and tested your work on mobile Chrome (iOS and Android),
you probably were annoyed by page jumping when you scroll.&lt;/p&gt;

&lt;p&gt;As you probably know &lt;code class=&quot;highlighter-rouge&quot;&gt;vh&lt;/code&gt; units are based on the window height.
When you scroll, Chrome’s address bar disappears and chrome actually changes window height.
Also triggers window resize event.
So when it does happen it changes the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;vh&lt;/code&gt; unit, making your elements resize,
and page jump. On Android, keyboard toggle will do the same.&lt;/p&gt;

&lt;p&gt;Well I made a plain JavaScript library to solve this problem.&lt;/p&gt;

&lt;p&gt;Demo and documentation are available &lt;a href=&quot;https://stanko.github.io/mobile-chrome-vh-fix/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;how-does-it-work&quot;&gt;How does it work?&lt;/h2&gt;

&lt;p&gt;On load, it will get the element and set them fixed height in pixels,
using this formula:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;window height / 100 * given vh value
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Library listens for the window &lt;code class=&quot;highlighter-rouge&quot;&gt;resize&lt;/code&gt; event, and only if both dimensions are changed
(which on mobile means orientation has changed*)
it will recalculate and apply fixed height based on new window height.&lt;/p&gt;

&lt;p&gt;Library will only do this if it detects Chrome on Android or iOS.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;* Android Chrome has a bug, when keyboard pops up, it triggers orientation change.&lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;It accepts one parameter, which is an array of objects.
Every object should have CSS selector and height in &lt;code class=&quot;highlighter-rouge&quot;&gt;vh&lt;/code&gt; units.
All elements that match given selector will be fixed.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.Bears'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Mandatory, CSS selector&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;vh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Mandatory, height in vh units&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.Foxes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;vh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.Horses'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;vh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vhFix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VHChromeFix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;react-component-is-wip&quot;&gt;React Component is WIP&lt;/h2&gt;

&lt;p&gt;I have a React component already done in a another project,
but I need to extract it, and pack it up as a separate &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; package for easier usage.&lt;/p&gt;

&lt;p&gt;Grab the code on &lt;a href=&quot;https://github.com/Stanko/mobile-chrome-vh-fix&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Deploying React (Router) app to the subfolder on server</title>
   <link href="http://stanko.github.io/react-router-subfolder-on-server/"/>
   <updated>2017-01-18T00:00:00+00:00</updated>
   <id>http://stanko.github.io/react-router-subfolder-on-server</id>
   <content type="html">&lt;p&gt;If you ever had to deploy React Router app to the subfolder on the server, you know what the problem is.
Dev server will always launch app on the server root.
And routes will get messed up once you upload it to the server.
Here are two solutions I use in these cases.&lt;/p&gt;

&lt;h2 id=&quot;easy-way-just-use-hashhistory&quot;&gt;Easy way, just use &lt;code class=&quot;highlighter-rouge&quot;&gt;hashHistory&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The easiest way to achieve this is to use &lt;code class=&quot;highlighter-rouge&quot;&gt;hashHistory&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;browserHistory&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { Router hashHistory } from 'react-router';

&amp;lt;Router history={ hashHistory }&amp;gt;
  ...
&amp;lt;/Router&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is the best approach if your subfolder name changes
(for example, if folder name is a build version).
But you’ll have &lt;code class=&quot;highlighter-rouge&quot;&gt;/#/&lt;/code&gt; included in the every URL.
If this bothers you, check the second solution.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Example of the routes&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://yourserver.com/path/to/subfolder/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://yourserver.com/path/to/subfolder/#/about&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://yourserver.com/path/to/subfolder/#/search&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;hard-way-setting-base-path-by-hand&quot;&gt;Hard way, setting base path by hand&lt;/h2&gt;

&lt;p&gt;If you want to keep browser history implementation, you’ll need to change few things.
First, we need to update our routes to include full absolute path to the subfolder.&lt;/p&gt;

&lt;p&gt;I define my routes something like this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;publicPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/path/to/subfolder/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;routeCodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;HOME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;publicPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;SEARCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;publicPath&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ABOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;publicPath&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;about&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once uplodaded to the server any route but root one will return 404 error.
For example, in you try to open &lt;code class=&quot;highlighter-rouge&quot;&gt;http://yourserver.com/path/to/subfolder/about&lt;/code&gt;,
server will look for file (or folder) named &lt;code class=&quot;highlighter-rouge&quot;&gt;about&lt;/code&gt; in the app subfolder.
As it doesn’t exist, it will just fail.&lt;/p&gt;

&lt;p&gt;You’ll need to add simple &lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; file,
in order to tell the server to fallback to our &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; file.
This is the same configuration we would use if the application was on the server root,
just with a different absolute path to our index file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RewriteEngine On
RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -f [OR]
RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -d
RewriteRule ^ - [L]

# Fallback all other routes to index.html
RewriteRule ^ /path/to/subfolder/index.html [L]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now our example routes will look like this&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://yourserver.com/path/to/subfolder/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://yourserver.com/path/to/subfolder/about&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://yourserver.com/path/to/subfolder/search&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;notice-about-webpacks-output---publicpath-configuration&quot;&gt;Notice about webpack’s &lt;code class=&quot;highlighter-rouge&quot;&gt;output -&amp;gt; publicPath&lt;/code&gt; configuration&lt;/h3&gt;

&lt;p&gt;If you are using &lt;code class=&quot;highlighter-rouge&quot;&gt;publicPath&lt;/code&gt; in webpack’s &lt;code class=&quot;highlighter-rouge&quot;&gt;output&lt;/code&gt; object,
make sure you either remove it or update to match your server build path.
Removing it  is easier, as it will create relative links,
which should work with your new configuration.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;publicPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Remove, or update it&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./build'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'app-[hash].js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’m also interested if anyone has different/better ideas, cheers!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Winter Tech Meetup Vol 5</title>
   <link href="http://stanko.github.io/winter-tech-meetup-vol-5/"/>
   <updated>2017-01-12T00:00:00+00:00</updated>
   <id>http://stanko.github.io/winter-tech-meetup-vol-5</id>
   <content type="html">&lt;p&gt;We prepared another tech meetup, this time with four presentations.
There will be a break after the second one.
This should be the biggest one so far, with two guest speakers.&lt;/p&gt;

&lt;p&gt;It will happen on February the 4th, at Belgrade Youth Centre.
Hope to see you there!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.facebook.com/events/171047483377472/&quot;&gt;
  &lt;img class=&quot;Image Image--small&quot; src=&quot;/public/img/winter-meetup-vol-5/poster.jpg&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Visit &lt;a href=&quot;https://www.facebook.com/events/171047483377472/&quot;&gt;Facebook event&lt;/a&gt;
or &lt;a href=&quot;https://www.meetup.com/Tech-Meetup-Vol-5/&quot;&gt;meetup.com page&lt;/a&gt;.
And apply
&lt;a href=&quot;https://docs.google.com/forms/d/e/1FAIpQLSc_HFx5M6rhQYqmXkV5V1dPhkw0-M8L4R-1L7LoN6p2zgfnOA/viewform&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to everyone who participated!&lt;/p&gt;

&lt;h3 id=&quot;slides&quot;&gt;Slides&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/public/pdf/Nikola Pantovic - Pet cula u poslovnom nastupu.pdf&quot;&gt;Five senses in a business performance&lt;/a&gt; - Nikola Pantović&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/public/pdf/Ivan Nikitovic - Go fast with web workers.pdf&quot;&gt;Go fast with Web Workers&lt;/a&gt; - Ivan Nikitović&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/public/pdf/Sasa Ranisavljevic - How to become more professional developer.pdf&quot;&gt;Become more professional developer&lt;/a&gt; - Saša Ranisavljević&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/public/pdf/Stanko Tadic - State of modern JS development.pdf&quot;&gt;State of a modern JavaScript development&lt;/a&gt; - Stanko Tadić (myself)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;photos&quot;&gt;Photos&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/winter-meetup-vol-5/1.jpg&quot; alt=&quot;Nikola Pantović&quot; /&gt;
&lt;img src=&quot;/public/img/winter-meetup-vol-5/2.jpg&quot; alt=&quot;Tech meetup audience&quot; /&gt;
&lt;img src=&quot;/public/img/winter-meetup-vol-5/3.jpg&quot; alt=&quot;Stanko Tadić talking about JavaScript&quot; /&gt;
&lt;img src=&quot;/public/img/winter-meetup-vol-5/4.jpg&quot; alt=&quot;Saša Ranisavljević&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Counting sheep</title>
   <link href="http://stanko.github.io/counting-sheep/"/>
   <updated>2016-12-28T00:00:00+00:00</updated>
   <id>http://stanko.github.io/counting-sheep</id>
   <content type="html">&lt;p&gt;Just something to cheer you up for the holidays :)
I got this idea while I was sick in bed, and had nothing smarter to do.
Pure CSS, no JavaScript at all. Hope you like it, I may add some more details.&lt;/p&gt;

&lt;iframe height=&quot;400px&quot; scrolling=&quot;no&quot; src=&quot;//codepen.io/stanko/embed/BQgZda/?height=400&amp;amp;theme-id=light&amp;amp;default-tab=result&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot;&gt;
See the Pen &lt;a href=&quot;http://codepen.io/stanko/pen/BQgZda/&quot;&gt;Counting sheep&lt;/a&gt; by Stanko (&lt;a href=&quot;http://codepen.io/stanko&quot;&gt;@stanko&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;

&lt;p&gt;Check the code on &lt;a href=&quot;http://codepen.io/stanko/pen/BQgZda/&quot;&gt;codepen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy new year!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Looking forward to the 2017</title>
   <link href="http://stanko.github.io/looking-forward-to-2017/"/>
   <updated>2016-12-21T00:00:00+00:00</updated>
   <id>http://stanko.github.io/looking-forward-to-2017</id>
   <content type="html">&lt;p&gt;2016 was quite a ride.
I just want to write a couple of random things,
to close this year with one last post.&lt;/p&gt;

&lt;h2 id=&quot;work--co&quot;&gt;Work &amp;amp; Co&lt;/h2&gt;

&lt;p&gt;Big news here, my ex-company became a part of &lt;a href=&quot;http://work.co&quot;&gt;Work &amp;amp; Co&lt;/a&gt;.
We’re really excited about that, and I’m looking forward to the great stuff we are going to build.
Our collaboration goes back for a few years now, it was very productive,
and this is a great step forward.&lt;/p&gt;

&lt;p&gt;My current title is a &lt;em&gt;Principal developer&lt;/em&gt; and I’m in charge of a tech team,
here in the Belgrade office.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;winter-meetup&quot;&gt;Winter Meetup&lt;/h2&gt;

&lt;p&gt;We are preparing a new tech meetup, this time a bit bigger one,
with four speakers. I’ll talk about JavaScript, if it is going in the right direction.
About it’s problems, misunderstandings, fear and hate that are involved around it.
Don’t worry, I’ll talk about the good parts too.&lt;/p&gt;

&lt;p&gt;All of the presentations include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Five senses in a business performance - Nikola Pantović&lt;/li&gt;
  &lt;li&gt;Go fast with Web Workers - Ivan Nikitović&lt;/li&gt;
  &lt;li&gt;Become more professional developer - Saša Ranisavljević&lt;/li&gt;
  &lt;li&gt;State of a modern JavaScript development - Stanko Tadić (myself)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It will probably happen on the first Saturday in February of 2017,
but I’ll post updates with the exact date and venue.&lt;/p&gt;

&lt;p&gt;So be sure to come to &lt;em&gt;Work &amp;amp; Co Belgrade Winter Meetup&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;few-articles-i-want-to-share&quot;&gt;Few articles I want to share&lt;/h2&gt;

&lt;p&gt;I rarely find articles that I think are really worth sharing.
But there are two that I like a lot.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://paulgraham.com/wealth.html&quot;&gt;How to Make Wealth&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/Stanko/cb3e287f9ee6b836cdfad5d04a3fb208&quot;&gt;Short guide for Startup Software Engineers in 2nd/3rd World Countries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first one is a cliche in the startup world,.
In case you haven’t read it yet, and you are interested in making a startup, please do.&lt;/p&gt;

&lt;p&gt;The second one, unfortunately, is not online anymore, but I found it cached,
and made a gist copy of it.
It is written by a colleague Serbian, here in Belgrade.
He really puts some light on how startup scene is totally different here,
and in The valley and western world.
To me, it was really an eye opener when I first read it.&lt;/p&gt;

&lt;p&gt;I hope original author won’t mind I shared it. Here are links to the &lt;a href=&quot;http://blog.prng.org/2010/short-guide-startup/&quot;&gt;original blog&lt;/a&gt;,
and the &lt;a href=&quot;http://web.archive.org/web/20150718230004/http://blog.prng.org/2010/short-guide-startup/&quot;&gt;cached version&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;pet-projects&quot;&gt;Pet projects&lt;/h2&gt;

&lt;p&gt;I really enjoy these, and I will continue sharing small projects and libraries,
with a hope that community finds them useful.
Feel free to check my &lt;a href=&quot;https://github.com/Stanko&quot;&gt;GitHub account&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This blog will get updated, hopefully a bit more often.
Btw, this blog is also open source and powered by Jekyll + Travis + Github Pages.&lt;/p&gt;

&lt;p&gt;Other than that I hope to roll out a one or two small mvp products.&lt;/p&gt;

&lt;h2 id=&quot;see-you-next-year&quot;&gt;See you next year&lt;/h2&gt;

&lt;p&gt;This is probably it for this year, it was exhausting, but fun year for me.
Now, I took some days off, to get prepared for the new chapter the 2017 will bring.&lt;/p&gt;

&lt;p&gt;Cheers, and happy holidays!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>React and Redux, Webpack 2 boilerplate</title>
   <link href="http://stanko.github.io/webpack-2-react-redux/"/>
   <updated>2016-11-24T00:00:00+00:00</updated>
   <id>http://stanko.github.io/webpack-2-react-redux</id>
   <content type="html">&lt;p&gt;Currently, I’m working on a relatively small pet project.
While setting it up, I decided to extract a webpack boilerplate from it.&lt;/p&gt;

&lt;p&gt;As whole JS community is moving really fast, I found very hard to
set everything up using Webpack 1.x. One package would ask to update the other,
that would break the third one, then that one… and so on.&lt;/p&gt;

&lt;p&gt;Luckily, I was able to set everything up using Webpack 2.
It is still in beta, but I had no problems so far.&lt;/p&gt;

&lt;p&gt;You can find the &lt;a href=&quot;https://github.com/Stanko/react-redux-webpack2-boilerplate&quot;&gt;boilerplate on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;implemented-features&quot;&gt;Implemented Features&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;React&lt;/li&gt;
  &lt;li&gt;React router&lt;/li&gt;
  &lt;li&gt;Redux&lt;/li&gt;
  &lt;li&gt;Redux Thunk&lt;/li&gt;
  &lt;li&gt;Immutable reducer data&lt;/li&gt;
  &lt;li&gt;Webpack 2 (development and production config)&lt;/li&gt;
  &lt;li&gt;Hot Module Replacement&lt;/li&gt;
  &lt;li&gt;Babel - static props, decorators&lt;/li&gt;
  &lt;li&gt;SASS with autoprefixing&lt;/li&gt;
  &lt;li&gt;Webpack dashboard&lt;/li&gt;
  &lt;li&gt;Linting&lt;/li&gt;
  &lt;li&gt;Included &lt;code class=&quot;highlighter-rouge&quot;&gt;es6-promise&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;isomorphic-fetch&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;File imports relative to the app root&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;planned-features&quot;&gt;Planned features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Redux Dev Tools&lt;/li&gt;
  &lt;li&gt;Generating icon font from SVGs&lt;/li&gt;
  &lt;li&gt;Preview production build&lt;/li&gt;
  &lt;li&gt;Git hooks - lint before commit (or push)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;future-features&quot;&gt;Future features&lt;/h3&gt;
&lt;p&gt;Universal may be added at some point.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Universal rendering&lt;/li&gt;
  &lt;li&gt;Server async data&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;about&quot;&gt;About&lt;/h2&gt;

&lt;p&gt;This boilerplate is a complete, but minimal React application.
It includes reducers (redux), actions (sync and async), routing, SASS…
My goal was to be ready immediately after cloning the repo (and running &lt;code class=&quot;highlighter-rouge&quot;&gt;npm i&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;My plan is to reuse this as much as possible.&lt;/p&gt;

&lt;p&gt;It will updated so make sure you follow the &lt;a href=&quot;https://github.com/Stanko/react-redux-webpack2-boilerplate&quot;&gt;documentation on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Setting up Webpack, Babel and React from scratch - Part 3</title>
   <link href="http://stanko.github.io/setting-up-webpack-babel-and-react-from-scratch-part-3/"/>
   <updated>2016-11-24T00:00:00+00:00</updated>
   <id>http://stanko.github.io/setting-up-webpack-babel-and-react-from-scratch-part-3</id>
   <content type="html">&lt;h2 id=&quot;part-three---also-the-last-part&quot;&gt;Part three - also the last part&lt;/h2&gt;

&lt;p&gt;Other parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/setting-up-webpack-babel-and-react-from-scratch&quot;&gt;Part 1&lt;/a&gt; - Webpack, Babel, React, Router, ESLint&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/setting-up-webpack-babel-and-react-from-scratch-part-2&quot;&gt;Part 2&lt;/a&gt; - SASS, more ES6 goodness (Static props, decorators, deconstruction…)&lt;/li&gt;
  &lt;li&gt;Part 3 - Where to go from here&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;where-to-go-from-here&quot;&gt;Where to go from here&lt;/h2&gt;

&lt;p&gt;I really wanted to continue this series, but unfortunately whole JavaScript / Node community
is moving so fast, that I found really hard to keep these tutorials up to date.
Webpack 2 and React Hot Loader 3 are on the horizon.
Some package versions break the other ones. Usual JavaScript business :)&lt;/p&gt;

&lt;p&gt;So I’ll leave you with a link or two below.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;create-react-app&quot;&gt;Create React App&lt;/h3&gt;

&lt;p&gt;Facebook released &lt;a href=&quot;https://github.com/facebookincubator/create-react-app&quot;&gt;Create React App&lt;/a&gt;.
That is a CLI tool for creating React apps with zero configuration.
It is still missing some features, like universal rendering, decorators, SASS (or LESS), hot reload…
But it is a really solid start, and backed up by the React team.&lt;/p&gt;

&lt;h3 id=&quot;my-webpack-2-boilerplate&quot;&gt;My Webpack 2 boilerplate&lt;/h3&gt;

&lt;p&gt;Also, I just published &lt;a href=&quot;https://github.com/Stanko/react-redux-webpack2-boilerplate&quot;&gt;Webpack 2 boilerplate&lt;/a&gt; on GitHub. It has a lot of nice features, check &lt;a href=&quot;/webpack-2-react-redux&quot;&gt;post about it&lt;/a&gt; on this blog.&lt;/p&gt;

&lt;h2 id=&quot;thanks&quot;&gt;Thanks&lt;/h2&gt;

&lt;p&gt;Hope you found this series useful.
Don’t worry, blog will still be updated, but this series is over for now.&lt;/p&gt;

&lt;p&gt;And before using boilerplates, try making it yourself,
so you understand the flow and the tooling behind it.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Another web development awesome list</title>
   <link href="http://stanko.github.io/another-web-development-awesome-list/"/>
   <updated>2016-11-07T00:00:00+00:00</updated>
   <id>http://stanko.github.io/another-web-development-awesome-list</id>
   <content type="html">&lt;p&gt;People are making &lt;em&gt;awesome&lt;/em&gt; lists on the Git these days.&lt;/p&gt;

&lt;p&gt;I’m spamming our company’s slack dev channel, and someone suggested to put all of those links in one place.
So I created one awesome list as well.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Stanko/awesome-web-development&quot;&gt;Awesome web development&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to contribute!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>My two cents on the new MacBook Pro</title>
   <link href="http://stanko.github.io/my-two-cents-on-the-new-macbook-pro/"/>
   <updated>2016-10-31T00:00:00+00:00</updated>
   <id>http://stanko.github.io/my-two-cents-on-the-new-macbook-pro</id>
   <content type="html">&lt;p&gt;After the recent Apple keynote, it seems that community is not happy with the new MacBook Pro.
Well, I’m not either.&lt;/p&gt;

&lt;p&gt;As for iPhone/iPad, those are toys, I could use pretty much any other modern smartphone/tablet.
But MBP is my working horse, and I was always saying that
it doesn’t matter how much it costs, I would always get it.&lt;/p&gt;

&lt;p&gt;Things have changed…&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;macbook-pro-is-now-a-consumer-machine&quot;&gt;MacBook Pro is now a consumer machine&lt;/h3&gt;

&lt;p&gt;New MacBook Pro really lacks the &lt;strong&gt;pro&lt;/strong&gt; part.&lt;/p&gt;

&lt;p&gt;I do understand that companies revolve around profit,
and it seems that we (developers/geeks) are not Apple’s target audience anymore.
It is hard to say if we ever were. I’m not mad, just disappointed.
There is so many people out there with the same problem,
and I really hope that someone from Apple will try to tackle our issues.&lt;/p&gt;

&lt;p&gt;MacBooks are getting more and more expensive every year, with kinda outdated hardware
and shiny stuff I don’t need. Also removing the option to upgrade anything really sucks.
3k machine with max 16gigs of RAM?!
Touchbar is a gimmick - I don’t give a shit about emoji touch screen on my keyboard.
I want physical keys that I don’t have to look at when I type.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/touchbar.png&quot; alt=&quot;Emojis? Really?&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Making things thinner and lighter is nice, but don’t sacrifice power or keyboard for it.
Same goes for iPhone, if they just made it 2-3mm thicker,
and use all of that space for the bigger battery.
But it ain’t gonna happen.&lt;/p&gt;

&lt;p&gt;I’m writing this on 2015 MBP which has pretty much the same hardware like
my old (upgraded) 2010 MBP - i7, 16gigs, SSD.
Apple lost it’s leadership position when it comes to the professional hardware.&lt;/p&gt;

&lt;p&gt;First time in a long time, I’m thinking about alternatives.
Not that I’m going to throw away my laptop and get a new one,
but I feel like a need a plan if they continue this way.&lt;/p&gt;

&lt;p&gt;Razor laptops seem really sweet, but then I need to choose between Linux or Windows.
I consider myself being a UNIX guy, so Linux is clearly a way to go,
but as I’m working in a digital agency Sketch and Adobe are a must.
Maybe run them in a virtual machine? We’ll see where it goes.&lt;/p&gt;

&lt;p&gt;To be honest, I will continue to use this MacBook I own.
As I would really like to stay on the OSX - polished UNIX system.
But, I hate that they are pushing this down our throats -
we made this, you’ll buy it, as there is no alternative.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Setting up Travis, Jekyll and GitHub pages</title>
   <link href="http://stanko.github.io/travis-jekyll-and-github-pages/"/>
   <updated>2016-10-24T00:00:00+00:00</updated>
   <id>http://stanko.github.io/travis-jekyll-and-github-pages</id>
   <content type="html">&lt;p&gt;As I already mentioned, GitHub pages do not work with the Jekyll plugins.
It is a security measure. So I researched it a bit, and colleague of mine
proposed a simple solution - Travis CI.&lt;/p&gt;

&lt;p&gt;There is a great repo with instructions how to set everything up -
&lt;a href=&quot;https://github.com/mfenner/jekyll-travis&quot;&gt;jekyll-travis&lt;/a&gt;.
But few steps are kinda confusing, and it took me 10 failed builds to make
it work. So I’ll try to help you with those.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I copied the steps from the original repo and updated steps where I got stuck.
Be sure to check the original readme as well.&lt;/p&gt;

&lt;h2 id=&quot;flow&quot;&gt;Flow&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;When you push to your GitHub repo, it triggers Travis&lt;/li&gt;
  &lt;li&gt;Travis starts up a virtual machine and installs all required software (mostly Ruby gems)&lt;/li&gt;
  &lt;li&gt;We use a custom rake task to tell travis how to build the Jekyll site and push the updated content back to Github&lt;/li&gt;
  &lt;li&gt;Travis clones a different branch (either &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;, depending on the kind of Github repo) that holds the static HTML pages&lt;/li&gt;
  &lt;li&gt;Travis runs &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt; with the destination in the other branch&lt;/li&gt;
  &lt;li&gt;Travis does a &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt; of the other branch&lt;/li&gt;
  &lt;li&gt;Github Pages starts serving the updates site&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;steps-to-make-it-work&quot;&gt;Steps to make it work&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Move your Jekyll source files to the &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt; branch (name it as you like).
We’ll use &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch to host generated HTML website.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure you have enabled your source repo in the Travis CI admin dashboard so that the webhook is triggered&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a GitHub Personal Access Token from you &lt;a href=&quot;https://github.com/settings/tokens&quot;&gt;profile page&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you haven’t already, create a &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;, and add &lt;code class=&quot;highlighter-rouge&quot;&gt;rake&lt;/code&gt; gem to it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://production.cf.rubygems.org/&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rake&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 10.1.1&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-paginate&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-archives&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;small&gt;
We have seen &lt;a href=&quot;http://blog.travis-ci.com/2013-05-20-network-timeouts-build-retries/&quot;&gt;intermittent timeouts&lt;/a&gt; fetching gems from Rubygems.org. &lt;code class=&quot;highlighter-rouge&quot;&gt;install: bundle install&lt;/code&gt; lets Travis CI automatically retry, and we are using &lt;code class=&quot;highlighter-rouge&quot;&gt;source &quot;http://production.cf.rubygems.org/&quot;&lt;/code&gt; in Gemfile to point to a different repository.
&lt;/small&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Install the travis gem (&lt;code class=&quot;highlighter-rouge&quot;&gt;gem install travis&lt;/code&gt;) and create &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt;.
It will tell Travis what to install and how build our Jekyll site.
Add following data to it.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2.3.1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle install&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle exec rake site:deploy --quiet&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;secure&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;YOUR_ENCRYPTED_INFO&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Replace the &lt;code class=&quot;highlighter-rouge&quot;&gt;YOUR_ENCRYPTED_INFO&lt;/code&gt; with the output of the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;travis encrypt &lt;span class=&quot;s1&quot;&gt;'GIT_NAME=&quot;Your Username&quot; GIT_EMAIL=&quot;your@email.com&quot; GH_TOKEN=GITHUB_PERSONAL_TOKEN_YOU_CREATED'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure you add &lt;code class=&quot;highlighter-rouge&quot;&gt;vendor&lt;/code&gt; to your .gitignore as Travis CI is vendoring the Ruby gems there. The &lt;code class=&quot;highlighter-rouge&quot;&gt;vendor&lt;/code&gt; folder should also be excluded in the Jekyll &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the following to your Jekyll &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file: &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;repo&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;branch&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# GitHub&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;             &lt;span class=&quot;s&quot;&gt;Stanko&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;                 &lt;span class=&quot;s&quot;&gt;Stanko.github.io&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;               &lt;span class=&quot;s&quot;&gt;source&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Jekyll source / destination&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;               &lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;          &lt;span class=&quot;s&quot;&gt;_site&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Add the contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;Rakefile&lt;/code&gt; to your Jekyll Rakefile (or replace it).
The provided &lt;a href=&quot;https://github.com/Stanko/Stanko.github.io/blob/source/Rakefile&quot;&gt;Rakefile&lt;/a&gt;
 has some additional commands, but the important one here is &lt;code class=&quot;highlighter-rouge&quot;&gt;rake site:deploy&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And you are done! That should be it, of course you need to create a Travis CI account.
Travis is free for the open source projects. If you are using it for the commercial stuff,
play fair and check their payed tiers.&lt;/p&gt;

&lt;p&gt;Build for my blog takes about a minute.
It depends of the software Travis installs on every build.&lt;/p&gt;

&lt;p&gt;Now you can use custom plugins and asset pipeline with Jekyll. Cheers!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Blog redesign and new features</title>
   <link href="http://stanko.github.io/new-design-and-features/"/>
   <updated>2016-10-20T00:00:00+00:00</updated>
   <id>http://stanko.github.io/new-design-and-features</id>
   <content type="html">&lt;p&gt;As you probably noticed I redesigned my blog and added some new features.
This is a list of the new stuff.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New design&lt;/li&gt;
  &lt;li&gt;Category pages&lt;/li&gt;
  &lt;li&gt;Comments&lt;/li&gt;
  &lt;li&gt;Search&lt;/li&gt;
  &lt;li&gt;Reading time&lt;/li&gt;
  &lt;li&gt;Share buttons&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;new-design&quot;&gt;New design&lt;/h3&gt;

&lt;p&gt;My friend Nikola, from &lt;a href=&quot;http://mida.rs&quot;&gt;MIDA&lt;/a&gt; digital agency, helped me a lot with this one.
I gave him a basic idea what I wanted, and he came up with this simple but beautiful design.
It might go through some smaller changes in the future, but nothing major.
Hope you like it.&lt;/p&gt;

&lt;h3 id=&quot;category-pages&quot;&gt;Category pages&lt;/h3&gt;

&lt;p&gt;These are accessible from the main menu, or by clicking on the category link at the end of the post.
Obviosly, they list all of the posts for the selected category.
Plugin I used is &lt;a href=&quot;https://github.com/jekyll/jekyll-archives&quot;&gt;jekyll-archives&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;comments&quot;&gt;Comments&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://staticman.net/&quot;&gt;Staticman&lt;/a&gt; brings user generated content to the static site generators.
You can add their bot to your repo, and then hitting specific endpoint will
generate a pull request (or push directly) with the data user entered.
My comments are going through pull requests, which enables me to moderate them.&lt;/p&gt;

&lt;h3 id=&quot;search&quot;&gt;Search&lt;/h3&gt;

&lt;p&gt;Also accessible from the main menu. Search is done by JavaScript and it
goes through JSON object with post titles.
It uses fuzzy search algorithm, so it will find every title
that has all of the letters you entered.
Longer word matched will give higher priority to a result.
(Try typing &lt;code class=&quot;highlighter-rouge&quot;&gt;SASS&lt;/code&gt; for example.)&lt;/p&gt;

&lt;h3 id=&quot;reading-time&quot;&gt;Reading time&lt;/h3&gt;

&lt;p&gt;At the top of each post, you’ll see estimated reading time.
It is a very simple plugin I found somewhere on the internet and modified a bit.&lt;/p&gt;

&lt;p&gt;Here it is:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Outputs the reading time&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Read this in &quot;about 4 minutes&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Put into your _plugins dir in your Jekyll site&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Usage: Read this in about about 3  minutes&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ReadingTimeFilter&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reading_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;words_per_minute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;180&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words_per_minute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;floor&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;minutes_label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; minute&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; minutes&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;about &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minutes_label&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;less than 1 minute&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Liquid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;register_filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ReadingTimeFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;share-buttons&quot;&gt;Share buttons&lt;/h3&gt;

&lt;p&gt;At the end of each post, there are three simple sharing buttons.
For Facebook, Twitter and Google+. No API or third party scripts are loaded.&lt;/p&gt;

&lt;h3 id=&quot;other-stuff-i-want-to-add&quot;&gt;Other stuff I want to add&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Real related posts - Jekyll by default as related posts actually shows latest posts.
I’m still looking for a nice way to implement this.
Probably I’ll just match posts by tags.&lt;/li&gt;
  &lt;li&gt;Meta data (for sharing and SEO) - just need to add few meta tags to the head.&lt;/li&gt;
  &lt;li&gt;JSX syntax highlighting - not sure how to make this one, still at the drawing board.&lt;/li&gt;
  &lt;li&gt;Add icon for the &lt;a href=&quot;/atom.xml&quot;&gt;ATOM feed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;custom-plugins-and-github-pages&quot;&gt;Custom plugins and GitHub pages&lt;/h3&gt;

&lt;p&gt;When I first pushed new version of the blog, most of the new features were missing.
I quickly learned that GitHub pages doesn’t allow custom plugins.
It is a reasonable security feature.&lt;/p&gt;

&lt;p&gt;I decided to get a hosting for the blog, and then use Jenkins to make a Jekyll builds.
But colleague told me that this is easily doable using &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis&lt;/a&gt;,
without any outside hosting.
There will be a &lt;a href=&quot;/travis-jekyll-and-github-pages/&quot;&gt;new post&lt;/a&gt; about it, with detailed description how to set it up.&lt;/p&gt;

&lt;p&gt;Basically I use the &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt; branch for the Jekyll website, and Travis is watching for the pushes on that branch.
When push is detected, Travis builds static HTML and pushes it to the &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch.
From there GitHub pages takes over and deploys it.&lt;/p&gt;

&lt;h3 id=&quot;for-the-end&quot;&gt;For the end&lt;/h3&gt;

&lt;p&gt;Hope you guys like the changes, if you are interested in anything specific, feel free to leave a comment.
I’ll try to answer it, or even write a completely new post about it. Thanks!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Plain JavaScript animated window scroll function</title>
   <link href="http://stanko.github.io/animate-window-scroll-to/"/>
   <updated>2016-09-28T00:00:00+00:00</updated>
   <id>http://stanko.github.io/animate-window-scroll-to</id>
   <content type="html">&lt;p&gt;Before modern frameworks, I always used jQuery’s &lt;code class=&quot;highlighter-rouge&quot;&gt;scrollTo&lt;/code&gt; method.
At some point, not every project included jQuery, so I wrote simple function
to animate window scroll.&lt;/p&gt;

&lt;p&gt;I have kept copying that function from project to project.
Finally I took some time, cleaned it up and published it on the npm
(this is the first npm package I published).&lt;/p&gt;

&lt;p&gt;Demo and documentation are available &lt;a href=&quot;https://stanko.github.io/animated-scroll-to/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Find it on &lt;a href=&quot;https://github.com/Stanko/animated-scroll-to&quot;&gt;Github&lt;/a&gt;
and &lt;a href=&quot;https://www.npmjs.com/package/animated-scroll-to&quot;&gt;npm&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install animated-scroll-to
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;usage&quot;&gt;Usage&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;animateScrollTo&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'animated-scroll-to'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// desiredOffset - page offset to scroll&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// options - object with options&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// default options&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// duration of the scroll per 1000px, default 500&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// minimum duration of the scroll&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;minDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// maximum duration of the scroll&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;maxDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// should animated scroll be canceled on user scroll/keypress&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// if set to &quot;false&quot; user input will be disabled until animated scroll is complete&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;cancelOnUserAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;animateScrollTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;desiredOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Implementing PhotoShop font sizes and tracking in CSS, points to pixels conversion</title>
   <link href="http://stanko.github.io/font-size-and-tracking-points-to-pixels/"/>
   <updated>2016-09-08T00:00:00+00:00</updated>
   <id>http://stanko.github.io/font-size-and-tracking-points-to-pixels</id>
   <content type="html">&lt;p&gt;We’ve all been there - trying to get right font sizes from PhotoShop to CSS.
Designers usually work with points, which are used in the print, but not common on the web.
They also use term &lt;em&gt;tracking&lt;/em&gt; a lot, which is actually only a letter spacing with different units.&lt;/p&gt;

&lt;p&gt;You can recalculate everything by hand and try to keep track of it.
But we can use the goodies of SCSS to make that process a bit easier.&lt;/p&gt;

&lt;p&gt;Point to pixel ratio is &lt;code class=&quot;highlighter-rouge&quot;&gt;1pt = 1.333333px&lt;/code&gt;. We’ll create SASS function to do conversion for us.&lt;/p&gt;

&lt;p&gt;And PhotoShop tracking works relative to the font size.
One point of tracking is 1/1000 of the font size.
For this one we’ll create a mixin.&lt;/p&gt;

&lt;!--more--&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Converts pt to px
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pt-to-px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$size-in-points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;@return&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$size-in-points&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;.333333&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Adds letter spacing to match photoshop tracking
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@mixin&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tracking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ps-tracking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;letter-spacing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ps-tracking&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Usage
&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;tracking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;-5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pt-to-px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pt-to-px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will generate following CSS:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;letter-spacing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-.005em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;23px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that function and mixin can do pretty much the same job.
But it makes more sense to use mixins when including complete styles,
and functions to return values.
So conversion makes sense to be a function,
as we can use it for font size, line height or anything else.
Conversion of tracking to letter spacing is including a specific style,
so keep it in a mixin.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Always use &lt;button&gt; for clickable elements</title>
   <link href="http://stanko.github.io/always-use-button-for-clickable-elements/"/>
   <updated>2016-09-02T00:00:00+00:00</updated>
   <id>http://stanko.github.io/always-use-button-for-clickable-elements</id>
   <content type="html">&lt;p&gt;Always try to use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;button&amp;gt;&lt;/code&gt; when  &lt;strong&gt;element is clickable, but it is not a link&lt;/strong&gt;.
Avoid &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and other elements.&lt;/p&gt;

&lt;p&gt;Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;display: flex&lt;/code&gt; works differently on buttons in different browsers,
but we have easy fix for that.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;why&quot;&gt;Why?&lt;/h2&gt;

&lt;p&gt;You will get multiple benefits - user can “tab” to it,
and then press enter to activate (it will trigger &lt;code class=&quot;highlighter-rouge&quot;&gt;click&lt;/code&gt; event).
There is no need to &lt;code class=&quot;highlighter-rouge&quot;&gt;preventDefault&lt;/code&gt; like when you are using &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt;.
User can’t open it in the new tab/window, using right or middle click.
Screen readers recognize it out of the box.&lt;/p&gt;

&lt;p&gt;Long story short - it is way more accessible. And when you think about it,
it is actually really logical thing to do. Buttons are made to be clickable :)&lt;/p&gt;

&lt;h2 id=&quot;gotchas&quot;&gt;Gotchas&lt;/h2&gt;

&lt;h3 id=&quot;buttons-in-forms&quot;&gt;Buttons in forms&lt;/h3&gt;

&lt;p&gt;If you need your clickable button to be in a form, remember to put &lt;code class=&quot;highlighter-rouge&quot;&gt;type='button'&lt;/code&gt; to it,
as default button type is &lt;code class=&quot;highlighter-rouge&quot;&gt;submit&lt;/code&gt;, and it will submit your form on click.
Again, you could use &lt;code class=&quot;highlighter-rouge&quot;&gt;preventDefault&lt;/code&gt;, but I think this is a way cleaner approach.&lt;/p&gt;

&lt;h3 id=&quot;button-flex-maddnes&quot;&gt;Button flex maddnes&lt;/h3&gt;

&lt;p&gt;For some reason &lt;code class=&quot;highlighter-rouge&quot;&gt;display: flex&lt;/code&gt; on buttons is behaving really different across browsers.
It is crazy! If you don’t believe me, just check the examples below.&lt;/p&gt;

&lt;p&gt;The easiest fix is to add another div in (to wrap button content), and apply &lt;code class=&quot;highlighter-rouge&quot;&gt;display: flex&lt;/code&gt; to it.
From there on, you should be fine. I made a CodePen with an example.
On the left side, you can see a button with flex applied directly to it,
and on the right, a button with inner div and flex applied to it.&lt;/p&gt;

&lt;p&gt;I overcame my laziness and made a bunch of cross browser screenshots.
Original CodePen is included at the end.&lt;/p&gt;

&lt;p&gt;At the moment, it seems only Chrome gets it right.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;chrome&quot;&gt;Chrome&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/button-flex/chrome.png&quot; alt=&quot;Display flex on buttons, Chrome&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;firefox&quot;&gt;Firefox&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/button-flex/firefox.png&quot; alt=&quot;Display flex on buttons, Firefox&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;safari-8&quot;&gt;Safari 8&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/button-flex/safari8.png&quot; alt=&quot;Display flex on buttons, Safari 8&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;safari-9&quot;&gt;Safari 9&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/button-flex/safari9.png&quot; alt=&quot;Display flex on buttons, Safari 9&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;ie10&quot;&gt;IE10&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/button-flex/ie10.png&quot; alt=&quot;Display flex on buttons, IE10&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;ie11&quot;&gt;IE11&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/button-flex/ie11.png&quot; alt=&quot;Display flex on buttons, IE11&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;codepen&quot;&gt;CodePen&lt;/h4&gt;

&lt;iframe height=&quot;300px&quot; scrolling=&quot;no&quot; src=&quot;//codepen.io/stanko/embed/ALjvYj/?height=300&amp;amp;theme-id=light&amp;amp;default-tab=result&amp;amp;embed-version=2&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot;&gt;
See the Pen &lt;a href=&quot;http://codepen.io/stanko/pen/ALjvYj/&quot;&gt;Fix for button display:flex&lt;/a&gt; by Stanko (&lt;a href=&quot;http://codepen.io/stanko&quot;&gt;@stanko&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>SASS random() and circle animation</title>
   <link href="http://stanko.github.io/sass-random-and-circle-animation/"/>
   <updated>2016-08-30T00:00:00+00:00</updated>
   <id>http://stanko.github.io/sass-random-and-circle-animation</id>
   <content type="html">&lt;p&gt;I decided to move my CSS playground to the CodePen, and this is the first one I made.&lt;/p&gt;

&lt;p&gt;Idea came to me while I was riding on a bus, and I might use it on this blog,
as a part of it’s redesign.&lt;/p&gt;

&lt;p&gt;This is CSS only animation (I used JS to create 50 elements though).
And you can see the usage of SASS &lt;code class=&quot;highlighter-rouge&quot;&gt;random()&lt;/code&gt; function.&lt;/p&gt;

&lt;!--more--&gt;

&lt;iframe height=&quot;400px&quot; scrolling=&quot;no&quot; src=&quot;//codepen.io/stanko/embed/VKkaJB/?height=400&amp;amp;theme-id=light&amp;amp;default-tab=result&amp;amp;embed-version=2&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot; style=&quot;width: 100%; margin-bottom: 1em; background: #f7f7f7&quot;&gt;
See the Pen &lt;a href=&quot;http://codepen.io/stanko/pen/VKkaJB/&quot;&gt;Circle Logo Animation&lt;/a&gt; by Stanko (&lt;a href=&quot;http://codepen.io/stanko&quot;&gt;@stanko&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;random()&lt;/code&gt; will return random integer between 1 and &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;, where &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; is the number you pass to it.
Default param is 100.&lt;/p&gt;

&lt;p&gt;Note that random does not return 0.&lt;/p&gt;

&lt;p&gt;To get different random ranges just add or subtract your base.&lt;/p&gt;

&lt;p&gt;This will return number between 11 and 20.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$random-number: random(10) + 10;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Same thing with negative numbers, this one covers the range between -10 and 10.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$random-number: random(21) - 11;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Something to have in mind, new random numbers will be generated on every SASS compilation.
But once generated, CSS will stay static, until the next compilation.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Setting up Webpack, Babel and React from scratch - Part 2</title>
   <link href="http://stanko.github.io/setting-up-webpack-babel-and-react-from-scratch-part-2/"/>
   <updated>2016-08-29T00:00:00+00:00</updated>
   <id>http://stanko.github.io/setting-up-webpack-babel-and-react-from-scratch-part-2</id>
   <content type="html">&lt;h2 id=&quot;part-two&quot;&gt;Part two&lt;/h2&gt;

&lt;p&gt;Update: Part two is pretty much done. Part three will cover redux and production builds.&lt;/p&gt;

&lt;p&gt;Other parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/setting-up-webpack-babel-and-react-from-scratch&quot;&gt;Part 1&lt;/a&gt; - Webpack, Babel, React, Router, ESLint&lt;/li&gt;
  &lt;li&gt;Part 2 - SASS, More ES6 goodness (Static props, decorators, deconstruction…)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/setting-up-webpack-babel-and-react-from-scratch-part-3&quot;&gt;Part 3&lt;/a&gt; - Where to go from here&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;adding-sass&quot;&gt;Adding SASS&lt;/h2&gt;

&lt;p&gt;We will use SASS loader for webpack, so let’s install it together with node-sass compiler,
 css and style loaders&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install --save-dev style-loader css-loader sass-loader node-sass
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Create &lt;code class=&quot;highlighter-rouge&quot;&gt;scss&lt;/code&gt; folder in the &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; folder, and main &lt;code class=&quot;highlighter-rouge&quot;&gt;app.scss&lt;/code&gt; file in it.
This file will include all of the other scss files.&lt;/p&gt;

&lt;p&gt;Now we need to add a loader to webpack config file.&lt;/p&gt;

&lt;!--more--&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
{
  test: /\.scss$/,
  loader: 'style!css!sass'
}
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will handle importing SCSS files in our JavaScript code.
So we need to import &lt;code class=&quot;highlighter-rouge&quot;&gt;app.scss&lt;/code&gt; manually in the JavaScript code.
You’ll need to add only one line to your &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import '../scss/app.scss';
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This includes your styles by calling loaders we defined in the webpack config.&lt;/p&gt;

&lt;p&gt;Restart your webpack, and voala, now we have styles and hot reloading for them.
Try changing your styles to check it.&lt;/p&gt;

&lt;h3 id=&quot;source-maps&quot;&gt;Source maps&lt;/h3&gt;

&lt;p&gt;To enable source maps, we’ll pass the &lt;code class=&quot;highlighter-rouge&quot;&gt;sourceMap&lt;/code&gt; option to the sass and the css loaders.
Enable devtool, and update the loader&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
  devtool: 'inline-source-map', // or 'source-map'

  module: {
    loaders: [
      ...
      {
        test: /\.scss$/,
        loader: 'style!css?sourceMap!sass?sourceMap',
      }
    ]
  }
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you want to read more, here’s link to the
&lt;a href=&quot;https://github.com/jtangelder/sass-loader&quot;&gt;official documentation&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;autoprefixer&quot;&gt;Autoprefixer&lt;/h3&gt;

&lt;p&gt;Always use autoprefixer - I can’t stress this enough.&lt;/p&gt;

&lt;p&gt;We’ll need postcss loader, precss and autoprefixer&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install --save-dev postcss-loader precss autoprefixer
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;At the top of our webpack config, require precss and autoprefixer&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const precss = require('precss');
const autoprefixer = require('autoprefixer');
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Update our sass loader config and and postcss config&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
  module: {
    loaders: [
      ...
      {
        test: /\.scss$/,
        loader: 'style!css?sourceMap!postcss!sass?sourceMap',
      }
    ]
  },

  postcss() {
    return [autoprefixer, precss];
  },
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Restart webpack, and you should have autoprefixing in place.
Try adding &lt;code class=&quot;highlighter-rouge&quot;&gt;display: flex&lt;/code&gt; to one of the elements to check if autoprefixer added
&lt;code class=&quot;highlighter-rouge&quot;&gt;-ms-display: flex&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;-webkit-display: flex&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Again here’s link to the &lt;a href=&quot;https://github.com/postcss/postcss-loader&quot;&gt;official documentation&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;method-shorthand&quot;&gt;Method shorthand&lt;/h2&gt;

&lt;p&gt;Note that&lt;/p&gt;

&lt;pre&gt;
{
  ...
  postcss() {
    return [autoprefixer, precss];
  }
}
&lt;/pre&gt;

&lt;p&gt;is the same as&lt;/p&gt;

&lt;pre&gt;
{
  ...
  postcss: function () {
    return [autoprefixer, precss];
  }
}
&lt;/pre&gt;

&lt;p&gt;but only using &lt;a href=&quot;http://eslint.org/docs/rules/object-shorthand&quot;&gt;method shorthand&lt;/a&gt;.
ES6 rules!&lt;/p&gt;

&lt;h2 id=&quot;more-es6-stuff&quot;&gt;More ES6 stuff&lt;/h2&gt;

&lt;p&gt;To be able to use deconstruction (&lt;code class=&quot;highlighter-rouge&quot;&gt;...object&lt;/code&gt;), static class properties and decorators (&lt;code class=&quot;highlighter-rouge&quot;&gt;@connect&lt;/code&gt;) we need to add
a couple of Babel plugins.&lt;/p&gt;

&lt;p&gt;Install them using following command&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i --save-dev babel-plugin-syntax-decorators babel-plugin-transform-class-properties babel-plugin-transform-decorators-legacy babel-preset-stage-0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Few links to read more about this plugins:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://babeljs.io/docs/plugins/syntax-decorators/&quot;&gt;Synthax only for decorators&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy&quot;&gt;Decorators plugin&lt;/a&gt;
&lt;small&gt;
- We are using a 3rd party plugin as “Decorators are disabled in Babel v6, pending a proposal update”.
Read more on the first link.
&lt;/small&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://babeljs.io/docs/plugins/transform-class-properties/&quot;&gt;Static properties&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://babeljs.io/docs/plugins/preset-stage-0/&quot;&gt;Stage 0 (plugin group)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we need to add it to our Babel configuration. Open your &lt;code class=&quot;highlighter-rouge&quot;&gt;.babelrc&lt;/code&gt; file and add them.&lt;/p&gt;

&lt;p&gt;Add these to the &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;plugins&quot;&lt;/code&gt; array&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;syntax-decorators&quot;
&quot;transform-decorators-legacy&quot;
&quot;transform-class-properties&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;stage-0&quot;&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;presets&quot;&lt;/code&gt; array&lt;/p&gt;

&lt;p&gt;Your &lt;code class=&quot;highlighter-rouge&quot;&gt;.babelrc&lt;/code&gt; should be looking something like this&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;plugins&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;syntax-decorators&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;transform-decorators-legacy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;transform-class-properties&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;es2015&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stage-0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Setting up Webpack, Babel and React from scratch</title>
   <link href="http://stanko.github.io/setting-up-webpack-babel-and-react-from-scratch/"/>
   <updated>2016-08-23T00:00:00+00:00</updated>
   <id>http://stanko.github.io/setting-up-webpack-babel-and-react-from-scratch</id>
   <content type="html">&lt;h2 id=&quot;update-march-2017&quot;&gt;Update, March 2017&lt;/h2&gt;

&lt;p&gt;Webpack 2 is out, so this post is slowly becoming outdated.
For webpack 2 - react boilerplate please check &lt;a href=&quot;/webpack-2-react-redux/&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;this-is-a-living-guide&quot;&gt;This is a living guide&lt;/h2&gt;

&lt;p&gt;This is the first part of the guide that will be changed over time.
For now it covers Webpack, Babel (for ES6) and React with React Router.&lt;/p&gt;

&lt;p&gt;Next parts will contain more stuff - static properties, decorators, SASS,
development and production configs, immutables… Also redux part should be updated really soon.&lt;/p&gt;

&lt;p&gt;So stay tuned!&lt;/p&gt;

&lt;p&gt;Other parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Part 1 - Webpack, Babel, React, Router, ESLint&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/setting-up-webpack-babel-and-react-from-scratch-part-2&quot;&gt;Part 2&lt;/a&gt; - SASS, more ES6 goodness (Static props, decorators, deconstruction…)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/setting-up-webpack-babel-and-react-from-scratch-part-3&quot;&gt;Part 3&lt;/a&gt; - Where to go from here&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;before-we-start&quot;&gt;Before we start&lt;/h3&gt;

&lt;p&gt;I’ll assume that you have a basic knowledge of the unix terminal,
and that you have read what Webpack, Babel and React are.&lt;/p&gt;

&lt;h2 id=&quot;webpack&quot;&gt;Webpack&lt;/h2&gt;

&lt;p&gt;For a start, install &lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; from &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;https://nodejs.org/en/&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Make a git repo (this is optional, but recommended),
or create an empty folder. Navigate to it in the terminal.&lt;/p&gt;

&lt;p&gt;Initialize npm (&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;) by running&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we can start adding npm packages.
Install babel core and it’s loader for webpack.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install --save-dev webpack webpack-dev-server
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Tip: you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;npm i&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Create &lt;code class=&quot;highlighter-rouge&quot;&gt;app/js/app.js&lt;/code&gt; with a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log('hello world');&lt;/code&gt;.
This will be the entry point for webpack.&lt;/p&gt;

&lt;p&gt;Now we need to create a webpack config file &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack.config.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Tip: you can create files by using touch command - &lt;code class=&quot;highlighter-rouge&quot;&gt;touch FILENAME&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./js/app.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;app.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/dist&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is important to understand what is going on so far.
This tells webpack that our main application file (&lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt;) is the entry point,
and bundled application should be outputted to the &lt;code class=&quot;highlighter-rouge&quot;&gt;dist&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__dirname&lt;/code&gt; is the name of the directory that the currently executing script resides in.&lt;/p&gt;

&lt;p&gt;Now we can run&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node ./node_modules/webpack/bin/webpack.js
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It will generate &lt;code class=&quot;highlighter-rouge&quot;&gt;dist/app.js&lt;/code&gt;.
(Tip: to be able to run &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack&lt;/code&gt; globally, you’ll need to install it using &lt;code class=&quot;highlighter-rouge&quot;&gt;npm i --global webpack&lt;/code&gt;. Then you can run it by using only &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack&lt;/code&gt;.)&lt;/p&gt;

&lt;h2 id=&quot;babel&quot;&gt;Babel&lt;/h2&gt;

&lt;p&gt;Noew can add Babel transpiler goodness.&lt;/p&gt;

&lt;p&gt;Install babel core and it’s loader for webpack and presets for ES6 (aka ES2015) and React&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i --save-dev babel-loader babel-core babel-preset-es2015 babel-preset-react
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Create &lt;code class=&quot;highlighter-rouge&quot;&gt;.babelrc&lt;/code&gt; in the project root folder and add presets&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;es2015&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Add js/jsx loader to your webpack config, as well as extensions we want to resolve (More about this later).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
  resolve: {
    extensions: ['', '.js', '.jsx', '.json']
  },
  module: {
    loaders: [
      {
        test: /\.jsx?$/,
        exclude: /node_modules/,
        loaders: [&quot;babel-loader&quot;]
      }
    ]
  }
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Webpack accepts the array of the loaders. Loader has a test for the filenames,
in our case it matches all of the &lt;code class=&quot;highlighter-rouge&quot;&gt;.js&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.jsx&lt;/code&gt; files.
Then it applies babel loader to it. Basically this will transpile our
fancy ES6 to ES5 which can be understood by browsers
(some browsers can execute ES6 already, but most of them still can’t).&lt;/p&gt;

&lt;p&gt;If you re-run our webpack command, nothing will change, yet.&lt;/p&gt;

&lt;h2 id=&quot;react&quot;&gt;React&lt;/h2&gt;

&lt;p&gt;Install react and react DOM&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i react react-dom --save
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Your &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; should look something like this. For this example we are just rendering main menu.
Later we’ll replace that with react router component.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React from 'react';
import ReactDOM from 'react-dom';
import Menu from './components/Global/Menu.jsx';

ReactDOM.render(
  &amp;lt;Menu /&amp;gt;,
  document.getElementById('app')
);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we can start adding react components. Create &lt;code class=&quot;highlighter-rouge&quot;&gt;app/js/components/Global/Menu.jsx&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React, { Component } from 'react';

export default class Menu extends Component {
  render() {
    return (
      &amp;lt;div className='Menu'&amp;gt;
        Main Menu
      &amp;lt;/div&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;index-page&quot;&gt;Index Page&lt;/h2&gt;

&lt;p&gt;Create index page in the &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; folder.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Your app name&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We’ll need file loader for it&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install file-loader --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Update webpack config to add entry&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
  entry: {
    javascript: &quot;./js/app.js&quot;,
    html: &quot;./index.html&quot;,
  }
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and add loader&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
  {
    test: /\.html$/,
    loader: &quot;file?name=[name].[ext]&quot;,
  }
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now when we run webpack again, we’ll get &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; in dist folder.&lt;/p&gt;

&lt;h2 id=&quot;dev-server-and-hot-reload&quot;&gt;Dev server and hot reload&lt;/h2&gt;

&lt;p&gt;Install webpack development server, and run it&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install --save-dev webpack webpack-dev-server
node ./node_modules/webpack-dev-server/bin/webpack-dev-server.js
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(Tip: Same as with webpack, you can install it globally &lt;code class=&quot;highlighter-rouge&quot;&gt;npm i --global webpack-dev-server&lt;/code&gt; and run it using &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack-dev-server&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;Now open &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080/&lt;/code&gt; in your browser of choice. You should see your app.
Development server will watch for your changes and rerun the bundler.
Still we need to manually refresh the browser.&lt;/p&gt;

&lt;p&gt;So let’s add hot reloading.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install react-hot-loader --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Update webpack js/jsx loader to use hot reloading&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
  {
    test: /\.jsx?$/,
    exclude: /node_modules/,
    loaders: [&quot;react-hot&quot;, &quot;babel-loader&quot;],
  }
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we need to add two more options when running dev server &lt;code class=&quot;highlighter-rouge&quot;&gt;--hot&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;--inline&lt;/code&gt;.
We will also add &lt;code class=&quot;highlighter-rouge&quot;&gt;--history-api-fallback&lt;/code&gt; which will be useful when we add react router.
This option tells server to fallback to &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; which will handle routing (as we are building single page app).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node ./node_modules/webpack-dev-server/bin/webpack-dev-server.js --hot --inline
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Not only the hot reload watches the changes and updates the browser, but it injects the code and keeps the application state.
Note that not all modules can be replaced.
The code in &lt;code class=&quot;highlighter-rouge&quot;&gt;app/js/app.js&lt;/code&gt; cannot be reloaded and will cause a full page reload but changing the children components will trigger a hot module replacement.&lt;/p&gt;

&lt;p&gt;To make things easier, we’ll add our script to the &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
  &quot;scripts&quot;: {
    &quot;dev&quot;: &quot;node ./node_modules/webpack-dev-server/bin/webpack-dev-server.js --hot --inline --history-api-fallback&quot;
  }
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we can run only &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run dev&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;eslint&quot;&gt;ESLint&lt;/h2&gt;

&lt;p&gt;We are going to use AirBNB’s set of rules for linting, as their standards are really good.
Also, creating eslint by hand would take a long time.&lt;/p&gt;

&lt;p&gt;Pro tip: &lt;strong&gt;ALWAYS LINT&lt;/strong&gt;. No matter what people say - &lt;strong&gt;always use linters&lt;/strong&gt;.
You will catch errors earlier, and enforce your (the best) standards.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb&quot;&gt;https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install --save-dev eslint eslint-config-airbnb eslint-plugin-import eslint-plugin-react eslint-plugin-jsx-a11y eslint
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we need to create &lt;code class=&quot;highlighter-rouge&quot;&gt;.eslintrc&lt;/code&gt; that only needs extends param,
but if you want to customize it, add your rules to the &lt;code class=&quot;highlighter-rouge&quot;&gt;rules&lt;/code&gt; object.
Personally I like single quotes more, and spaces in the react curly synthax.&lt;/p&gt;

&lt;p&gt;You might have to restart your editor for changes to take effect.
For beginners I would recommend &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt; editor.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;extends&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;airbnb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;rules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;jsx-quotes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;prefer-single&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;react/jsx-curly-spacing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;always&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;react/prefer-stateless-function&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;react-router&quot;&gt;React Router&lt;/h2&gt;

&lt;p&gt;Install it from the NPM&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install --save react-router
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What we’ll do is pretty much the same thing from the official getting started guide.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/react-router/blob/master/docs/Introduction.md&quot;&gt;https://github.com/reactjs/react-router/blob/master/docs/Introduction.md&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; should look like this. You’ll have to create &lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Home&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;About&lt;/code&gt; views.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React from 'react';
import ReactDOM from 'react-dom';

import App from './views/App';
import Home from './views/Home';
import About from './views/About';

import { Router, Route, IndexRoute, browserHistory } from 'react-router';

ReactDOM.render(
  &amp;lt;Router history={ browserHistory }&amp;gt;
    &amp;lt;Route path='/' component={ App }&amp;gt;
      &amp;lt;IndexRoute component={ Home } /&amp;gt;
      &amp;lt;Route path='about' component={ About } /&amp;gt;
    &amp;lt;/Route&amp;gt;
  &amp;lt;/Router&amp;gt;,
  document.getElementById('app')
);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And your &lt;code class=&quot;highlighter-rouge&quot;&gt;views/App/index.jsx&lt;/code&gt; should like this. It is just a simple wrapper around your views.
It has simple menu so we can test routing. &lt;code class=&quot;highlighter-rouge&quot;&gt;chilren&lt;/code&gt; prop is every child component that is passed to it.
In our case, children will be route that is matched in our &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React, { Component } from 'react';
import { Link } from 'react-router';

export default class App extends Component {
  render() {
    const { children } = this.props;

    return (
      &amp;lt;div className='App'&amp;gt;
        &amp;lt;Link to='/'&amp;gt;Home&amp;lt;/Link&amp;gt;
        &amp;lt;Link to='/about'&amp;gt;About&amp;lt;/Link&amp;gt;

        { children }
      &amp;lt;/div&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;redux&quot;&gt;Redux&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Note that this part will be updated soon with more details.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Install redux&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i redux react-redux --save
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To learn what redux is, the best place to start are lessons taught by the redux’s creator himself, Dan Abramov.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://egghead.io/series/getting-started-with-redux&quot;&gt;https://egghead.io/series/getting-started-with-redux&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And to add it to your React app, for now follow official documentation (more info coming soon);&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/basics/UsageWithReact.html&quot;&gt;http://redux.js.org/docs/basics/UsageWithReact.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;nice-to-have&quot;&gt;Nice to have&lt;/h2&gt;

&lt;p&gt;This is everything you need, following the best practices for react and javascipt development in general.
Beside that there is couple of more things, that I usually add to my projects.
Check it yourself, and add it if you thing these are useful to you.&lt;/p&gt;

&lt;h5 id=&quot;absolute-path-resolving&quot;&gt;Absolute path resolving&lt;/h5&gt;

&lt;p&gt;To be able to include your files with absolute paths you need to set root path.
(Example: &lt;code class=&quot;highlighter-rouge&quot;&gt;components/views/App&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;../../views/App&lt;/code&gt;.)
In your webpack config, under resolve add &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; param. Note that you have add &lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt; at the top of the file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const path = require('path');

...
resolve: {
  extensions: ['', '.js', '.jsx', '.json'],
  root: path.resolve(__dirname, './app/js'),
},
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Using this will probably still give you linting errors in the editor, so we need to add
Install eslint import resolver package&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install --save-dev eslint-import-resolver-webpack
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And add settings to your &lt;code class=&quot;highlighter-rouge&quot;&gt;.eslintrc&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
settings: {
  &quot;import/resolver&quot;: &quot;webpack&quot;
}
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;update&quot;&gt;Update&lt;/h2&gt;

&lt;p&gt;As promised in comments, here you can find complete &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack.config.js&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To make it even easier, I created a git repository to go along with this blog post.
You can find it on &lt;a href=&quot;https://github.com/Stanko/react-tutorial&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;webpackconfigjs&quot;&gt;webpack.config.js&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'path'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;javascript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./js/app.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./index.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;app.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/dist&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;extensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.jsx'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./app/js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;jsx&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/node_modules/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;react-hot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;babel-loader&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;html$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;file?name=[name].[ext]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;packagejson&quot;&gt;package.json&lt;/h4&gt;

&lt;p&gt;This is minimal version of the file. Yours will probably have more stuff like &lt;code class=&quot;highlighter-rouge&quot;&gt;author&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;license&lt;/code&gt;…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;dev&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;node ./node_modules/webpack-dev-server/bin/webpack-dev-server.js --hot --inline --history-api-fallback&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;babel-core&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^6.21.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;babel-loader&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^6.2.10&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;babel-preset-es2015&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^6.18.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;babel-preset-react&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^6.16.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;eslint&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^3.13.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;eslint-config-airbnb&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^14.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;eslint-plugin-import&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^2.2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;eslint-plugin-jsx-a11y&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^3.0.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;eslint-plugin-react&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^6.9.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;file-loader&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^0.9.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;react-hot-loader&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^1.3.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;react-router&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^3.0.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;webpack&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^1.14.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;webpack-dev-server&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^1.16.2&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^15.4.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;react-dom&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^15.4.2&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>I washed my headphones</title>
   <link href="http://stanko.github.io/i-washed-my-headphones/"/>
   <updated>2016-08-03T00:00:00+00:00</updated>
   <id>http://stanko.github.io/i-washed-my-headphones</id>
   <content type="html">&lt;p&gt;Recently I lost my iPhone headphones.
I didn’t care much, as they were almost 3 years old, and I had a brand new ones.
But today, while getting ready for work, I found them in the pocket
of the pants I washed about week ago.&lt;/p&gt;

&lt;p&gt;I was sure they wouldn’t work, but guess what? They do!
Probably the fact that they dried for days helped.&lt;/p&gt;

&lt;p&gt;So I guees I have a spare pair of headphones now :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Null Object Tech Meetup Vol 3</title>
   <link href="http://stanko.github.io/null-object-meetup-vol-3/"/>
   <updated>2016-07-13T00:00:00+00:00</updated>
   <id>http://stanko.github.io/null-object-meetup-vol-3</id>
   <content type="html">&lt;p&gt;Another tech meetup is behind us, even more people came this time.
As promised, we will keep them coming more often.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/meetup-vol-3/2.JPG&quot; alt=&quot;Stanko Tadic talking at tech meetup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Miloš spoke first about learning in tech, and keeping up with it.
My talk was about SPAs, and how hard they are.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;We hope that meetups like this will help to build and strengthen the community in Belgrade, and Serbia in general.
At this point that is not something we can brag about.
We are planning charity hackatons as well and I’ll keep you posted about them.&lt;/p&gt;

&lt;p&gt;Grab the slides:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/public/pdf/Null Object Tech Meetup - Keeping up with the tech.pdf&quot;&gt;Keeping up with the tech&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/public/pdf/Null Object Tech Meetup - SPAs are hard&quot;&gt;Single Page Applications are hard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/meetup-vol-3/1.JPG&quot; alt=&quot;Milos Pavlicevic talking at tech meetup&quot; /&gt;
&lt;img src=&quot;/public/img/meetup-vol-3/3.JPG&quot; alt=&quot;Null Object tech meetup audience&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For more check the
&lt;a href=&quot;https://www.facebook.com/nullobject2013/photos/?tab=album&amp;amp;album_id=1072710352807339&quot;&gt;
  Facebook album
&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Sektor - draw and animate SVG sectors</title>
   <link href="http://stanko.github.io/sektor-draw-and-animate-svg-circle-sectors-2016/"/>
   <updated>2016-06-29T00:00:00+00:00</updated>
   <id>http://stanko.github.io/sektor-draw-and-animate-svg-circle-sectors-2016</id>
   <content type="html">&lt;p&gt;For a current project I’m on, we needed both circular timer, and progress bar.
Again, I wasn’t able to find small library to do that. But I found
&lt;a href=&quot;http://stackoverflow.com/questions/21205652/how-to-draw-a-circle-sector-in-css/21206274#21206274&quot;&gt;awesome answer&lt;/a&gt;
on Stack Overflow, decided SVG is way to go, and wrote &lt;a href=&quot;https://stanko.github.io/sektor/&quot;&gt;Sektor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sektor is a plain JavaScript library that draws circle sector (or an arc).
Once it is drawn, you can change it’s angle and animate the change.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stanko.github.io/sektor/&quot;&gt;
  &lt;img alt=&quot;Sektor - draw and animate SVG circle&quot; src=&quot;https://stanko.github.io/sektor/img/sektor.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It works in every browser with SVG and &lt;code class=&quot;highlighter-rouge&quot;&gt;requestAnimationFrane&lt;/code&gt; support (IE10+ and modern browsers).
Check &lt;a href=&quot;https://stanko.github.io/sektor/&quot;&gt;demo and docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I may use this for example how much better is to use &lt;code class=&quot;highlighter-rouge&quot;&gt;requestAnimationFrame&lt;/code&gt; than &lt;code class=&quot;highlighter-rouge&quot;&gt;setInterval&lt;/code&gt;.
If you are bored, try it yourself, and you’ll see that animating using &lt;code class=&quot;highlighter-rouge&quot;&gt;requestAnimationFrame&lt;/code&gt; is way smoother.&lt;/p&gt;

&lt;p&gt;React component is coming soon as well. Cheers!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Null Object Tech Meetup Vol 3 is coming up</title>
   <link href="http://stanko.github.io/null-object-meetup-vol-3-coming-up/"/>
   <updated>2016-06-28T00:00:00+00:00</updated>
   <id>http://stanko.github.io/null-object-meetup-vol-3-coming-up</id>
   <content type="html">&lt;p&gt;We have another tech meetup coming up.&lt;/p&gt;

&lt;p&gt;My friend and colleague Miloš, will talk about how we all are &lt;i&gt;Keeping up with the tech&lt;/i&gt;.
And my talk will be dedicated to &lt;i&gt;single page applications, and how actually hard they are&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;This time it is on the river, at the &lt;a href=&quot;https://www.facebook.com/LemonChili011/&quot;&gt;Lemon Chili&lt;/a&gt;.
Again, admission is free, but please register in advance. For more info check the
&lt;a href=&quot;https://www.facebook.com/events/1747545772127795/&quot;&gt;
  Facebook event
&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.facebook.com/events/1747545772127795/&quot;&gt;
  &lt;img class=&quot;Image Image--small&quot; src=&quot;/public/img/meetup-vol-3/poster.jpeg&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Change to position fixed on iOS Safari while scrolling</title>
   <link href="http://stanko.github.io/ios-safari-scoll-position-fixed/"/>
   <updated>2016-06-15T00:00:00+00:00</updated>
   <id>http://stanko.github.io/ios-safari-scoll-position-fixed</id>
   <content type="html">&lt;p&gt;If you ever had to fix element on scroll, you probably had an issue on iOS Safari (and other mobile devices).
Element will usually flicker, and disappear until scrolling has stopped completely.&lt;/p&gt;

&lt;p&gt;Just force GPU acceleration by adding &lt;code class=&quot;highlighter-rouge&quot;&gt;transform: translate3d(0,0,0);&lt;/code&gt; to your element.&lt;/p&gt;

&lt;p&gt;You will have something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.Element-header&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;translate3d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.Element-header--fixed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;fixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Enjoy &lt;code class=&quot;highlighter-rouge&quot;&gt;¯\_(ツ)_/¯&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;update-if-the-element-inside-fixed-one-flickers&quot;&gt;Update, if the element inside fixed one flickers&lt;/h3&gt;

&lt;p&gt;In the comments Matt made a great tip, so I’m adding it here as well:&lt;/p&gt;

&lt;p&gt;If you are styling the element within fixed element,
you need to apply the &lt;code class=&quot;highlighter-rouge&quot;&gt;translate3d&lt;/code&gt; hack to the nested element
in order for it to not flicker/disappear.&lt;/p&gt;

&lt;p&gt;Thanks Matt!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Highlight variables in Atom, Babel template strings</title>
   <link href="http://stanko.github.io/highlight-vars-in-atom-babel-javascript/"/>
   <updated>2016-05-07T00:00:00+00:00</updated>
   <id>http://stanko.github.io/highlight-vars-in-atom-babel-javascript</id>
   <content type="html">&lt;p&gt;Atom &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; plugin doesn’t highlight variables
in ES6 (ES2015) template strings.&lt;/p&gt;

&lt;p&gt;You’ll need to add this snippet to your Atom’s &lt;code class=&quot;highlighter-rouge&quot;&gt;style.less&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;atom-text-editor&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::shadow&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.variable.js&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#F8F8F2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/template-string-vars.png&quot; alt=&quot;ES6 template string with variable highlighted in Atom&quot; class=&quot;margin-y-30&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In general, you can just inspect stuff in Atom, find out what classes
element are using, and then style it via CSS (LESS).
Just don’t forget to add &lt;code class=&quot;highlighter-rouge&quot;&gt;atom-text-editor::shadow&lt;/code&gt; before your rules.&lt;/p&gt;

&lt;p&gt;If anyone is interested, I’m using &lt;a href=&quot;https://atom.io/themes/monokai-seti&quot;&gt;Monokai Seti&lt;/a&gt; theme.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Switching to Atom, this time for good</title>
   <link href="http://stanko.github.io/trying-atom-for-the-third-time/"/>
   <updated>2016-04-18T00:00:00+00:00</updated>
   <id>http://stanko.github.io/trying-atom-for-the-third-time</id>
   <content type="html">&lt;p&gt;I’m a big fan of &lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt; editor, which I was using for years now.
Minimal, fast, reliable. But there is one big problem with it.
Only one man is working on it’s development and community really slowed down.
JavaScript ecosystem is going forward at incredible speed, and I’m not sure if Sublime will be able to keep up.&lt;/p&gt;

&lt;p&gt;Even &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_factor&quot;&gt;bus factor&lt;/a&gt; comes to mind.&lt;/p&gt;

&lt;p&gt;That’s why I tried couple of alternatives.
When comes to bigger IDEs JetBrains is really good, but it is not as snappy as I would like.
Logical move was to try GitHub’s &lt;a href=&quot;https://atom.io&quot;&gt;Atom&lt;/a&gt; editor again.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://atom.io/&quot;&gt;
  &lt;img src=&quot;/public/img/atom.png&quot; alt=&quot;Atom editor&quot; class=&quot;margin-y-30&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Atom is basically a open source clone of Sublime Text, built on web technologies.
I’ve tried it two times in the past, but both times I was going back to Sublime.
It just wasn’t as polished and fast as Sublime is.
Couple of weeks ago I gave it another chance.&lt;/p&gt;

&lt;p&gt;This time it blew me away. It is so much faster than it was last time I tried it.
Community released and updated so many great packages.
Linters, support for React, Angular, Babel, ES2015…
UI is better, everything improved so much.&lt;/p&gt;

&lt;p&gt;Small disclaimer, I’m primary a front end developer, and Atom is awesome for it.
People are using it for everything else too, but I don’t have much experience with other languages.&lt;/p&gt;

&lt;p&gt;Issue with large files is still here though. Opening 5MB+ log files is painful.
This is something that I hope will be solved in the future, but it is not a deal breaker for me.
Also when you open a file, there is a brief flash of white text,
before syntax highlighting kicks in, but I got used to it after couple of days.&lt;/p&gt;

&lt;p&gt;Long story short - I’m sticking with Atom this time.&lt;/p&gt;

&lt;p&gt;Thanks to everyone in the Atom team and community, for making awesome development tool,
and keeping it open source.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Edit: I even used Atom recently on live coding session on
&lt;a href=&quot;/null-object-tech-meetup-vol-2/&quot;&gt;Null Object Tech Meetup&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/null-object-tech-meetup-vol-2/&quot;&gt;
  &lt;img src=&quot;/public/img/meetup-vol-2/4.jpg&quot; alt=&quot;Null Object tech meetup live coding&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Null Object Tech Meetup Vol 2</title>
   <link href="http://stanko.github.io/null-object-tech-meetup-vol-2/"/>
   <updated>2016-04-15T00:00:00+00:00</updated>
   <id>http://stanko.github.io/null-object-tech-meetup-vol-2</id>
   <content type="html">&lt;p&gt;Two days ago, we held the second Tech Meetup.
There were two speakers including myself, and Nemanja Nićiforović, our CEO.
Nemanja spoke &lt;i&gt;How to Freelance&lt;/i&gt;, and I covered &lt;i&gt;Intro to React&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;Grab slides:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/public/pdf/Null Object Tech Meetup - How To Freelance.pdf&quot;&gt;How To Freelance&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/public/pdf/Null Object Tech Meetup - Intro To React.pdf&quot;&gt;Intro To React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are very thankful to our friends at
&lt;a href=&quot;https://www.facebook.com/zaokret/&quot;&gt;Zaokret&lt;/a&gt; where meetup took place.
There were around 60 people and we hope even more people will come to the next one.
Hopefully, we are not going to make a year long pause like we did between this and the last one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/meetup-vol-2/1.jpg&quot; alt=&quot;Null Object tech meetup audience&quot; /&gt;
&lt;img src=&quot;/public/img/meetup-vol-2/2.jpg&quot; alt=&quot;Stanko Tadic talking at tech meetup&quot; /&gt;
&lt;img src=&quot;/public/img/meetup-vol-2/3.jpg&quot; alt=&quot;Null Object tech meetup audience&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>HTML canvas video player</title>
   <link href="http://stanko.github.io/html-canvas-video-player-ios/"/>
   <updated>2016-04-05T00:00:00+00:00</updated>
   <id>http://stanko.github.io/html-canvas-video-player-ios</id>
   <content type="html">&lt;p&gt;This is the one of my most popular repos. Once client asked for inline video that works on iPhone too.
As Apple doesn’t allow that (all videos are full screen in native player, and autoplay is not supported),.
There was no easy solution, so this player was born.&lt;/p&gt;

&lt;p&gt;It uses HTML &lt;code class=&quot;highlighter-rouge&quot;&gt;video&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;canvas&lt;/code&gt;. Script picks up the frame from the video and draws it on the canvas.
For sound, there is &lt;code class=&quot;highlighter-rouge&quot;&gt;audio&lt;/code&gt; element using video files (you can provide different audio file for it).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stanko.github.io/html-canvas-video-player/&quot;&gt;
  &lt;img src=&quot;/public/img/projects/canvas-video.jpg&quot; alt=&quot;HTML canvas video player - Demo&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Play, pause, jump to time and autoplay are all supported.
But please check the &lt;a href=&quot;http://stanko.github.io/html-canvas-video-player/&quot;&gt;documentation and demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You shouldn’t use this on any device that supports HTML video natively, but as a fallback.&lt;/p&gt;

&lt;p&gt;Grab the code on &lt;a href=&quot;https://github.com/Stanko/html-canvas-video-player&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>My favorite bash oneliner</title>
   <link href="http://stanko.github.io/my-favorite-bash-oneliner/"/>
   <updated>2016-04-04T00:00:00+00:00</updated>
   <id>http://stanko.github.io/my-favorite-bash-oneliner</id>
   <content type="html">&lt;p&gt;This simple bash command finds all of the files matching &lt;code class=&quot;highlighter-rouge&quot;&gt;*~&lt;/code&gt; recursively, executes &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt; on them
and prints out which files are affected.&lt;/p&gt;

&lt;p&gt;You can replace file matching pattern, and command you want to execute.&lt;/p&gt;

&lt;pre&gt;
  find ./ -name '*~' -exec rm '{}' ';' -print
&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Custom scroll bars</title>
   <link href="http://stanko.github.io/custom-scroll-bars/"/>
   <updated>2016-03-21T00:00:00+00:00</updated>
   <id>http://stanko.github.io/custom-scroll-bars</id>
   <content type="html">&lt;p&gt;Generally when comes to replacing native UI components, I’m strongly against it.
But, we’ve all been there, when the client insists on it.&lt;/p&gt;

&lt;p&gt;You’ll see how to style it via CSS (webkit only),
apply pure JavaScipt plugin with native scrolling or apply simple CSS hack.&lt;/p&gt;

&lt;p&gt;Well, let’s go :)&lt;/p&gt;

&lt;!--more--&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;css-solution-but-only-for-webkit&quot;&gt;CSS solution, but only for webkit&lt;/h3&gt;

&lt;p&gt;Webkit scrollbars can be styles via CSS. This is great, but still not cross browser.
CSS tricks has a &lt;a href=&quot;https://css-tricks.com/custom-scrollbars-in-webkit/&quot;&gt;great article&lt;/a&gt; on it.&lt;/p&gt;

&lt;p&gt;You can use pseudo selectors, these ones are used in the demo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nd&quot;&gt;::-webkit-scrollbar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#CCF6ED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;::-webkit-scrollbar-thumb&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#21BB9A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check jsfiddle demo with green-ish scrollbars &lt;i&gt;webkit only&lt;/i&gt;.&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;400&quot; src=&quot;//jsfiddle.net/on9uho92/embedded/result,css/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;custom-javascript-plugin-using-native-scroll&quot;&gt;Custom JavaScript plugin, using native scroll&lt;/h3&gt;

&lt;p&gt;This one I wrote years ago, and it is fully supporting IE8. It needs some love,
as it should updated with I have learned since then.&lt;/p&gt;

&lt;p&gt;Using browser native scroll so it is smooth as you can get.
Scrollbars are customizable via CSS.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stanko.github.io/rocketScroll/&quot;&gt;
  &lt;img src=&quot;/public/img/projects/rocket-scroll.png&quot; alt=&quot;Demo - React slider with touch support&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check the &lt;a href=&quot;http://stanko.github.io/rocketScroll/&quot;&gt;demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Grab the code on &lt;a href=&quot;https://github.com/Stanko/rocketScroll&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;css-solution-all-browsers&quot;&gt;CSS solution, all browsers&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Idea - Show scrollbars only on mouse hover.&lt;/li&gt;
  &lt;li&gt;Problem - content will be shrinked for the width of the scrollbar on hover, and jump.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are going to exploit the fast that all of the browsers have sub 20px wide scrollbar.
This demo is using two divs, outer one which will be scrolled, and content wrapped in the inner one.
Just put &lt;code class=&quot;highlighter-rouge&quot;&gt;overflow: hidden&lt;/code&gt; on the outer div, and on mouse hover, switch to &lt;code class=&quot;highlighter-rouge&quot;&gt;overflow: scroll&lt;/code&gt;
Having inner div smaller for 20px, you will be able to create enough
space for the scroll bar, and content won’t jump around.&lt;/p&gt;

&lt;p&gt;You’ll need to add modernizr, or some other way to detect touch devices.
That’s why we are using &lt;code class=&quot;highlighter-rouge&quot;&gt;overflow-y: scroll&lt;/code&gt; by default.
Scrolling on touch devices is already nice and smooth.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.scroll-y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;overflow-y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;scroll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* not to mess up scroll on touch devices */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.scroll-y-content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;280px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* 20px less than parent width */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/* no-touchevents class is added by modernizr
 * as we don't want to apply this on touch devices */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.no-touchevents&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.scroll-y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;overflow-y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.no-touchevents&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.scroll-y&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;overflow-y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;scroll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check jsfiddle demo.&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;400&quot; src=&quot;//jsfiddle.net/az220ayb/embedded/result,css,html/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>Simple React slider with touch support</title>
   <link href="http://stanko.github.io/simple-react-slider/"/>
   <updated>2016-03-12T00:00:00+00:00</updated>
   <id>http://stanko.github.io/simple-react-slider</id>
   <content type="html">&lt;p&gt;I needed simple React slider component, as we are building our new website as a universal React application.
But I did not find anything lightweight. There is a crazy trend in JavaScript world - add gazillion dependencies.&lt;/p&gt;

&lt;p&gt;So again, I made something myself.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stanko.github.io/react-slider/&quot;&gt;
  &lt;img src=&quot;/public/img/projects/react-slider.png&quot; alt=&quot;Demo - React slider with touch support&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check the &lt;a href=&quot;http://stanko.github.io/react-slider/&quot;&gt;demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It has &lt;b&gt;no dependencies&lt;/b&gt;, and about 200 lines of code.
Very simple and extensible. Every modern browser is supported and IE10+.&lt;/p&gt;

&lt;p&gt;IE9 should work (if you adapt the CSS), but I didn’t test it.&lt;/p&gt;

&lt;p&gt;Grab the code on &lt;a href=&quot;https://github.com/Stanko/react-slider&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>What is the point of the website if it kills my laptop?</title>
   <link href="http://stanko.github.io/what-is-the-point/"/>
   <updated>2016-02-29T00:00:00+00:00</updated>
   <id>http://stanko.github.io/what-is-the-point</id>
   <content type="html">&lt;p&gt;People need to realize that is not enough to have a nice website with a ton of animations and effects.
There is no point having such website if I can’t scroll it, while CPU and coolers go crazy.
And I use latest MacBook with maxed hardware. Can’t imagine trying to use those websites on the old machine (or IE8-9).&lt;/p&gt;

&lt;p&gt;Get your performance together.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Jekyll "Read more" link</title>
   <link href="http://stanko.github.io/jekyll-read-more-link/"/>
   <updated>2016-02-27T00:00:00+00:00</updated>
   <id>http://stanko.github.io/jekyll-read-more-link</id>
   <content type="html">&lt;p&gt;It is nice to use &lt;code class=&quot;highlighter-rouge&quot;&gt;instead of&lt;/code&gt;
on your Jekyll home page, but then users can’t see if there is more to read until they open
the whole post.&lt;/p&gt;

&lt;p&gt;To add &lt;code class=&quot;highlighter-rouge&quot;&gt;Read more&lt;/code&gt; link, you can use this simple snippet.&lt;/p&gt;

&lt;pre&gt;
{&amp;percnt; if post.excerpt != post.content &amp;percnt;}
    &amp;lt;a href=&amp;quot;&amp;lbrace;&amp;lbrace; site.baseurl }}&amp;lbrace;&amp;lbrace; post.url }}&amp;quot;&amp;gt;Read more&amp;lt;/a&amp;gt;
{&amp;percnt; endif &amp;percnt;}
&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Jekyll and Gulp workflow</title>
   <link href="http://stanko.github.io/jekyll-gulp-workflow/"/>
   <updated>2016-02-27T00:00:00+00:00</updated>
   <id>http://stanko.github.io/jekyll-gulp-workflow</id>
   <content type="html">&lt;p&gt;As you probably know this blog is powered by &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;.
It is a really nice platform, but it lacks a few things I’m used to during development.
First one is live reload on file changes (and injecting CSS), using SASS, autoprefixer, ES6…&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I tried to find a boilerplate, but everything I found didn’t match my needs.
Usually people would run gulp tasks for SASS and JavaScript files, and on change
run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt;, which is insanely slow.
They would use &lt;a href=&quot;https://www.browsersync.io/&quot;&gt;BrowserSync&lt;/a&gt; to serve &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;So I did what programmers do - written my own. I quickly made usual gulp tasks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;styles&lt;/code&gt; - to compile SASS and autoprefix it&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scripts&lt;/code&gt; - to transpile ES6 goodness, and concatenate JavaScript files&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;serve&lt;/code&gt; - to start local server, watch for changes and auto reload&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First thing I did is that I was running &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt; in one terminal,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp serve&lt;/code&gt; with BrowserSync in the other.
This was working decently, but I wanted to run only one command, and let the tasks do everything for me.&lt;/p&gt;

&lt;p&gt;That is where node child process comes in.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;childProcess&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'child_process'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;spawn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;childProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'jekyll'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'jekyll'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'serve'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;stdio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'inherit'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This task * spawns a child process from gulp.
Nice thing is that we can start it, and gulp will kill it on exit.
Now we have up and running Jekyll server, and proxy it to BrowserSync.&lt;/p&gt;

&lt;p&gt;But darn, injecting CSS files didn’t really work. Server was expeting CSS file
to come from &lt;code class=&quot;highlighter-rouge&quot;&gt;/public/css/style.css&lt;/code&gt;, but &lt;code class=&quot;highlighter-rouge&quot;&gt;browserSync.stream&lt;/code&gt; in gulp pipe would
inject it from the &lt;code class=&quot;highlighter-rouge&quot;&gt;_sass&lt;/code&gt; folder. I solved this by copying css file to the &lt;code class=&quot;highlighter-rouge&quot;&gt;.tmp/public/css&lt;/code&gt; and
adding &lt;code class=&quot;highlighter-rouge&quot;&gt;.tmp&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;serveStatic&lt;/code&gt; option of the BrowserSync.&lt;/p&gt;

&lt;p&gt;One thing I should mention, that I keep my SASS files in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_sass&lt;/code&gt; folder, and
JavaScript in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_js&lt;/code&gt; one.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Gulp watches changes on SASS/JS, and compiles them into &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; folder.&lt;/li&gt;
  &lt;li&gt;Then &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt; takes them and moves them to &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt;. Jekyll also takes care of &lt;code class=&quot;highlighter-rouge&quot;&gt;.md&lt;/code&gt; files.&lt;/li&gt;
  &lt;li&gt;Gulp watches changes on &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; and reloads the browser if html/js is changed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Complete code is available &lt;a href=&quot;https://github.com/Stanko/Stanko.github.io&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;/small&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Actual taks is a bit more complicated, check the whole
&lt;a href=&quot;https://github.com/Stanko/Stanko.github.io/blob/master/gulpfile.babel.js&quot;&gt;gulpfile&lt;/a&gt;.
&amp;lt;/small&amp;gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;tldr&quot;&gt;TL;DR&lt;/h3&gt;

&lt;p&gt;To enable live reload, SASS and JS transpiling in your Jekyll development grab my
&lt;a href=&quot;https://github.com/Stanko/Stanko.github.io/blob/master/gulpfile.babel.js&quot;&gt;gulpfile.babel.js&lt;/a&gt;,
&lt;a href=&quot;https://github.com/Stanko/Stanko.github.io/blob/master/package.json&quot;&gt;package.json&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add this to your &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
exclude: [
  'node_modules',
  'gulpfile.babel.js',
  'package.json',
  '_sass',
  '_js',
  '.sass-cache'
]
&lt;/pre&gt;

&lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt; then &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp&lt;/code&gt; when it is finished and open &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:9000&lt;/code&gt; in your browser.
Then write your posts and enjoy much smoother workflow.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>3D Rotating cubes hover effect</title>
   <link href="http://stanko.github.io/3d-rotating-cube-effect/"/>
   <updated>2016-02-23T00:00:00+00:00</updated>
   <id>http://stanko.github.io/3d-rotating-cube-effect</id>
   <content type="html">&lt;p&gt;Again, I’ve seen it somewhere on the internet and recreated it.
This one uses jQuery, although I plan to rewrite it to vanilla JavaScript.&lt;/p&gt;

&lt;p&gt;It switches between two &lt;i&gt;sides&lt;/i&gt; of the cube, every time you hover.
Depending from which side cursor entered the cube, it will rotate in opposite direction.
It is fully responsive, and on touch devices, direction depends of where you tap.&lt;/p&gt;

&lt;p&gt;Cube side is a regular &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt;, and you can put any type of content in it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stanko.github.io/cube-3D-rotate-grid/&quot;&gt;
  &lt;img src=&quot;/public/img/projects/cube-3D-rotate-grid.png&quot; alt=&quot;Demo - 3D Rotating cubes hover effect&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Works on every modern browser, but on IE it falls back to fade effect.
Thing is that Internet Explorers do not support &lt;code class=&quot;highlighter-rouge&quot;&gt;transform-style: preserve-3d&lt;/code&gt; property.
More on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/transform-style&quot;&gt;MDN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Check the &lt;a href=&quot;http://stanko.github.io/cube-3D-rotate-grid/&quot;&gt;demo&lt;/a&gt;.
Documentation is on the same page.&lt;/p&gt;

&lt;p&gt;Grab the code on &lt;a href=&quot;https://github.com/Stanko/cube-3D-rotate-grid&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Warning: Every person I introduced to this played with it for ages :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Custom Jekyll pagination</title>
   <link href="http://stanko.github.io/custom-jekyll-pagination/"/>
   <updated>2016-02-22T00:00:00+00:00</updated>
   <id>http://stanko.github.io/custom-jekyll-pagination</id>
   <content type="html">&lt;p&gt;Jekyll comes with simple pagination which has only &lt;code class=&quot;highlighter-rouge&quot;&gt;Newer&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Older&lt;/code&gt; links.
I wanted a little bit more, now pagination shows at least five pages, with current in the middle.
On the larger screens there are also first and last page links.
&lt;code class=&quot;highlighter-rouge&quot;&gt;Newer&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Older&lt;/code&gt; links are, of course, still there.&lt;/p&gt;

&lt;p&gt;Check the &lt;a href=&quot;https://gist.github.com/Stanko/4e379a72715fc596c1cc&quot;&gt;gist with the code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can see it at the bottom of this website, or just check the screenshot below:
&lt;img src=&quot;/public/img/projects/jekyll-pagination.png&quot; alt=&quot;Custom Jekyll pagination&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Animated login and signup forms</title>
   <link href="http://stanko.github.io/animated-login-signup-forms/"/>
   <updated>2016-02-22T00:00:00+00:00</updated>
   <id>http://stanko.github.io/animated-login-signup-forms</id>
   <content type="html">&lt;p&gt;Well I saw pretty nice mockup on &lt;a href=&quot;https://dribbble.com/shots/2311260-Day-1-Sign-Up-and-Login-Animated-Download-Template&quot;&gt;Dribbble&lt;/a&gt;
and decided to make it for fun. It didn’t include mobile/responsive solution, so I came up with my own.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stanko.github.io/animated-onboarding/&quot;&gt;
  &lt;img src=&quot;/public/img/projects/animated-onboarding.png&quot; alt=&quot;Demo - Animated login and signup forms&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check the &lt;a href=&quot;http://stanko.github.io/animated-onboarding/&quot;&gt;demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is pure CSS solution - it uses &lt;code class=&quot;highlighter-rouge&quot;&gt;:target&lt;/code&gt; selector for changing states.
Find more about &lt;code class=&quot;highlighter-rouge&quot;&gt;:target&lt;/code&gt; on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/:target&quot;&gt;MDN&lt;/a&gt;.
This is neat, as it also can be bookmarked on both states, and browser button work too.&lt;/p&gt;

&lt;p&gt;Grab the code on &lt;a href=&quot;https://github.com/Stanko/animated-onboarding&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hello World</title>
   <link href="http://stanko.github.io/hello-world/"/>
   <updated>2016-02-21T00:00:00+00:00</updated>
   <id>http://stanko.github.io/hello-world</id>
   <content type="html">&lt;p&gt;Everything starts with a &lt;code&gt;Hello World&lt;/code&gt; so does this blog.&lt;/p&gt;

&lt;p&gt;For the first time everything will be under heavy development, until I get it the way I want.&lt;/p&gt;

&lt;p&gt;As I really enjoy making stuff, I decided to try to make small JavaScript or CSS (SASS) plugin/script every week.
Those are going to be both big and small, proof of concepts and production ready stuff.&lt;/p&gt;
</content>
 </entry>
 

</feed>
